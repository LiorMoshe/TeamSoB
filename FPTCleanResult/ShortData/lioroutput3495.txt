26470 15:56:27.024912 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f62000
26470 15:56:27.024924 read(7, "rootfs / rootfs rw 0 0\nnone /sys sysfs rw,nosuid,nodev,noexec 0 0\nnone /proc proc rw,nosuid,nodev,noexec 0 0\nudev /dev tmpfs rw,relatime 0 0\nfusectl /sys/fs/fuse/connections fusectl rw,relatime 0 0\n/dev/mapper/metasploitable-root / ext3 rw,relatime,errors=remount-ro,data=ordered 0 0\n/dev/mapper/metasploitable-root /dev/.static/dev ext3 rw,relatime,errors=remount-ro,data=ordered 0 0\ntmpfs /var/run tmpfs rw,nosuid,nodev,noexec 0 0\ntmpfs /var/lock tmpfs rw,nosuid,nodev,noexec 0 0\ntmpfs /dev/shm tmpfs rw,relatime 0 0\ndevpts /dev/pts devpts rw,relatime 0 0\ntmpfs /var/run tmpfs rw,nosuid,nodev,noexec 0 0\ntmpfs /var/lock tmpfs rw,nosuid,nodev,noexec 0 0\n/dev/sda1 /boot ext3 rw,relatime,data=ordered 0 0\nsecurityfs /sys/kernel/security securityfs rw,relatime 0 0\nrpc_pipefs /var/lib/nfs/rpc_pipefs rpc_pipefs rw,relatime 0 0\nnfsd /proc/fs/nfsd nfsd rw,relatime 0 0\n", 1024) = 866
26470 15:56:27.025017 read(7, "", 1024) = 0
26470 15:56:27.025028 close(7)          = 0
26470 15:56:27.025047 munmap(0xb7f62000, 4096) = 0
26470 15:56:27.025063 munmap(0xb7d91000, 29913) = 0
26470 15:56:27.025076 read(6, "", 4096) = 0
26470 15:56:27.025087 close(6)          = 0
26470 15:56:27.025096 munmap(0xb7f63000, 4096) = 0
26470 15:56:27.025107 stat64("/etc/pam.d", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
26470 15:56:27.025126 open("/etc/pam.d/common-account", O_RDONLY|O_LARGEFILE) = 6
26470 15:56:27.025139 fstat64(6, {st_mode=S_IFREG|0644, st_size=392, ...}) = 0
26470 15:56:27.025155 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f63000
26470 15:56:27.025169 read(6, "#\n# /etc/pam.d/common-account - authorization settings common to all services\n#\n# This file is included from other service-specific PAM config files,\n# and should contain a list of the authorization modules that define\n# the central access policy for use on the system.  The default is to\n# only deny service to users whose accounts are expired in /etc/shadow.\n#\naccount\trequired\tpam_unix.so\n", 4096) = 392
26470 15:56:27.025208 read(6, "", 4096) = 0
26470 15:56:27.025218 close(6)          = 0
26470 15:56:27.025227 munmap(0xb7f63000, 4096) = 0
26470 15:56:27.025238 stat64("/etc/pam.d", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
26470 15:56:27.025255 open("/etc/pam.d/common-session", O_RDONLY|O_LARGEFILE) = 6
26470 15:56:27.025268 fstat64(6, {st_mode=S_IFREG|0644, st_size=372, ...}) = 0
26470 15:56:27.025284 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f63000
26470 15:56:27.025294 read(6, "#\n# /etc/pam.d/common-session - session-related modules common to all services\n#\n# This file is included from other service-specific PAM config files,\n# and should contain a list of modules that define tasks to be performed\n# at the start and end of sessions of *any* kind (both interactive and\n# non-interactive).  The default is pam_unix.\n#\nsession\trequired\tpam_unix.so\n", 4096) = 372
26470 15:56:27.025332 read(6, "", 4096) = 0
26470 15:56:27.025341 close(6)          = 0
26470 15:56:27.025350 munmap(0xb7f63000, 4096) = 0
26470 15:56:27.025370 read(5, "", 4096) = 0
26470 15:56:27.025389 close(5)          = 0
26470 15:56:27.025398 munmap(0xb7f69000, 4096) = 0
26470 15:56:27.025408 open("/etc/pam.d/other", O_RDONLY|O_LARGEFILE) = 5
26470 15:56:27.025421 fstat64(5, {st_mode=S_IFREG|0644, st_size=520, ...}) = 0
26470 15:56:27.025436 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f69000
26470 15:56:27.025447 read(5, "#\n# /etc/pam.d/other - specify the PAM fallback behaviour\n#\n# Note that this file is used for any unspecified service; for example\n#if /etc/pam.d/cron  specifies no session modules but cron calls\n#pam_open_session, the session module out of /etc/pam.d/other is\n#used.  If you really want nothing to happen then use pam_permit.so or\n#pam_deny.so as appropriate.\n\n# We fall back to the system default in /etc/pam.d/common-*\n# \n\n@include common-auth\n@include common-account\n@include common-password\n@include common-session\n", 4096) = 520
26470 15:56:27.025490 stat64("/etc/pam.d", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
26470 15:56:27.025508 open("/etc/pam.d/common-auth", O_RDONLY|O_LARGEFILE) = 6
26470 15:56:27.025540 fstat64(6, {st_mode=S_IFREG|0644, st_size=476, ...}) = 0
26470 15:56:27.025566 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f63000
26470 15:56:27.025577 read(6, "#\n# /etc/pam.d/common-auth - authentication settings common to all services\n#\n# This file is included from other service-specific PAM config files,\n# and should contain a list of the authentication modules that define\n# the central authentication scheme for use on the system\n# (e.g., /etc/shadow, LDAP, Kerberos, etc.).  The default is to use the\n# traditional Unix authentication mechanisms.\n#\nauth\trequisite\tpam_unix.so nullok_secure\n# auth\toptional\tpam_smbpass.so migrate\n", 4096) = 476
26470 15:56:27.025633 read(6, "", 4096) = 0
26470 15:56:27.025643 close(6)          = 0
26470 15:56:27.025662 munmap(0xb7f63000, 4096) = 0
26470 15:56:27.025673 stat64("/etc/pam.d", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
26470 15:56:27.025691 open("/etc/pam.d/common-account", O_RDONLY|O_LARGEFILE) = 6
26470 15:56:27.025703 fstat64(6, {st_mode=S_IFREG|0644, st_size=392, ...}) = 0
26470 15:56:27.025719 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f63000
26470 15:56:27.025729 read(6, "#\n# /etc/pam.d/common-account - authorization settings common to all services\n#\n# This file is included from other service-specific PAM config files,\n# and should contain a list of the authorization modules that define\n# the central access policy for use on the system.  The default is to\n# only deny service to users whose accounts are expired in /etc/shadow.\n#\naccount\trequired\tpam_unix.so\n", 4096) = 392
26470 15:56:27.025770 read(6, "", 4096) = 0
26470 15:56:27.025780 close(6)          = 0
26470 15:56:27.025789 munmap(0xb7f63000, 4096) = 0
26470 15:56:27.025799 stat64("/etc/pam.d", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
26470 15:56:27.025817 open("/etc/pam.d/common-password", O_RDONLY|O_LARGEFILE) = 6
26470 15:56:27.025830 fstat64(6, {st_mode=S_IFREG|0644, st_size=1563, ...}) = 0
26470 15:56:27.025845 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f63000
26470 15:56:27.025855 read(6, "#\n# /etc/pam.d/common-password - password-related modules common to all services\n#\n# This file is included from other service-specific PAM config files,\n# and should contain a list of modules that define the services to be\n# used to change user passwords.  The default is pam_unix.\n\n# Explanation of pam_unix options:\n#\n# The \"nullok\" option allows users to change an empty password, else\n# empty passwords are treated as locked accounts.\n#\n# The \"md5\" option enables MD5 passwords.  Without this option, the\n# default is Unix crypt.\n#\n# The \"obscure\" option replaces the old `OBSCURE_CHECKS_ENAB\' option in\n# login.defs.\n#\n# You can also use the \"min\" option to enforce the length of the new\n# password.\n#\n# See the pam_unix manpage for other options.\n\npassword   requisite   pam_unix.so nullok obscure md5\n\n# Alternate strength checking for password. Note that this\n# requires the libpam-cracklib package to be installed.\n# You will need to comment out the password line above and\n# uncomment the next two in order to use this.\n# (Replaces the `OBSCURE_CHECKS_ENAB\', `CRACKLIB_DICTPATH\')\n#\n# password required\t  pam_cracklib.so retry=3 minlen=6 difok=3\n# password required\t  pam_unix.so use_authtok nullok md5\n\n# minimally-intrusive inclusion of smbpass in the stack for\n# synchronization.  If the module is absent or the passwords don\'t\n# match, this module will be ignored without prompting; and if the \n# passwords do match, the NTLM hash for the user will be updated\n# automatically.\n# password   optional   pam_smbpass.so nullok use_authtok use_first_pass\n", 4096) = 1563
26470 15:56:27.025968 read(6, "", 4096) = 0
26470 15:56:27.025977 close(6)          = 0
26470 15:56:27.025986 munmap(0xb7f63000, 4096) = 0
26470 15:56:27.025996 stat64("/etc/pam.d", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
26470 15:56:27.026014 open("/etc/pam.d/common-session", O_RDONLY|O_LARGEFILE) = 6
26470 15:56:27.026026 fstat64(6, {st_mode=S_IFREG|0644, st_size=372, ...}) = 0
26470 15:56:27.026042 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f63000
26470 15:56:27.026052 read(6, "#\n# /etc/pam.d/common-session - session-related modules common to all services\n#\n# This file is included from other service-specific PAM config files,\n# and should contain a list of modules that define tasks to be performed\n# at the start and end of sessions of *any* kind (both interactive and\n# non-interactive).  The default is pam_unix.\n#\nsession\trequired\tpam_unix.so\n", 4096) = 372
26470 15:56:27.026089 read(6, "", 4096) = 0
26470 15:56:27.026098 close(6)          = 0
26470 15:56:27.026107 munmap(0xb7f63000, 4096) = 0
26470 15:56:27.026117 read(5, "", 4096) = 0
26470 15:56:27.026126 close(5)          = 0
26470 15:56:27.026135 munmap(0xb7f69000, 4096) = 0
26470 15:56:27.026148 time(NULL)        = 1495655787
26470 15:56:27.026159 lstat64("/etc/ftpusers", {st_mode=S_IFREG|0644, st_size=132, ...}) = 0
26470 15:56:27.026177 open("/etc/ftpusers", O_RDONLY|O_LARGEFILE) = 5
26470 15:56:27.026188 fstat64(5, {st_mode=S_IFREG|0644, st_size=132, ...}) = 0
26470 15:56:27.026204 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f69000
26470 15:56:27.026214 read(5, "# /etc/ftpusers: list of users disallowed FTP access. See ftpusers(5).\n\nroot\ndaemon\nbin\nsys\nsync\ngames\nman\nlp\nmail\nnews\nuucp\nnobody\n", 4096) = 132
26470 15:56:27.026237 read(5, "", 4096) = 0
26470 15:56:27.026246 close(5)          = 0
26470 15:56:27.026255 munmap(0xb7f69000, 4096) = 0
26470 15:56:27.026271 getuid32()        = 0
26470 15:56:27.026295 open("/etc/passwd", O_RDONLY|0x80000 /* O_??? */) = 5
26470 15:56:27.026321 _llseek(5, 0, [0], SEEK_CUR) = 0
26470 15:56:27.026332 fstat64(5, {st_mode=S_IFREG|0644, st_size=1624, ...}) = 0
26470 15:56:27.026348 mmap2(NULL, 1624, PROT_READ, MAP_SHARED, 5, 0) = 0xb7f69000
26470 15:56:27.026359 _llseek(5, 1624, [1624], SEEK_SET) = 0
26470 15:56:27.026378 munmap(0xb7f69000, 1624) = 0
26470 15:56:27.026389 close(5)          = 0
26470 15:56:27.026414 open("/etc/shadow", O_RDONLY|0x80000 /* O_??? */) = 5
26470 15:56:27.026431 _llseek(5, 0, [0], SEEK_CUR) = 0
26470 15:56:27.026441 fstat64(5, {st_mode=S_IFREG|0640, st_size=1233, ...}) = 0
26470 15:56:27.026481 mmap2(NULL, 1233, PROT_READ, MAP_SHARED, 5, 0) = 0xb7f69000
26470 15:56:27.026503 _llseek(5, 1233, [1233], SEEK_SET) = 0
26470 15:56:27.026524 munmap(0xb7f69000, 1233) = 0
26470 15:56:27.026534 close(5)          = 0
26470 15:56:27.026553 open("/etc/passwd", O_RDONLY|0x80000 /* O_??? */) = 5
26470 15:56:27.026566 _llseek(5, 0, [0], SEEK_CUR) = 0
26470 15:56:27.026576 fstat64(5, {st_mode=S_IFREG|0644, st_size=1624, ...}) = 0
26470 15:56:27.026592 mmap2(NULL, 1624, PROT_READ, MAP_SHARED, 5, 0) = 0xb7f69000
26470 15:56:27.026602 _llseek(5, 1624, [1624], SEEK_SET) = 0
26470 15:56:27.026617 munmap(0xb7f69000, 1624) = 0
26470 15:56:27.026627 close(5)          = 0
26470 15:56:27.026639 open("/etc/shadow", O_RDONLY|0x80000 /* O_??? */) = 5
26470 15:56:27.026651 _llseek(5, 0, [0], SEEK_CUR) = 0
26470 15:56:27.026661 fstat64(5, {st_mode=S_IFREG|0640, st_size=1233, ...}) = 0
26470 15:56:27.026676 mmap2(NULL, 1233, PROT_READ, MAP_SHARED, 5, 0) = 0xb7f69000
26470 15:56:27.026687 _llseek(5, 1233, [1233], SEEK_SET) = 0
26470 15:56:27.026703 munmap(0xb7f69000, 1233) = 0
26470 15:56:27.026712 close(5)          = 0
26470 15:56:27.026944 getuid32()        = 0
26470 15:56:27.026954 open("/etc/passwd", O_RDONLY|0x80000 /* O_??? */) = 5
26470 15:56:27.026966 _llseek(5, 0, [0], SEEK_CUR) = 0
26470 15:56:27.026976 fstat64(5, {st_mode=S_IFREG|0644, st_size=1624, ...}) = 0
26470 15:56:27.026992 mmap2(NULL, 1624, PROT_READ, MAP_SHARED, 5, 0) = 0xb7f69000
26470 15:56:27.027002 _llseek(5, 1624, [1624], SEEK_SET) = 0
26470 15:56:27.027017 munmap(0xb7f69000, 1624) = 0
26470 15:56:27.027026 close(5)          = 0
26470 15:56:27.027039 open("/etc/shadow", O_RDONLY|0x80000 /* O_??? */) = 5
26470 15:56:27.027061 _llseek(5, 0, [0], SEEK_CUR) = 0
26470 15:56:27.027071 fstat64(5, {st_mode=S_IFREG|0640, st_size=1233, ...}) = 0
26470 15:56:27.027097 mmap2(NULL, 1233, PROT_READ, MAP_SHARED, 5, 0) = 0xb7f69000
26470 15:56:27.027107 _llseek(5, 1233, [1233], SEEK_SET) = 0
26470 15:56:27.027123 munmap(0xb7f69000, 1233) = 0
26470 15:56:27.027132 close(5)          = 0
26470 15:56:27.027143 time(NULL)        = 1495655787
26470 15:56:27.027158 munmap(0xb7f66000, 12164) = 0
26470 15:56:27.027172 munmap(0xb7f64000, 7136) = 0
26470 15:56:27.027185 munmap(0xb7d99000, 95428) = 0
26470 15:56:27.027196 munmap(0xb7d5f000, 201052) = 0
26470 15:56:27.027207 munmap(0xb7d46000, 101180) = 0
26470 15:56:27.027223 gettimeofday({1495655787, 27227}, NULL) = 0
26470 15:56:27.027235 stat64("/usr/share/zoneinfo/UTC+04:00", 0xbfdb5724) = -1 ENOENT (No such file or directory)
26470 15:56:27.027249 open("/usr/share/zoneinfo/UTC+04:00", O_RDONLY) = -1 ENOENT (No such file or directory)
26470 15:56:27.027275 fcntl64(3, F_SETLKW64, {type=F_WRLCK, whence=SEEK_SET, start=0, len=0}, 0xbfdb5874) = 0
26470 15:56:27.027291 write(3, "Wed May 24 15:56:27 2017 [pid 26470] [msfadmin] OK LOGIN: Client \"127.0.0.1\"\n", 77) = 77
26470 15:56:27.027308 fcntl64(3, F_SETLK64, {type=F_UNLCK, whence=SEEK_SET, start=0, len=0}, 0xbfdb587c) = 0
26470 15:56:27.027320 rt_sigaction(SIGCHLD, {0x805cad0, ~[RTMIN RT_1], 0}, NULL, 8) = 0
26470 15:56:27.027334 write(4, "\1", 1 <unfinished ...>
26471 15:56:27.027348 <... read resumed> "\1", 1) = 1
26470 15:56:27.027354 <... write resumed> ) = 1
26471 15:56:27.027362 exit_group(0)     = ?
26470 15:56:27.027394 --- SIGCHLD (Child exited) @ 0 (0) ---
26470 15:56:27.027404 sigreturn()       = ? (mask now [])
26470 15:56:27.027436 wait4(-1, [{WIFEXITED(s) && WEXITSTATUS(s) == 0}], 0, NULL) = 26471
26470 15:56:27.027453 close(4)          = 0
26470 15:56:27.027475 socketpair(PF_FILE, SOCK_STREAM, 0, [4, 5]) = 0
26470 15:56:27.027490 rt_sigaction(SIGCHLD, {0x805cad0, ~[RTMIN RT_1], 0}, NULL, 8) = 0
26470 15:56:27.027503 rt_sigaction(SIGALRM, {0x805cb10, ~[RTMIN RT_1], 0}, NULL, 8) = 0
26470 15:56:27.027517 clone(child_stack=0, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0xb7dcf6f8) = 26472
26472 15:56:27.027571 prctl(0x1, 0x9, 0, 0, 0) = 0
26472 15:56:27.027584 close(4)          = 0
26472 15:56:27.027610 open("/etc/passwd", O_RDONLY|0x80000 /* O_??? */) = 4
26472 15:56:27.027627 _llseek(4, 0, [0], SEEK_CUR) = 0
26472 15:56:27.027642 fstat64(4, {st_mode=S_IFREG|0644, st_size=1624, ...}) = 0
26472 15:56:27.027660 mmap2(NULL, 1624, PROT_READ, MAP_SHARED, 4, 0) = 0xb7f69000
26472 15:56:27.027672 _llseek(4, 1624, [1624], SEEK_SET) = 0
26472 15:56:27.027694 munmap(0xb7f69000, 1624) = 0
26472 15:56:27.027715 close(4)          = 0
26472 15:56:27.027729 getuid32()        = 0
26472 15:56:27.027739 open("/etc/passwd", O_RDONLY|0x80000 /* O_??? */) = 4
26472 15:56:27.027761 _llseek(4, 0, [0], SEEK_CUR) = 0
26472 15:56:27.027771 fstat64(4, {st_mode=S_IFREG|0644, st_size=1624, ...}) = 0
26472 15:56:27.027787 mmap2(NULL, 1624, PROT_READ, MAP_SHARED, 4, 0) = 0xb7f69000
26472 15:56:27.027798 _llseek(4, 1624, [1624], SEEK_SET) = 0
26472 15:56:27.027813 munmap(0xb7f69000, 1624) = 0
26472 15:56:27.027822 close(4)          = 0
26472 15:56:27.027848 open("/proc/sys/kernel/ngroups_max", O_RDONLY) = 4
26472 15:56:27.027868 read(4, "65536\n", 31) = 6
26472 15:56:27.027880 close(4)          = 0
26472 15:56:27.027893 socket(PF_FILE, SOCK_STREAM, 0) = 4
26472 15:56:27.027905 fcntl64(4, F_SETFL, O_RDWR|O_NONBLOCK) = 0
26472 15:56:27.027915 connect(4, {sa_family=AF_FILE, path="/var/run/nscd/socket"}, 110) = -1 ENOENT (No such file or directory)
26472 15:56:27.027937 close(4)          = 0
26472 15:56:27.027948 socket(PF_FILE, SOCK_STREAM, 0) = 4
26472 15:56:27.027958 fcntl64(4, F_SETFL, O_RDWR|O_NONBLOCK) = 0
26472 15:56:27.027968 connect(4, {sa_family=AF_FILE, path="/var/run/nscd/socket"}, 110) = -1 ENOENT (No such file or directory)
26472 15:56:27.027985 close(4)          = 0
26472 15:56:27.028008 open("/etc/group", O_RDONLY|0x80000 /* O_??? */) = 4
26472 15:56:27.028023 _llseek(4, 0, [0], SEEK_CUR) = 0
26472 15:56:27.028033 fstat64(4, {st_mode=S_IFREG|0644, st_size=886, ...}) = 0
26472 15:56:27.028049 mmap2(NULL, 886, PROT_READ, MAP_SHARED, 4, 0) = 0xb7f69000
26472 15:56:27.028060 _llseek(4, 886, [886], SEEK_SET) = 0
26472 15:56:27.028084 fstat64(4, {st_mode=S_IFREG|0644, st_size=886, ...}) = 0
26472 15:56:27.028101 munmap(0xb7f69000, 886) = 0
26472 15:56:27.028111 close(4)          = 0
26472 15:56:27.028121 setgroups32(13, [1000, 4, 20, 24, 25, 29, 30, 44, 46, 107, 111, 112, 119]) = 0
26472 15:56:27.028137 geteuid32()       = 0
26472 15:56:27.028147 getegid32()       = 0
26472 15:56:27.028158 setregid32(-1, 1000) = 0
26472 15:56:27.028168 setreuid32(-1, 1000) = 0
26472 15:56:27.028179 chdir("/home/msfadmin") = 0
26472 15:56:27.028190 setreuid32(-1, 0) = 0
26472 15:56:27.028199 setregid32(-1, 0) = 0
26472 15:56:27.028210 setgid32(1000)    = 0
26472 15:56:27.028219 setuid32(1000)    = 0
26472 15:56:27.028229 setrlimit(RLIMIT_NPROC, {rlim_cur=0, rlim_max=0}) = 0
26472 15:56:27.028243 mmap2(NULL, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f67000
26472 15:56:27.028254 mprotect(0xb7f69000, 4096, PROT_NONE) = 0
26472 15:56:27.028266 mprotect(0xb7f67000, 4096, PROT_NONE) = 0
26472 15:56:27.028276 getcwd("/home/msfadmin", 4096) = 15
26472 15:56:27.028290 umask(022)        = 077
26472 15:56:27.028299 getcwd("/home/msfadmin", 4096) = 15
26472 15:56:27.028316 open(".message", O_RDONLY|O_NONBLOCK|O_LARGEFILE) = -1 ENOENT (No such file or directory)
26472 15:56:27.028339 write(0, "230 Login successful.\r\n", 23) = 23
26472 15:56:27.028463 rt_sigaction(SIGALRM, {0x805cad0, ~[RTMIN RT_1], 0}, NULL, 8) = 0
26472 15:56:27.028481 alarm(300)        = 0
26472 15:56:27.028492 mmap2(NULL, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f64000
26472 15:56:27.028503 mprotect(0xb7f66000, 4096, PROT_NONE) = 0
26472 15:56:27.028524 mprotect(0xb7f64000, 4096, PROT_NONE) = 0
26472 15:56:27.028538 recv(0, "TYPE I\r\n", 4096, MSG_PEEK) = 8
26472 15:56:27.028560 read(0, "TYPE I\r\n", 8) = 8
26472 15:56:27.028586 write(0, "200 Switching to Binary mode.\r\n", 31) = 31
26472 15:56:27.028627 rt_sigaction(SIGALRM, {0x805cad0, ~[RTMIN RT_1], 0}, NULL, 8) = 0
26472 15:56:27.028642 alarm(300)        = 300
26472 15:56:27.028653 recv(0, "PASV\r\n", 4096, MSG_PEEK) = 6
26472 15:56:27.028665 read(0, "PASV\r\n", 6) = 6
26472 15:56:27.028677 write(5, "\n", 1) = 1
26472 15:56:27.028688 read(5,  <unfinished ...>
26470 15:56:27.028700 close(5)          = 0
26470 15:56:27.028713 getuid32()        = 0
26470 15:56:27.028728 open("/etc/passwd", O_RDONLY|0x80000 /* O_??? */) = 5
26470 15:56:27.028743 _llseek(5, 0, [0], SEEK_CUR) = 0
26470 15:56:27.028755 fstat64(5, {st_mode=S_IFREG|0644, st_size=1624, ...}) = 0
26470 15:56:27.028773 mmap2(NULL, 1624, PROT_READ, MAP_SHARED, 5, 0) = 0xb7f69000
26470 15:56:27.028785 _llseek(5, 1624, [1624], SEEK_SET) = 0
26470 15:56:27.028803 munmap(0xb7f69000, 1624) = 0
26470 15:56:27.028814 close(5)          = 0
26470 15:56:27.028830 setgroups32(0, []) = 0
26470 15:56:27.028842 chdir("/usr/share/empty") = 0
26470 15:56:27.028854 chroot(".")       = 0
26470 15:56:27.028865 capset(NULL, NULL) = -1 EFAULT (Bad address)
26470 15:56:27.028880 prctl(0x8, 0, 0xbfdb5858, 0x80549a6, 0xbfdb5840) = 0
26470 15:56:27.028891 prctl(0x8, 0x1, 0xbfdb5858, 0x8054a49, 0xbfdb5840) = 0
26470 15:56:27.028902 setgid32(65534)   = 0
26470 15:56:27.028912 setuid32(65534)   = 0
26470 15:56:27.028922 capset(0x19980330, 0, {CAP_NET_BIND_SERVICE, CAP_NET_BIND_SERVICE, 0}) = 0
26470 15:56:27.028936 read(4, "\n", 1)  = 1
26470 15:56:27.028949 write(4, "\1", 1) = 1
26472 15:56:27.028960 <... read resumed> "\1", 1) = 1
26472 15:56:27.028968 write(5, "\f", 1) = 1
26472 15:56:27.028978 read(5,  <unfinished ...>
26470 15:56:27.028985 read(4, "\f", 1)  = 1
26470 15:56:27.028997 socket(PF_INET, SOCK_STREAM, IPPROTO_TCP) = 5
26470 15:56:27.029011 setsockopt(5, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
26470 15:56:27.029023 gettimeofday({1495655787, 29026}, NULL) = 0
26470 15:56:27.029039 bind(5, {sa_family=AF_INET, sin_port=htons(18614), sin_addr=inet_addr("127.0.0.1")}, 16) = 0
26470 15:56:27.029055 listen(5, 1)      = 0
26470 15:56:27.029069 write(4, "\266H\0\0", 4) = 4
26472 15:56:27.029080 <... read resumed> "\266H\0\0", 4) = 4
26472 15:56:27.029094 write(0, "227 Entering Passive Mode (127,0,0,1,72,182).\r\n", 47) = 47
26472 15:56:27.029205 rt_sigaction(SIGALRM, {0x805cad0, ~[RTMIN RT_1], 0}, NULL, 8) = 0
26472 15:56:27.029223 alarm(300)        = 300
26472 15:56:27.029234 recv(0, "STOR myfile34\r\n", 4096, MSG_PEEK) = 15
26472 15:56:27.029247 read(0, "STOR myfile34\r\n", 15) = 15
26472 15:56:27.029262 write(5, "\v", 1) = 1
26472 15:56:27.029273 read(5,  <unfinished ...>
26470 15:56:27.029280 read(4, "\v", 1)  = 1
26470 15:56:27.029292 write(4, "\1\0\0\0", 4) = 4
26472 15:56:27.029302 <... read resumed> "\1\0\0\0", 4) = 4
26472 15:56:27.029311 gettimeofday({1495655787, 29315}, NULL) = 0
26472 15:56:27.029322 getcwd("/home/msfadmin", 4096) = 15
26472 15:56:27.029334 open("myfile34", O_WRONLY|O_CREAT|O_NONBLOCK|O_LARGEFILE, 0666) = 4
26472 15:56:27.029348 fstat64(4, {st_mode=S_IFREG|0644, st_size=17, ...}) = 0
26472 15:56:27.029490 fcntl64(4, F_GETFL) = 0x8801 (flags O_WRONLY|O_NONBLOCK|O_LARGEFILE)
26472 15:56:27.029502 fcntl64(4, F_SETFL, O_WRONLY|O_LARGEFILE) = 0
26472 15:56:27.029512 fcntl64(4, F_SETLKW64, {type=F_WRLCK, whence=SEEK_SET, start=0, len=0}, 0xbfdb57a4) = 0
26472 15:56:27.029532 ftruncate64(4, 0) = 0
26472 15:56:27.029553 _llseek(4, 0, [0], SEEK_SET) = 0
26472 15:56:27.029565 write(5, "\v", 1) = 1
26472 15:56:27.029575 read(5,  <unfinished ...>
26470 15:56:27.029583 read(4, "\v", 1)  = 1
26470 15:56:27.029594 write(4, "\1\0\0\0", 4) = 4
26472 15:56:27.029605 <... read resumed> "\1\0\0\0", 4) = 4
26472 15:56:27.029613 write(5, "\v", 1) = 1
26472 15:56:27.029622 read(5,  <unfinished ...>
26470 15:56:27.029629 read(4, "\v", 1)  = 1
26470 15:56:27.029640 write(4, "\1\0\0\0", 4) = 4
26472 15:56:27.029650 <... read resumed> "\1\0\0\0", 4) = 4
26472 15:56:27.029658 write(5, "\r", 1) = 1
26472 15:56:27.029668 read(5,  <unfinished ...>
26470 15:56:27.029674 read(4, "\r", 1)  = 1
26470 15:56:27.029687 select(6, [5], NULL, NULL, {60, 0}) = 1 (in [5], left {60, 0})
26470 15:56:27.029704 accept(5, {sa_family=AF_INET, sin_port=htons(60630), sin_addr=inet_addr("127.0.0.1")}, [16]) = 6
26470 15:56:27.029727 write(4, "\1", 1) = 1
26472 15:56:27.029738 <... read resumed> "\1", 1) = 1
26472 15:56:27.029747 recvmsg(5,  <unfinished ...>
26470 15:56:27.029757 sendmsg(4, {msg_name(0)=NULL, msg_iov(1)=[{"\0", 1}], msg_controllen=16, {cmsg_len=16, cmsg_level=SOL_SOCKET, cmsg_type=SCM_RIGHTS, {6}}, msg_flags=0}, 0) = 1
26472 15:56:27.029774 <... recvmsg resumed> {msg_name(0)=NULL, msg_iov(1)=[{"\0", 1}], msg_controllen=16, {cmsg_len=16, cmsg_level=SOL_SOCKET, cmsg_type=SCM_RIGHTS, {6}}, msg_flags=0}, 0) = 1
26472 15:56:27.029788 setsockopt(6, SOL_SOCKET, SO_KEEPALIVE, [1], 4) = 0
26472 15:56:27.029800 setsockopt(6, SOL_IP, IP_TOS, [8], 4) = 0
26472 15:56:27.029812 setsockopt(6, SOL_SOCKET, SO_LINGER, {onoff=1, linger=32767}, 8) = 0
26472 15:56:27.029823 rt_sigaction(SIGALRM, {0x805cad0, ~[RTMIN RT_1], 0}, NULL, 8) = 0
26472 15:56:27.029837 alarm(300)        = 300
26472 15:56:27.029852 write(0, "150 Ok to send data.\r\n", 22) = 22
26472 15:56:27.029920 mmap2(NULL, 77824, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7d9e000
26472 15:56:27.029934 mprotect(0xb7db0000, 4096, PROT_NONE) = 0
26472 15:56:27.029947 mprotect(0xb7d9e000, 4096, PROT_NONE) = 0
26472 15:56:27.029957 read(6, "assasaaa\na\na\na\na\n", 65536) = 17
26472 15:56:27.029970 write(4, "assasaaa\na\na\na\na\n", 17) = 17
26472 15:56:27.029986 read(6, "", 65536) = 0
26472 15:56:27.029996 rt_sigaction(SIGALRM, {0x805cad0, ~[RTMIN RT_1], 0}, NULL, 8) = 0
26472 15:56:27.030010 alarm(300)        = 300
26472 15:56:27.030020 close(6)          = 0
26472 15:56:27.030029 alarm(0)          = 300
26472 15:56:27.030038 gettimeofday({1495655787, 30042}, NULL) = 0
26472 15:56:27.030056 getpid()          = 26472
26472 15:56:27.030068 gettimeofday({1495655787, 30072}, NULL) = 0
26472 15:56:27.030085 fcntl64(3, F_SETLKW64, {type=F_WRLCK, whence=SEEK_SET, start=0, len=0}, 0xbfdb5744) = 0
26472 15:56:27.030100 write(3, "Wed May 24 15:56:27 2017 [pid 26472] [msfadmin] OK UPLOAD: Client \"127.0.0.1\", \"/home/msfadmin/myfile34\", 17 bytes, 21.93Kbyte/sec\n", 131) = 131
26472 15:56:27.030121 fcntl64(3, F_SETLK64, {type=F_UNLCK, whence=SEEK_SET, start=0, len=0}, 0xbfdb574c) = 0
26472 15:56:27.030135 write(0, "226 Transfer complete.\r\n", 24) = 24
26472 15:56:27.030177 write(5, "\n", 1) = 1
26472 15:56:27.030189 read(5,  <unfinished ...>
26470 15:56:27.030196 close(6)          = 0
26470 15:56:27.030214 read(4, "\n", 1)  = 1
26470 15:56:27.030226 close(5)          = 0
26470 15:56:27.030237 write(4, "\1", 1) = 1
26472 15:56:27.030248 <... read resumed> "\1", 1) = 1
26472 15:56:27.030255 close(4)          = 0
26472 15:56:27.030266 rt_sigaction(SIGALRM, {0x805cad0, ~[RTMIN RT_1], 0}, NULL, 8) = 0
26472 15:56:27.030279 alarm(300)        = 0
26472 15:56:27.030290 recv(0,  <unfinished ...>
