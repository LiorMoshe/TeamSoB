16709 16:06:14.530356 close(7)          = 0
16709 16:06:14.530629 open("/etc/selinux/config", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
16709 16:06:14.530716 statfs64("/selinux", 84, 0xbffd9a6c) = -1 ENOENT (No such file or directory)
16709 16:06:14.530768 open("/proc/mounts", O_RDONLY|O_LARGEFILE) = 7
16709 16:06:14.530995 fstat64(7, {st_mode=S_IFREG|0444, st_size=0, ...}) = 0
16709 16:06:14.531061 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f5d000
16709 16:06:14.531110 read(7, "rootfs / rootfs rw 0 0\nnone /sys sysfs rw,nosuid,nodev,noexec 0 0\nnone /proc proc rw,nosuid,nodev,noexec 0 0\nudev /dev tmpfs rw,relatime 0 0\nfusectl /sys/fs/fuse/connections fusectl rw,relatime 0 0\n/dev/mapper/metasploitable-root / ext3 rw,relatime,errors=remount-ro,data=ordered 0 0\n/dev/mapper/metasploitable-root /dev/.static/dev ext3 rw,relatime,errors=remount-ro,data=ordered 0 0\ntmpfs /var/run tmpfs rw,nosuid,nodev,noexec 0 0\ntmpfs /var/lock tmpfs rw,nosuid,nodev,noexec 0 0\ntmpfs /dev/shm tmpfs rw,relatime 0 0\ndevpts /dev/pts devpts rw,relatime 0 0\ntmpfs /var/run tmpfs rw,nosuid,nodev,noexec 0 0\ntmpfs /var/lock tmpfs rw,nosuid,nodev,noexec 0 0\n/dev/sda1 /boot ext3 rw,relatime,data=ordered 0 0\nsecurityfs /sys/kernel/security securityfs rw,relatime 0 0\nrpc_pipefs /var/lib/nfs/rpc_pipefs rpc_pipefs rw,relatime 0 0\nnfsd /proc/fs/nfsd nfsd rw,relatime 0 0\n", 1024) = 866
16709 16:06:14.531387 read(7, "", 1024) = 0
16709 16:06:14.531435 close(7)          = 0
16709 16:06:14.531479 munmap(0xb7f5d000, 4096) = 0
16709 16:06:14.531539 munmap(0xb7d8c000, 29913) = 0
16709 16:06:14.531595 read(6, "", 4096) = 0
16709 16:06:14.531643 close(6)          = 0
16709 16:06:14.531686 munmap(0xb7f5e000, 4096) = 0
16709 16:06:14.531733 stat64("/etc/pam.d", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
16709 16:06:14.531805 open("/etc/pam.d/common-account", O_RDONLY|O_LARGEFILE) = 6
16709 16:06:14.531858 fstat64(6, {st_mode=S_IFREG|0644, st_size=392, ...}) = 0
16709 16:06:14.531952 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f5e000
16709 16:06:14.532002 read(6, "#\n# /etc/pam.d/common-account - authorization settings common to all services\n#\n# This file is included from other service-specific PAM config files,\n# and should contain a list of the authorization modules that define\n# the central access policy for use on the system.  The default is to\n# only deny service to users whose accounts are expired in /etc/shadow.\n#\naccount\trequired\tpam_unix.so\n", 4096) = 392
16709 16:06:14.532129 read(6, "", 4096) = 0
16709 16:06:14.532174 close(6)          = 0
16709 16:06:14.532217 munmap(0xb7f5e000, 4096) = 0
16709 16:06:14.532265 stat64("/etc/pam.d", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
16709 16:06:14.532333 open("/etc/pam.d/common-session", O_RDONLY|O_LARGEFILE) = 6
16709 16:06:14.532385 fstat64(6, {st_mode=S_IFREG|0644, st_size=372, ...}) = 0
16709 16:06:14.532445 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f5e000
16709 16:06:14.532490 read(6, "#\n# /etc/pam.d/common-session - session-related modules common to all services\n#\n# This file is included from other service-specific PAM config files,\n# and should contain a list of modules that define tasks to be performed\n# at the start and end of sessions of *any* kind (both interactive and\n# non-interactive).  The default is pam_unix.\n#\nsession\trequired\tpam_unix.so\n", 4096) = 372
16709 16:06:14.532612 read(6, "", 4096) = 0
16709 16:06:14.532655 close(6)          = 0
16709 16:06:14.532698 munmap(0xb7f5e000, 4096) = 0
16709 16:06:14.532742 read(5, "", 4096) = 0
16709 16:06:14.532785 close(5)          = 0
16709 16:06:14.532827 munmap(0xb7f64000, 4096) = 0
16709 16:06:14.532903 open("/etc/pam.d/other", O_RDONLY|O_LARGEFILE) = 5
16709 16:06:14.532960 fstat64(5, {st_mode=S_IFREG|0644, st_size=520, ...}) = 0
16709 16:06:14.533021 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f64000
16709 16:06:14.533066 read(5, "#\n# /etc/pam.d/other - specify the PAM fallback behaviour\n#\n# Note that this file is used for any unspecified service; for example\n#if /etc/pam.d/cron  specifies no session modules but cron calls\n#pam_open_session, the session module out of /etc/pam.d/other is\n#used.  If you really want nothing to happen then use pam_permit.so or\n#pam_deny.so as appropriate.\n\n# We fall back to the system default in /etc/pam.d/common-*\n# \n\n@include common-auth\n@include common-account\n@include common-password\n@include common-session\n", 4096) = 520
16709 16:06:14.533204 stat64("/etc/pam.d", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
16709 16:06:14.533270 open("/etc/pam.d/common-auth", O_RDONLY|O_LARGEFILE) = 6
16709 16:06:14.533322 fstat64(6, {st_mode=S_IFREG|0644, st_size=476, ...}) = 0
16709 16:06:14.533381 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f5e000
16709 16:06:14.533426 read(6, "#\n# /etc/pam.d/common-auth - authentication settings common to all services\n#\n# This file is included from other service-specific PAM config files,\n# and should contain a list of the authentication modules that define\n# the central authentication scheme for use on the system\n# (e.g., /etc/shadow, LDAP, Kerberos, etc.).  The default is to use the\n# traditional Unix authentication mechanisms.\n#\nauth\trequisite\tpam_unix.so nullok_secure\n# auth\toptional\tpam_smbpass.so migrate\n", 4096) = 476
16709 16:06:14.533578 read(6, "", 4096) = 0
16709 16:06:14.533624 close(6)          = 0
16709 16:06:14.533667 munmap(0xb7f5e000, 4096) = 0
16709 16:06:14.533715 stat64("/etc/pam.d", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
16709 16:06:14.533787 open("/etc/pam.d/common-account", O_RDONLY|O_LARGEFILE) = 6
16709 16:06:14.533870 fstat64(6, {st_mode=S_IFREG|0644, st_size=392, ...}) = 0
16709 16:06:14.533932 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f5e000
16709 16:06:14.533978 read(6, "#\n# /etc/pam.d/common-account - authorization settings common to all services\n#\n# This file is included from other service-specific PAM config files,\n# and should contain a list of the authorization modules that define\n# the central access policy for use on the system.  The default is to\n# only deny service to users whose accounts are expired in /etc/shadow.\n#\naccount\trequired\tpam_unix.so\n", 4096) = 392
16709 16:06:14.534103 read(6, "", 4096) = 0
16709 16:06:14.534147 close(6)          = 0
16709 16:06:14.534190 munmap(0xb7f5e000, 4096) = 0
16709 16:06:14.534238 stat64("/etc/pam.d", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
16709 16:06:14.534305 open("/etc/pam.d/common-password", O_RDONLY|O_LARGEFILE) = 6
16709 16:06:14.534551 fstat64(6, {st_mode=S_IFREG|0644, st_size=1563, ...}) = 0
16709 16:06:14.534614 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f5e000
16709 16:06:14.534660 read(6, "#\n# /etc/pam.d/common-password - password-related modules common to all services\n#\n# This file is included from other service-specific PAM config files,\n# and should contain a list of modules that define the services to be\n# used to change user passwords.  The default is pam_unix.\n\n# Explanation of pam_unix options:\n#\n# The \"nullok\" option allows users to change an empty password, else\n# empty passwords are treated as locked accounts.\n#\n# The \"md5\" option enables MD5 passwords.  Without this option, the\n# default is Unix crypt.\n#\n# The \"obscure\" option replaces the old `OBSCURE_CHECKS_ENAB\' option in\n# login.defs.\n#\n# You can also use the \"min\" option to enforce the length of the new\n# password.\n#\n# See the pam_unix manpage for other options.\n\npassword   requisite   pam_unix.so nullok obscure md5\n\n# Alternate strength checking for password. Note that this\n# requires the libpam-cracklib package to be installed.\n# You will need to comment out the password line above and\n# uncomment the next two in order to use this.\n# (Replaces the `OBSCURE_CHECKS_ENAB\', `CRACKLIB_DICTPATH\')\n#\n# password required\t  pam_cracklib.so retry=3 minlen=6 difok=3\n# password required\t  pam_unix.so use_authtok nullok md5\n\n# minimally-intrusive inclusion of smbpass in the stack for\n# synchronization.  If the module is absent or the passwords don\'t\n# match, this module will be ignored without prompting; and if the \n# passwords do match, the NTLM hash for the user will be updated\n# automatically.\n# password   optional   pam_smbpass.so nullok use_authtok use_first_pass\n", 4096) = 1563
16709 16:06:14.535023 read(6, "", 4096) = 0
16709 16:06:14.535071 close(6)          = 0
16709 16:06:14.535113 munmap(0xb7f5e000, 4096) = 0
16709 16:06:14.535163 stat64("/etc/pam.d", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
16709 16:06:14.535232 open("/etc/pam.d/common-session", O_RDONLY|O_LARGEFILE) = 6
16709 16:06:14.535284 fstat64(6, {st_mode=S_IFREG|0644, st_size=372, ...}) = 0
16709 16:06:14.535345 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f5e000
16709 16:06:14.535391 read(6, "#\n# /etc/pam.d/common-session - session-related modules common to all services\n#\n# This file is included from other service-specific PAM config files,\n# and should contain a list of modules that define tasks to be performed\n# at the start and end of sessions of *any* kind (both interactive and\n# non-interactive).  The default is pam_unix.\n#\nsession\trequired\tpam_unix.so\n", 4096) = 372
16709 16:06:14.535523 read(6, "", 4096) = 0
16709 16:06:14.535568 close(6)          = 0
16709 16:06:14.535610 munmap(0xb7f5e000, 4096) = 0
16709 16:06:14.535656 read(5, "", 4096) = 0
16709 16:06:14.535699 close(5)          = 0
16709 16:06:14.535741 munmap(0xb7f64000, 4096) = 0
16709 16:06:14.535798 time(NULL)        = 1495656374
16709 16:06:14.535848 lstat64("/etc/ftpusers", {st_mode=S_IFREG|0644, st_size=132, ...}) = 0
16709 16:06:14.535915 open("/etc/ftpusers", O_RDONLY|O_LARGEFILE) = 5
16709 16:06:14.535963 fstat64(5, {st_mode=S_IFREG|0644, st_size=132, ...}) = 0
16709 16:06:14.536023 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f64000
16709 16:06:14.536068 read(5, "# /etc/ftpusers: list of users disallowed FTP access. See ftpusers(5).\n\nroot\ndaemon\nbin\nsys\nsync\ngames\nman\nlp\nmail\nnews\nuucp\nnobody\n", 4096) = 132
16709 16:06:14.536142 read(5, "", 4096) = 0
16709 16:06:14.536220 close(5)          = 0
16709 16:06:14.536262 munmap(0xb7f64000, 4096) = 0
16709 16:06:14.536324 getuid32()        = 0
16709 16:06:14.536388 open("/etc/passwd", O_RDONLY|0x80000 /* O_??? */) = 5
16709 16:06:14.536435 _llseek(5, 0, [0], SEEK_CUR) = 0
16709 16:06:14.536435 fstat64(5, {st_mode=S_IFREG|0644, st_size=1624, ...}) = 0
16709 16:06:14.536435 mmap2(NULL, 1624, PROT_READ, MAP_SHARED, 5, 0) = 0xb7f64000
16709 16:06:14.536435 _llseek(5, 1624, [1624], SEEK_SET) = 0
16709 16:06:14.536435 munmap(0xb7f64000, 1624) = 0
16709 16:06:14.536435 close(5)          = 0
16709 16:06:14.536435 open("/etc/shadow", O_RDONLY|0x80000 /* O_??? */) = 5
16709 16:06:14.536435 _llseek(5, 0, [0], SEEK_CUR) = 0
16709 16:06:14.536435 fstat64(5, {st_mode=S_IFREG|0640, st_size=1233, ...}) = 0
16709 16:06:14.536435 mmap2(NULL, 1233, PROT_READ, MAP_SHARED, 5, 0) = 0xb7f64000
16709 16:06:14.536435 _llseek(5, 1233, [1233], SEEK_SET) = 0
16709 16:06:14.536435 munmap(0xb7f64000, 1233) = 0
16709 16:06:14.536435 close(5)          = 0
16709 16:06:14.536435 open("/etc/passwd", O_RDONLY|0x80000 /* O_??? */) = 5
16709 16:06:14.536435 _llseek(5, 0, [0], SEEK_CUR) = 0
16709 16:06:14.536435 fstat64(5, {st_mode=S_IFREG|0644, st_size=1624, ...}) = 0
16709 16:06:14.536435 mmap2(NULL, 1624, PROT_READ, MAP_SHARED, 5, 0) = 0xb7f64000
16709 16:06:14.536435 _llseek(5, 1624, [1624], SEEK_SET) = 0
16709 16:06:14.536435 munmap(0xb7f64000, 1624) = 0
16709 16:06:14.536435 close(5)          = 0
16709 16:06:14.536435 open("/etc/shadow", O_RDONLY|0x80000 /* O_??? */) = 5
16709 16:06:14.536435 _llseek(5, 0, [0], SEEK_CUR) = 0
16709 16:06:14.536435 fstat64(5, {st_mode=S_IFREG|0640, st_size=1233, ...}) = 0
16709 16:06:14.536435 mmap2(NULL, 1233, PROT_READ, MAP_SHARED, 5, 0) = 0xb7f64000
16709 16:06:14.536435 _llseek(5, 1233, [1233], SEEK_SET) = 0
16709 16:06:14.536435 munmap(0xb7f64000, 1233) = 0
16709 16:06:14.536435 close(5)          = 0
16709 16:06:14.538874 getuid32()        = 0
16709 16:06:14.538926 open("/etc/passwd", O_RDONLY|0x80000 /* O_??? */) = 5
16709 16:06:14.538959 _llseek(5, 0, [0], SEEK_CUR) = 0
16709 16:06:14.538985 fstat64(5, {st_mode=S_IFREG|0644, st_size=1624, ...}) = 0
16709 16:06:14.539021 mmap2(NULL, 1624, PROT_READ, MAP_SHARED, 5, 0) = 0xb7f64000
16709 16:06:14.539049 _llseek(5, 1624, [1624], SEEK_SET) = 0
16709 16:06:14.539085 munmap(0xb7f64000, 1624) = 0
16709 16:06:14.539111 close(5)          = 0
16709 16:06:14.539143 open("/etc/shadow", O_RDONLY|0x80000 /* O_??? */) = 5
16709 16:06:14.539175 _llseek(5, 0, [0], SEEK_CUR) = 0
16709 16:06:14.539201 fstat64(5, {st_mode=S_IFREG|0640, st_size=1233, ...}) = 0
16709 16:06:14.539237 mmap2(NULL, 1233, PROT_READ, MAP_SHARED, 5, 0) = 0xb7f64000
16709 16:06:14.539280 _llseek(5, 1233, [1233], SEEK_SET) = 0
16709 16:06:14.539322 munmap(0xb7f64000, 1233) = 0
16709 16:06:14.539348 close(5)          = 0
16709 16:06:14.539379 time(NULL)        = 1495656374
16709 16:06:14.539413 munmap(0xb7f61000, 12164) = 0
16709 16:06:14.539445 munmap(0xb7f5f000, 7136) = 0
16709 16:06:14.539478 munmap(0xb7d94000, 95428) = 0
16709 16:06:14.539506 munmap(0xb7d5a000, 201052) = 0
16709 16:06:14.539534 munmap(0xb7d41000, 101180) = 0
16709 16:06:14.539579 gettimeofday({1495656374, 539596}, NULL) = 0
16709 16:06:14.539619 stat64("/usr/share/zoneinfo/UTC+04:00", 0xbffdb944) = -1 ENOENT (No such file or directory)
16709 16:06:14.539654 open("/usr/share/zoneinfo/UTC+04:00", O_RDONLY) = -1 ENOENT (No such file or directory)
16709 16:06:14.539707 fcntl64(3, F_SETLKW64, {type=F_WRLCK, whence=SEEK_SET, start=0, len=0}, 0xbffdba94) = 0
16709 16:06:14.539745 write(3, "Wed May 24 16:06:14 2017 [pid 16709] [msfadmin] OK LOGIN: Client \"127.0.0.1\"\n", 77) = 77
16709 16:06:14.539782 fcntl64(3, F_SETLK64, {type=F_UNLCK, whence=SEEK_SET, start=0, len=0}, 0xbffdba9c) = 0
16709 16:06:14.539814 rt_sigaction(SIGCHLD, {0x805cad0, ~[RTMIN RT_1], 0}, NULL, 8) = 0
16709 16:06:14.539846 write(4, "\1", 1 <unfinished ...>
16710 16:06:14.539873 <... read resumed> "\1", 1) = 1
16709 16:06:14.539892 <... write resumed> ) = 1
16710 16:06:14.539915 exit_group(0)     = ?
16709 16:06:14.539979 --- SIGCHLD (Child exited) @ 0 (0) ---
16709 16:06:14.540001 sigreturn()       = ? (mask now [])
16709 16:06:14.540041 wait4(-1, [{WIFEXITED(s) && WEXITSTATUS(s) == 0}], 0, NULL) = 16710
16709 16:06:14.540072 close(4)          = 0
16709 16:06:14.540101 socketpair(PF_FILE, SOCK_STREAM, 0, [4, 5]) = 0
16709 16:06:14.540134 rt_sigaction(SIGCHLD, {0x805cad0, ~[RTMIN RT_1], 0}, NULL, 8) = 0
16709 16:06:14.540166 rt_sigaction(SIGALRM, {0x805cb10, ~[RTMIN RT_1], 0}, NULL, 8) = 0
16709 16:06:14.540197 clone(child_stack=0, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0xb7dca6f8) = 16711
16711 16:06:14.540321 prctl(0x1, 0x9, 0, 0, 0) = 0
16711 16:06:14.540355 close(4)          = 0
16711 16:06:14.540408 open("/etc/passwd", O_RDONLY|0x80000 /* O_??? */) = 4
16711 16:06:14.540446 _llseek(4, 0, [0], SEEK_CUR) = 0
16711 16:06:14.540481 fstat64(4, {st_mode=S_IFREG|0644, st_size=1624, ...}) = 0
16711 16:06:14.540521 mmap2(NULL, 1624, PROT_READ, MAP_SHARED, 4, 0) = 0xb7f64000
16711 16:06:14.540550 _llseek(4, 1624, [1624], SEEK_SET) = 0
16711 16:06:14.540596 munmap(0xb7f64000, 1624) = 0
16711 16:06:14.540625 close(4)          = 0
16711 16:06:14.540657 getuid32()        = 0
16711 16:06:14.540683 open("/etc/passwd", O_RDONLY|0x80000 /* O_??? */) = 4
16711 16:06:14.540714 _llseek(4, 0, [0], SEEK_CUR) = 0
16711 16:06:14.540740 fstat64(4, {st_mode=S_IFREG|0644, st_size=1624, ...}) = 0
16711 16:06:14.540776 mmap2(NULL, 1624, PROT_READ, MAP_SHARED, 4, 0) = 0xb7f64000
16711 16:06:14.540803 _llseek(4, 1624, [1624], SEEK_SET) = 0
16711 16:06:14.540839 munmap(0xb7f64000, 1624) = 0
16711 16:06:14.540864 close(4)          = 0
16711 16:06:14.540916 open("/proc/sys/kernel/ngroups_max", O_RDONLY) = 4
16711 16:06:14.540960 read(4, "65536\n", 31) = 6
16711 16:06:14.540989 close(4)          = 0
16711 16:06:14.541023 socket(PF_FILE, SOCK_STREAM, 0) = 4
16711 16:06:14.541051 fcntl64(4, F_SETFL, O_RDWR|O_NONBLOCK) = 0
16711 16:06:14.541079 connect(4, {sa_family=AF_FILE, path="/var/run/nscd/socket"}, 110) = -1 ENOENT (No such file or directory)
16711 16:06:14.541124 close(4)          = 0
16711 16:06:14.541153 socket(PF_FILE, SOCK_STREAM, 0) = 4
16711 16:06:14.541180 fcntl64(4, F_SETFL, O_RDWR|O_NONBLOCK) = 0
16711 16:06:14.541225 connect(4, {sa_family=AF_FILE, path="/var/run/nscd/socket"}, 110) = -1 ENOENT (No such file or directory)
16711 16:06:14.541267 close(4)          = 0
16711 16:06:14.541316 open("/etc/group", O_RDONLY|0x80000 /* O_??? */) = 4
16711 16:06:14.541350 _llseek(4, 0, [0], SEEK_CUR) = 0
16711 16:06:14.541377 fstat64(4, {st_mode=S_IFREG|0644, st_size=886, ...}) = 0
16711 16:06:14.541413 mmap2(NULL, 886, PROT_READ, MAP_SHARED, 4, 0) = 0xb7f64000
16711 16:06:14.541441 _llseek(4, 886, [886], SEEK_SET) = 0
16711 16:06:14.541495 fstat64(4, {st_mode=S_IFREG|0644, st_size=886, ...}) = 0
16711 16:06:14.541541 munmap(0xb7f64000, 886) = 0
16711 16:06:14.541579 close(4)          = 0
16711 16:06:14.541616 setgroups32(13, [1000, 4, 20, 24, 25, 29, 30, 44, 46, 107, 111, 112, 119]) = 0
16711 16:06:14.541669 geteuid32()       = 0
16711 16:06:14.541708 getegid32()       = 0
16711 16:06:14.541754 setregid32(-1, 1000) = 0
16711 16:06:14.541791 setreuid32(-1, 1000) = 0
16711 16:06:14.541858 chdir("/home/msfadmin") = 0
16711 16:06:14.541900 setreuid32(-1, 0) = 0
16711 16:06:14.541936 setregid32(-1, 0) = 0
16711 16:06:14.541975 setgid32(1000)    = 0
16711 16:06:14.542012 setuid32(1000)    = 0
16711 16:06:14.542049 setrlimit(RLIMIT_NPROC, {rlim_cur=0, rlim_max=0}) = 0
16711 16:06:14.542093 mmap2(NULL, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f62000
16711 16:06:14.542133 mprotect(0xb7f64000, 4096, PROT_NONE) = 0
16711 16:06:14.542345 mprotect(0xb7f62000, 4096, PROT_NONE) = 0
16711 16:06:14.542392 getcwd("/home/msfadmin", 4096) = 15
16711 16:06:14.542428 umask(022)        = 077
16711 16:06:14.542458 getcwd("/home/msfadmin", 4096) = 15
16711 16:06:14.542500 open(".message", O_RDONLY|O_NONBLOCK|O_LARGEFILE) = -1 ENOENT (No such file or directory)
16711 16:06:14.542552 write(0, "230 Login successful.\r\n", 23) = 23
16711 16:06:14.542723 rt_sigaction(SIGALRM, {0x805cad0, ~[RTMIN RT_1], 0}, NULL, 8) = 0
16711 16:06:14.542763 alarm(300)        = 0
16711 16:06:14.542811 mmap2(NULL, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f5f000
16711 16:06:14.542841 mprotect(0xb7f61000, 4096, PROT_NONE) = 0
16711 16:06:14.542869 mprotect(0xb7f5f000, 4096, PROT_NONE) = 0
16711 16:06:14.542901 recv(0, "QUIT\r\n", 4096, MSG_PEEK) = 6
16711 16:06:14.542932 read(0, "QUIT\r\n", 6) = 6
16711 16:06:14.542978 shutdown(0, 0 /* receive */) = 0
16711 16:06:14.543015 fcntl64(0, F_GETFL) = 0x2 (flags O_RDWR)
16711 16:06:14.543048 fcntl64(0, F_SETFL, O_RDWR|O_NONBLOCK) = 0
16711 16:06:14.543080 write(0, "221 Goodbye.\r\n", 14) = 14
16711 16:06:14.543217 fcntl64(0, F_GETFL) = 0x802 (flags O_RDWR|O_NONBLOCK)
16711 16:06:14.543257 fcntl64(0, F_SETFL, O_RDWR) = 0
16711 16:06:14.543290 shutdown(0, 2 /* send and receive */) = 0
16711 16:06:14.543365 exit_group(0)     = ?
16709 16:06:14.543441 --- SIGCHLD (Child exited) @ 0 (0) ---
16709 16:06:14.543482 alarm(1)          = 0
16709 16:06:14.543543 sigreturn()       = ? (mask now [])
16709 16:06:14.543595 close(5)          = 0
16709 16:06:14.543635 getuid32()        = 0
16709 16:06:14.543678 open("/etc/passwd", O_RDONLY|0x80000 /* O_??? */) = 5
16709 16:06:14.543720 _llseek(5, 0, [0], SEEK_CUR) = 0
16709 16:06:14.543758 fstat64(5, {st_mode=S_IFREG|0644, st_size=1624, ...}) = 0
16709 16:06:14.543805 mmap2(NULL, 1624, PROT_READ, MAP_SHARED, 5, 0) = 0xb7f64000
16709 16:06:14.543841 _llseek(5, 1624, [1624], SEEK_SET) = 0
16709 16:06:14.543889 munmap(0xb7f64000, 1624) = 0
16709 16:06:14.543924 close(5)          = 0
16709 16:06:14.543962 setgroups32(0, []) = 0
16709 16:06:14.544002 chdir("/usr/share/empty") = 0
16709 16:06:14.544033 chroot(".")       = 0
16709 16:06:14.544060 capset(NULL, NULL) = -1 EFAULT (Bad address)
16709 16:06:14.544090 prctl(0x8, 0, 0xbffdba78, 0x80549a6, 0xbffdba60) = 0
16709 16:06:14.544116 prctl(0x8, 0x1, 0xbffdba78, 0x8054a49, 0xbffdba60) = 0
16709 16:06:14.544142 setgid32(65534)   = 0
16709 16:06:14.544168 setuid32(65534)   = 0
16709 16:06:14.544219 capset(0x19980330, 0, {CAP_NET_BIND_SERVICE, CAP_NET_BIND_SERVICE, 0}) = 0
16709 16:06:14.544257 read(4, "", 1)    = 0
16709 16:06:14.544288 alarm(0)          = 1
16709 16:06:14.544338 wait4(-1, [{WIFEXITED(s) && WEXITSTATUS(s) == 0}], 0, NULL) = 16711
16709 16:06:14.544372 exit_group(0)     = ?
4439  16:06:14.544454 <... select resumed> ) = ? ERESTARTNOHAND (To be restarted)
4439  16:06:14.544478 --- SIGCHLD (Child exited) @ 0 (0) ---
4439  16:06:14.544501 write(4, "\21", 1) = 1
4439  16:06:14.544534 sigreturn()       = ? (mask now [])
4439  16:06:14.544596 select(13, [3 5 6 8 9 10 11 12], NULL, NULL, NULL) = 1 (in [3])
4439  16:06:14.544634 ioctl(3, FIONREAD, [1]) = 0
4439  16:06:14.544665 read(3, "\21", 1) = 1
4439  16:06:14.544696 waitpid(-1, [{WIFEXITED(s) && WEXITSTATUS(s) == 0}], WNOHANG) = 16709
4439  16:06:14.544732 close(-1)         = -1 EBADF (Bad file descriptor)
4439  16:06:14.544763 waitpid(-1, 0xbff6282c, WNOHANG) = 0
4439  16:06:14.544791 select(13, [3 5 6 8 9 10 11 12], NULL, NULL, NULL) = 1 (in [5])
4439  16:06:15.089437 accept(5, {sa_family=AF_INET, sin_port=htons(43687), sin_addr=inet_addr("127.0.0.1")}, [16]) = 13
4439  16:06:15.089703 time(NULL)        = 1495656375
4439  16:06:15.089851 clone(child_stack=0, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0xb7d926f8) = 16714
16714 16:06:15.090057 rt_sigaction(SIGPIPE, {SIG_DFL}, {SIG_IGN}, 8) = 0
16714 16:06:15.090057 rt_sigaction(SIGTSTP, {SIG_DFL}, {SIG_IGN}, 8) = 0
16714 16:06:15.090911 rt_sigaction(SIGTTIN, {SIG_DFL}, {SIG_IGN}, 8) = 0
16714 16:06:15.090998 rt_sigaction(SIGTTOU, {SIG_DFL}, {SIG_IGN}, 8) = 0
16714 16:06:15.091091 rt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0
16714 16:06:15.091176 close(3)          = 0
16714 16:06:15.091245 close(4)          = 0
16714 16:06:15.091314 open("/dev/null", O_RDONLY) = 3
16714 16:06:15.091407 dup2(3, 0)        = 0
16714 16:06:15.091475 dup2(3, 1)        = 1
16714 16:06:15.091552 dup2(3, 2)        = 2
16714 16:06:15.091619 close(3)          = 0
16714 16:06:15.091698 setgid32(0)       = 0
16714 16:06:15.091780 setgroups32(0, []) = 0
16714 16:06:15.091899 setuid32(0)       = 0
16714 16:06:15.091980 getpriority(PRIO_PROCESS, 0) = 20
16714 16:06:15.092122 setpriority(PRIO_PROCESS, 0, 10) = 0
16714 16:06:15.092192 getpriority(PRIO_PROCESS, 0) = 10
16714 16:06:15.092380 getpeername(13, {sa_family=AF_INET, sin_port=htons(43687), sin_addr=inet_addr("127.0.0.1")}, [16]) = 0
16714 16:06:15.092509 getsockname(13, {sa_family=AF_INET, sin_port=htons(21), sin_addr=inet_addr("127.0.0.1")}, [16]) = 0
16714 16:06:15.092651 open("/etc/hosts.allow", O_RDONLY) = 3
16714 16:06:15.092959 fstat64(3, {st_mode=S_IFREG|0644, st_size=588, ...}) = 0
16714 16:06:15.093179 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f61000
16714 16:06:15.093312 read(3, "# /etc/hosts.allow: list of hosts that are allowed to access the system.\n#                   See the manual pages hosts_access(5) and hosts_options(5).\n#\n# Example:    ALL: LOCAL @some_netgroup\n#             ALL: .foobar.edu EXCEPT terminalserver.foobar.edu\n#\n# If you\'re going to protect the portmapper use the name \"portmap\" for the\n# daemon name. Remember that you can only use the keyword \"ALL\" and IP\n# addresses (NOT host or domain names) for the portmapper, as well as for\n# rpc.mountd (the NFS mount daemon). See portmap(8) and rpc.mountd(8)\n# for further information.\n#\n\nALL:ALL\n", 4096) = 588
16714 16:06:15.093899 close(3)          = 0
16714 16:06:15.094037 munmap(0xb7f61000, 4096) = 0
16714 16:06:15.094256 fcntl64(13, F_SETFD, 0) = 0
16714 16:06:15.094401 close(7)          = 0
16714 16:06:15.094518 dup2(13, 0)       = 0
16714 16:06:15.094646 dup2(13, 1)       = 1
16714 16:06:15.094873 dup2(13, 2)       = 2
16714 16:06:15.095103 setrlimit(RLIMIT_NOFILE, {rlim_cur=1024, rlim_max=1024}) = 0
16714 16:06:15.095186 close(13)         = 0
16714 16:06:15.095259 setsid()          = 16714
16714 16:06:15.095334 execve("/usr/sbin/vsftpd", ["vsftpd"], [/* 15 vars */]) = 0
16714 16:06:15.095740 brk(0)            = 0x8064000
16714 16:06:15.095870 access("/etc/ld.so.nohwcap", F_OK) = -1 ENOENT (No such file or directory)
16714 16:06:15.095973 mmap2(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f1a000
16714 16:06:15.096063 access("/etc/ld.so.preload", R_OK) = -1 ENOENT (No such file or directory)
16714 16:06:15.096158 open("/etc/ld.so.cache", O_RDONLY) = 3
16714 16:06:15.096241 fstat64(3, {st_mode=S_IFREG|0644, st_size=29913, ...}) = 0
16714 16:06:15.096343 mmap2(NULL, 29913, PROT_READ, MAP_PRIVATE, 3, 0) = 0xb7f12000
16714 16:06:15.096417 close(3)          = 0
16714 16:06:15.096452 access("/etc/ld.so.nohwcap", F_OK) = -1 ENOENT (No such file or directory)
16714 16:06:15.096452 open("/lib/libpam.so.0", O_RDONLY) = 3
16714 16:06:15.096452 read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0\320\30\0\0004\0\0\0\f\220\0\0\0\0\0\0004\0 \0\4\0(\0\33\0\32\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0t\214\0\0t\214\0\0\5\0\0\0\0\20\0\0\1\0\0\0t\214\0\0t\234\0\0t\234\0\0\250\2\0\0\254\2\0\0\6\0\0\0\0\20\0\0\2\0\0\0D\215\0\0D\235\0\0D\235\0\0\350\0\0\0\350\0\0\0\6\0\0\0\4\0\0\0Q\345td\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\4\0\0\0\254\0\0\0X\0\0\0D\0\0\0\0\0\0\0G\0\0\0\7\0\0\0*\0\0\0\v\0\0\0\36\0\0\0\0\0\0\0K\0\0\0L\0\0\0\34\0\0\0\0\0\0\0\0\0\0\0V\0\0\0\0\0\0\0\0\0\0\0\21\0\0\0\33\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0>\0\0\0O\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\2\0\0\0\0\0\0\0\0\0\0\0P\0\0\0R\0\0\0\0\0\0\0A\0\0\0?\0\0\0\0\0\0\0\0\0\0\0;\0\0\0\r\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0006\0\0\0(\0\0\0\0\0\0\0.\0\0\0\16\0\0\0,\0\0\0\0\0\0\0!\0\0\0\30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\31\0\0\0\0\0\0\0<\0\0\0W\0\0\0+\0\0\0M\0\0\0\0\0\0\0\0\0\0\0&\0\0\0\0\0\0\0N\0\0\0\0\0\0\0\0\0\0\0\27\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0001\0\0\0%\0\0\0\35\0\0\0\0\0\0\0/\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0B\0\0\0", 512) = 512
16714 16:06:15.096452 fstat64(3, {st_mode=S_IFREG|0644, st_size=37956, ...}) = 0
16714 16:06:15.096452 mmap2(NULL, 40736, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0xb7f08000
16714 16:06:15.096452 mmap2(0xb7f11000, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x8) = 0xb7f11000
16714 16:06:15.096452 close(3)          = 0
16714 16:06:15.096452 access("/etc/ld.so.nohwcap", F_OK) = -1 ENOENT (No such file or directory)
16714 16:06:15.097936 open("/lib/tls/i686/cmov/libdl.so.2", O_RDONLY) = 3
16714 16:06:15.098154 read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0p\n\0\0004\0\0\0L!\0\0\0\0\0\0004\0 \0\10\0(\0\35\0\34\0\6\0\0\0004\0\0\0004\0\0\0004\0\0\0\0\1\0\0\0\1\0\0\5\0\0\0\4\0\0\0\3\0\0\0003\33\0\0003\33\0\0003\33\0\0\23\0\0\0\23\0\0\0\4\0\0\0\1\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\374\34\0\0\374\34\0\0\5\0\0\0\0\20\0\0\1\0\0\0\264\36\0\0\264.\0\0\264.\0\0\230\1\0\0\310\1\0\0\6\0\0\0\0\20\0\0\2\0\0\0\320\36\0\0\320.\0\0\320.\0\0\370\0\0\0\370\0\0\0\6\0\0\0\4\0\0\0\4\0\0\0004\1\0\0004\1\0\0004\1\0\0 \0\0\0 \0\0\0\4\0\0\0\4\0\0\0Q\345td\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\4\0\0\0R\345td\264\36\0\0\264.\0\0\264.\0\0@\1\0\0@\1\0\0\4\0\0\0\1\0\0\0\4\0\0\0\20\0\0\0\1\0\0\0GNU\0\0\0\0\0\2\0\0\0\6\0\0\0\10\0\0\0\26\0\0\0\31\0\0\0\4\0\0\0\7\0\0\0\230\0\21\0\0B\0\0\202\0`\10\223(\10\336\31\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\32\0\0\0\0\0\0\0\33\0\0\0\34\0\0\0\0\0\0\0\36\0\0\0\0\0\0\0\0\0\0\0\37\0\0\0!\0\0\0\"\0\0\0\0\0\0\0\0\0\0\0#\0\0\0%\0\0\0&\0\0\0\0\0\0\0(\0\0\0\221!\374\370\225\263_\31\5\350\7\371\6\2\4\371\7\2\4\371\301S\200\30\256\304M\17a\242\222\6\325=l\366\327=l\366\370\31sB\353\26\251\30\373\31sB", 512) = 512
16714 16:06:15.098670 fstat64(3, {st_mode=S_IFREG|0644, st_size=9684, ...}) = 0
16714 16:06:15.098782 mmap2(NULL, 12412, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0xb7f04000
16714 16:06:15.098862 mmap2(0xb7f06000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1) = 0xb7f06000
16714 16:06:15.098966 close(3)          = 0
16714 16:06:15.099049 access("/etc/ld.so.nohwcap", F_OK) = -1 ENOENT (No such file or directory)
16714 16:06:15.099137 open("/lib/tls/i686/cmov/libnsl.so.1", O_RDONLY) = 3
16714 16:06:15.099227 read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\00001\0\0004\0\0\0\234B\1\0\0\0\0\0004\0 \0\10\0(\0\34\0\33\0\6\0\0\0004\0\0\0004\0\0\0004\0\0\0\0\1\0\0\0\1\0\0\5\0\0\0\4\0\0\0\3\0\0\0\340,\1\0\340,\1\0\340,\1\0\23\0\0\0\23\0\0\0\4\0\0\0\1\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\3407\1\0\3407\1\0\5\0\0\0\0\20\0\0\1\0\0\0\300>\1\0\300N\1\0\300N\1\0\350\2\0\0()\0\0\6\0\0\0\0\20\0\0\2\0\0\0\324>\1\0\324N\1\0\324N\1\0\340\0\0\0\340\0\0\0\6\0\0\0\4\0\0\0\4\0\0\0004\1\0\0004\1\0\0004\1\0\0 \0\0\0 \0\0\0\4\0\0\0\4\0\0\0Q\345td\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\4\0\0\0R\345td\300>\1\0\300N\1\0\300N\1\0004\1\0\0004\1\0\0\4\0\0\0\1\0\0\0\4\0\0\0\20\0\0\0\1\0\0\0GNU\0\0\0\0\0\2\0\0\0\6\0\0\0\10\0\0\0\374\0\0\0q\0\0\0 \0\0\0\n\0\0\0\1\1$\232 \'Q\0@ \0\0\f\1\1\n\1\n\0\0\240:X\0@\1\16$\10\4\200\n`\260\23 @\24\21\20@\3442\324\4H\346\0\1`\3@\260\272\2019\30\235\340\0\0\332\200\0044\2\201J\20{\203+\200\22 d\21\1\0\2\200\306 d`A\n\4\4\4\v\4PD@\200\20\0\22 \4\340@\1\32 \4\2\20\10\0\0\204\260\200\0\340\23\0\212$\0\206\210\0\2`@q\0\0\0\0\0\0\0\0\0\0\0r\0\0\0\0\0\0\0t\0\0\0\0\0\0\0", 512) = 512
16714 16:06:15.099731 fstat64(3, {st_mode=S_IFREG|0644, st_size=83708, ...}) = 0
16714 16:06:15.099842 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f03000
16714 16:06:15.099931 mmap2(NULL, 96232, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0xb7eeb000
16714 16:06:15.100006 mmap2(0xb7eff000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x13) = 0xb7eff000
16714 16:06:15.100101 mmap2(0xb7f01000, 6120, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0xb7f01000
16714 16:06:15.100193 close(3)          = 0
