10209 14:55:50.341664 open("/proc/mounts", O_RDONLY|O_LARGEFILE) = 7
10209 14:55:50.341762 fstat64(7, {st_mode=S_IFREG|0444, st_size=0, ...}) = 0
10209 14:55:50.341838 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7ef5000
10209 14:55:50.341924 read(7, "rootfs / rootfs rw 0 0\nnone /sys sysfs rw,nosuid,nodev,noexec 0 0\nnone /proc proc rw,nosuid,nodev,noexec 0 0\nudev /dev tmpfs rw,relatime 0 0\nfusectl /sys/fs/fuse/connections fusectl rw,relatime 0 0\n/dev/mapper/metasploitable-root / ext3 rw,relatime,errors=remount-ro,data=ordered 0 0\n/dev/mapper/metasploitable-root /dev/.static/dev ext3 rw,relatime,errors=remount-ro,data=ordered 0 0\ntmpfs /var/run tmpfs rw,nosuid,nodev,noexec 0 0\ntmpfs /var/lock tmpfs rw,nosuid,nodev,noexec 0 0\ntmpfs /dev/shm tmpfs rw,relatime 0 0\ndevpts /dev/pts devpts rw,relatime 0 0\ntmpfs /var/run tmpfs rw,nosuid,nodev,noexec 0 0\ntmpfs /var/lock tmpfs rw,nosuid,nodev,noexec 0 0\n/dev/sda1 /boot ext3 rw,relatime,data=ordered 0 0\nsecurityfs /sys/kernel/security securityfs rw,relatime 0 0\nrpc_pipefs /var/lib/nfs/rpc_pipefs rpc_pipefs rw,relatime 0 0\nnfsd /proc/fs/nfsd nfsd rw,relatime 0 0\n", 1024) = 866
10209 14:55:50.342282 read(7, "", 1024) = 0
10209 14:55:50.342327 close(7)          = 0
10209 14:55:50.342372 munmap(0xb7ef5000, 4096) = 0
10209 14:55:50.342502 munmap(0xb7d24000, 29913) = 0
10209 14:55:50.342569 read(6, "", 4096) = 0
10209 14:55:50.342618 close(6)          = 0
10209 14:55:50.342659 munmap(0xb7ef6000, 4096) = 0
10209 14:55:50.342709 stat64("/etc/pam.d", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
10209 14:55:50.342815 open("/etc/pam.d/common-account", O_RDONLY|O_LARGEFILE) = 6
10209 14:55:50.342875 fstat64(6, {st_mode=S_IFREG|0644, st_size=392, ...}) = 0
10209 14:55:50.342988 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7ef6000
10209 14:55:50.343042 read(6, "#\n# /etc/pam.d/common-account - authorization settings common to all services\n#\n# This file is included from other service-specific PAM config files,\n# and should contain a list of the authorization modules that define\n# the central access policy for use on the system.  The default is to\n# only deny service to users whose accounts are expired in /etc/shadow.\n#\naccount\trequired\tpam_unix.so\n", 4096) = 392
10209 14:55:50.343219 read(6, "", 4096) = 0
10209 14:55:50.343264 close(6)          = 0
10209 14:55:50.343306 munmap(0xb7ef6000, 4096) = 0
10209 14:55:50.343355 stat64("/etc/pam.d", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
10209 14:55:50.343479 open("/etc/pam.d/common-session", O_RDONLY|O_LARGEFILE) = 6
10209 14:55:50.343540 fstat64(6, {st_mode=S_IFREG|0644, st_size=372, ...}) = 0
10209 14:55:50.343611 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7ef6000
10209 14:55:50.343659 read(6, "#\n# /etc/pam.d/common-session - session-related modules common to all services\n#\n# This file is included from other service-specific PAM config files,\n# and should contain a list of modules that define tasks to be performed\n# at the start and end of sessions of *any* kind (both interactive and\n# non-interactive).  The default is pam_unix.\n#\nsession\trequired\tpam_unix.so\n", 4096) = 372
10209 14:55:50.343829 read(6, "", 4096) = 0
10209 14:55:50.343872 close(6)          = 0
10209 14:55:50.343941 munmap(0xb7ef6000, 4096) = 0
10209 14:55:50.343991 read(5, "", 4096) = 0
10209 14:55:50.344033 close(5)          = 0
10209 14:55:50.344074 munmap(0xb7efc000, 4096) = 0
10209 14:55:50.344120 open("/etc/pam.d/other", O_RDONLY|O_LARGEFILE) = 5
10209 14:55:50.344178 fstat64(5, {st_mode=S_IFREG|0644, st_size=520, ...}) = 0
10209 14:55:50.344248 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7efc000
10209 14:55:50.344295 read(5, "#\n# /etc/pam.d/other - specify the PAM fallback behaviour\n#\n# Note that this file is used for any unspecified service; for example\n#if /etc/pam.d/cron  specifies no session modules but cron calls\n#pam_open_session, the session module out of /etc/pam.d/other is\n#used.  If you really want nothing to happen then use pam_permit.so or\n#pam_deny.so as appropriate.\n\n# We fall back to the system default in /etc/pam.d/common-*\n# \n\n@include common-auth\n@include common-account\n@include common-password\n@include common-session\n", 4096) = 520
10209 14:55:50.345269 stat64("/etc/pam.d", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
10209 14:55:50.345361 open("/etc/pam.d/common-auth", O_RDONLY|O_LARGEFILE) = 6
10209 14:55:50.345418 fstat64(6, {st_mode=S_IFREG|0644, st_size=476, ...}) = 0
10209 14:55:50.345487 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7ef6000
10209 14:55:50.345537 read(6, "#\n# /etc/pam.d/common-auth - authentication settings common to all services\n#\n# This file is included from other service-specific PAM config files,\n# and should contain a list of the authentication modules that define\n# the central authentication scheme for use on the system\n# (e.g., /etc/shadow, LDAP, Kerberos, etc.).  The default is to use the\n# traditional Unix authentication mechanisms.\n#\nauth\trequisite\tpam_unix.so nullok_secure\n# auth\toptional\tpam_smbpass.so migrate\n", 4096) = 476
10209 14:55:50.345787 read(6, "", 4096) = 0
10209 14:55:50.345831 close(6)          = 0
10209 14:55:50.345874 munmap(0xb7ef6000, 4096) = 0
10209 14:55:50.345924 stat64("/etc/pam.d", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
10209 14:55:50.346005 open("/etc/pam.d/common-account", O_RDONLY|O_LARGEFILE) = 6
10209 14:55:50.346039 fstat64(6, {st_mode=S_IFREG|0644, st_size=392, ...}) = 0
10209 14:55:50.346049 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7ef6000
10209 14:55:50.346104 read(6, "#\n# /etc/pam.d/common-account - authorization settings common to all services\n#\n# This file is included from other service-specific PAM config files,\n# and should contain a list of the authorization modules that define\n# the central access policy for use on the system.  The default is to\n# only deny service to users whose accounts are expired in /etc/shadow.\n#\naccount\trequired\tpam_unix.so\n", 4096) = 392
10209 14:55:50.346323 read(6, "", 4096) = 0
10209 14:55:50.346371 close(6)          = 0
10209 14:55:50.346414 munmap(0xb7ef6000, 4096) = 0
10209 14:55:50.346464 stat64("/etc/pam.d", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
10209 14:55:50.346546 open("/etc/pam.d/common-password", O_RDONLY|O_LARGEFILE) = 6
10209 14:55:50.346604 fstat64(6, {st_mode=S_IFREG|0644, st_size=1563, ...}) = 0
10209 14:55:50.346674 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7ef6000
10209 14:55:50.346721 read(6, "#\n# /etc/pam.d/common-password - password-related modules common to all services\n#\n# This file is included from other service-specific PAM config files,\n# and should contain a list of modules that define the services to be\n# used to change user passwords.  The default is pam_unix.\n\n# Explanation of pam_unix options:\n#\n# The \"nullok\" option allows users to change an empty password, else\n# empty passwords are treated as locked accounts.\n#\n# The \"md5\" option enables MD5 passwords.  Without this option, the\n# default is Unix crypt.\n#\n# The \"obscure\" option replaces the old `OBSCURE_CHECKS_ENAB\' option in\n# login.defs.\n#\n# You can also use the \"min\" option to enforce the length of the new\n# password.\n#\n# See the pam_unix manpage for other options.\n\npassword   requisite   pam_unix.so nullok obscure md5\n\n# Alternate strength checking for password. Note that this\n# requires the libpam-cracklib package to be installed.\n# You will need to comment out the password line above and\n# uncomment the next two in order to use this.\n# (Replaces the `OBSCURE_CHECKS_ENAB\', `CRACKLIB_DICTPATH\')\n#\n# password required\t  pam_cracklib.so retry=3 minlen=6 difok=3\n# password required\t  pam_unix.so use_authtok nullok md5\n\n# minimally-intrusive inclusion of smbpass in the stack for\n# synchronization.  If the module is absent or the passwords don\'t\n# match, this module will be ignored without prompting; and if the \n# passwords do match, the NTLM hash for the user will be updated\n# automatically.\n# password   optional   pam_smbpass.so nullok use_authtok use_first_pass\n", 4096) = 1563
10209 14:55:50.347347 read(6, "", 4096) = 0
10209 14:55:50.347397 close(6)          = 0
10209 14:55:50.347439 munmap(0xb7ef6000, 4096) = 0
10209 14:55:50.347489 stat64("/etc/pam.d", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
10209 14:55:50.347572 open("/etc/pam.d/common-session", O_RDONLY|O_LARGEFILE) = 6
10209 14:55:50.347631 fstat64(6, {st_mode=S_IFREG|0644, st_size=372, ...}) = 0
10209 14:55:50.347701 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7ef6000
10209 14:55:50.347900 read(6, "#\n# /etc/pam.d/common-session - session-related modules common to all services\n#\n# This file is included from other service-specific PAM config files,\n# and should contain a list of modules that define tasks to be performed\n# at the start and end of sessions of *any* kind (both interactive and\n# non-interactive).  The default is pam_unix.\n#\nsession\trequired\tpam_unix.so\n", 4096) = 372
10209 14:55:50.348074 read(6, "", 4096) = 0
10209 14:55:50.348116 close(6)          = 0
10209 14:55:50.348158 munmap(0xb7ef6000, 4096) = 0
10209 14:55:50.348204 read(5, "", 4096) = 0
10209 14:55:50.348246 close(5)          = 0
10209 14:55:50.348286 munmap(0xb7efc000, 4096) = 0
10209 14:55:50.348372 time(NULL)        = 1495652150
10209 14:55:50.348433 lstat64("/etc/ftpusers", {st_mode=S_IFREG|0644, st_size=132, ...}) = 0
10209 14:55:50.348515 open("/etc/ftpusers", O_RDONLY|O_LARGEFILE) = 5
10209 14:55:50.348583 fstat64(5, {st_mode=S_IFREG|0644, st_size=132, ...}) = 0
10209 14:55:50.348654 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7efc000
10209 14:55:50.348702 read(5, "# /etc/ftpusers: list of users disallowed FTP access. See ftpusers(5).\n\nroot\ndaemon\nbin\nsys\nsync\ngames\nman\nlp\nmail\nnews\nuucp\nnobody\n", 4096) = 132
10209 14:55:50.348795 read(5, "", 4096) = 0
10209 14:55:50.348873 close(5)          = 0
10209 14:55:50.348927 munmap(0xb7efc000, 4096) = 0
10209 14:55:50.348997 getuid32()        = 0
10209 14:55:50.349070 open("/etc/passwd", O_RDONLY|0x80000 /* O_??? */) = 5
10209 14:55:50.349133 _llseek(5, 0, [0], SEEK_CUR) = 0
10209 14:55:50.349182 fstat64(5, {st_mode=S_IFREG|0644, st_size=1624, ...}) = 0
10209 14:55:50.349253 mmap2(NULL, 1624, PROT_READ, MAP_SHARED, 5, 0) = 0xb7efc000
10209 14:55:50.349302 _llseek(5, 1624, [1624], SEEK_SET) = 0
10209 14:55:50.349427 munmap(0xb7efc000, 1624) = 0
10209 14:55:50.349477 close(5)          = 0
10209 14:55:50.349585 open("/etc/shadow", O_RDONLY|0x80000 /* O_??? */) = 5
10209 14:55:50.349660 _llseek(5, 0, [0], SEEK_CUR) = 0
10209 14:55:50.349707 fstat64(5, {st_mode=S_IFREG|0640, st_size=1233, ...}) = 0
10209 14:55:50.349778 mmap2(NULL, 1233, PROT_READ, MAP_SHARED, 5, 0) = 0xb7efc000
10209 14:55:50.349859 _llseek(5, 1233, [1233], SEEK_SET) = 0
10209 14:55:50.349959 munmap(0xb7efc000, 1233) = 0
10209 14:55:50.350003 close(5)          = 0
10209 14:55:50.350087 open("/etc/passwd", O_RDONLY|0x80000 /* O_??? */) = 5
10209 14:55:50.350145 _llseek(5, 0, [0], SEEK_CUR) = 0
10209 14:55:50.350190 fstat64(5, {st_mode=S_IFREG|0644, st_size=1624, ...}) = 0
10209 14:55:50.350261 mmap2(NULL, 1624, PROT_READ, MAP_SHARED, 5, 0) = 0xb7efc000
10209 14:55:50.350308 _llseek(5, 1624, [1624], SEEK_SET) = 0
10209 14:55:50.350423 munmap(0xb7efc000, 1624) = 0
10209 14:55:50.350469 close(5)          = 0
10209 14:55:50.350525 open("/etc/shadow", O_RDONLY|0x80000 /* O_??? */) = 5
10209 14:55:50.350583 _llseek(5, 0, [0], SEEK_CUR) = 0
10209 14:55:50.350628 fstat64(5, {st_mode=S_IFREG|0640, st_size=1233, ...}) = 0
10209 14:55:50.350698 mmap2(NULL, 1233, PROT_READ, MAP_SHARED, 5, 0) = 0xb7efc000
10209 14:55:50.350744 _llseek(5, 1233, [1233], SEEK_SET) = 0
10209 14:55:50.350863 munmap(0xb7efc000, 1233) = 0
10209 14:55:50.350923 close(5)          = 0
10209 14:55:50.352005 getuid32()        = 0
10209 14:55:50.352064 open("/etc/passwd", O_RDONLY|0x80000 /* O_??? */) = 5
10209 14:55:50.352122 _llseek(5, 0, [0], SEEK_CUR) = 0
10209 14:55:50.352168 fstat64(5, {st_mode=S_IFREG|0644, st_size=1624, ...}) = 0
10209 14:55:50.352239 mmap2(NULL, 1624, PROT_READ, MAP_SHARED, 5, 0) = 0xb7efc000
10209 14:55:50.352287 _llseek(5, 1624, [1624], SEEK_SET) = 0
10209 14:55:50.352399 munmap(0xb7efc000, 1624) = 0
10209 14:55:50.352445 close(5)          = 0
10209 14:55:50.352504 open("/etc/shadow", O_RDONLY|0x80000 /* O_??? */) = 5
10209 14:55:50.352561 _llseek(5, 0, [0], SEEK_CUR) = 0
10209 14:55:50.352606 fstat64(5, {st_mode=S_IFREG|0640, st_size=1233, ...}) = 0
10209 14:55:50.352677 mmap2(NULL, 1233, PROT_READ, MAP_SHARED, 5, 0) = 0xb7efc000
10209 14:55:50.352723 _llseek(5, 1233, [1233], SEEK_SET) = 0
10209 14:55:50.352825 munmap(0xb7efc000, 1233) = 0
10209 14:55:50.352879 close(5)          = 0
10209 14:55:50.352932 time(NULL)        = 1495652150
10209 14:55:50.352998 munmap(0xb7ef9000, 12164) = 0
10209 14:55:50.353056 munmap(0xb7ef7000, 7136) = 0
10209 14:55:50.353116 munmap(0xb7d2c000, 95428) = 0
10209 14:55:50.353165 munmap(0xb7cf2000, 201052) = 0
10209 14:55:50.353213 munmap(0xb7cd9000, 101180) = 0
10209 14:55:50.353323 gettimeofday({1495652150, 353352}, NULL) = 0
10209 14:55:50.353388 stat64("/usr/share/zoneinfo/UTC+04:00", 0xbf9e5354) = -1 ENOENT (No such file or directory)
10209 14:55:50.353454 open("/usr/share/zoneinfo/UTC+04:00", O_RDONLY) = -1 ENOENT (No such file or directory)
10209 14:55:50.353570 fcntl64(3, F_SETLKW64, {type=F_WRLCK, whence=SEEK_SET, start=0, len=0}, 0xbf9e54a4) = 0
10209 14:55:50.353642 write(3, "Wed May 24 14:55:50 2017 [pid 10209] [msfadmin] OK LOGIN: Client \"127.0.0.1\"\n", 77) = 77
10209 14:55:50.353736 fcntl64(3, F_SETLK64, {type=F_UNLCK, whence=SEEK_SET, start=0, len=0}, 0xbf9e54ac) = 0
10209 14:55:50.353841 rt_sigaction(SIGCHLD, {0x805cad0, ~[RTMIN RT_1], 0}, NULL, 8) = 0
10209 14:55:50.353910 write(4, "\1", 1 <unfinished ...>
10210 14:55:50.353953 <... read resumed> "\1", 1) = 1
10209 14:55:50.353977 <... write resumed> ) = 1
10210 14:55:50.354012 exit_group(0)     = ?
10209 14:55:50.354148 --- SIGCHLD (Child exited) @ 0 (0) ---
10209 14:55:50.354181 sigreturn()       = ? (mask now [])
10209 14:55:50.354250 wait4(-1, [{WIFEXITED(s) && WEXITSTATUS(s) == 0}], 0, NULL) = 10210
10209 14:55:50.354250 close(4)          = 0
10209 14:55:50.354250 socketpair(PF_FILE, SOCK_STREAM, 0, [4, 5]) = 0
10209 14:55:50.354325 rt_sigaction(SIGCHLD, {0x805cad0, ~[RTMIN RT_1], 0}, NULL, 8) = 0
10209 14:55:50.354390 rt_sigaction(SIGALRM, {0x805cb10, ~[RTMIN RT_1], 0}, NULL, 8) = 0
10209 14:55:50.354509 clone(child_stack=0, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0xb7d626f8) = 10211
10211 14:55:50.354737 prctl(0x1, 0x9, 0, 0, 0) = 0
10211 14:55:50.354797 close(4)          = 0
10211 14:55:50.354953 open("/etc/passwd", O_RDONLY|0x80000 /* O_??? */) = 4
10211 14:55:50.355037 _llseek(4, 0, [0], SEEK_CUR) = 0
10211 14:55:50.355105 fstat64(4, {st_mode=S_IFREG|0644, st_size=1624, ...}) = 0
10211 14:55:50.355187 mmap2(NULL, 1624, PROT_READ, MAP_SHARED, 4, 0) = 0xb7efc000
10211 14:55:50.355240 _llseek(4, 1624, [1624], SEEK_SET) = 0
10211 14:55:50.355341 munmap(0xb7efc000, 1624) = 0
10211 14:55:50.355426 close(4)          = 0
10211 14:55:50.355495 getuid32()        = 0
10211 14:55:50.355540 open("/etc/passwd", O_RDONLY|0x80000 /* O_??? */) = 4
10211 14:55:50.355598 _llseek(4, 0, [0], SEEK_CUR) = 0
10211 14:55:50.355644 fstat64(4, {st_mode=S_IFREG|0644, st_size=1624, ...}) = 0
10211 14:55:50.355716 mmap2(NULL, 1624, PROT_READ, MAP_SHARED, 4, 0) = 0xb7efc000
10211 14:55:50.355764 _llseek(4, 1624, [1624], SEEK_SET) = 0
10211 14:55:50.355835 munmap(0xb7efc000, 1624) = 0
10211 14:55:50.355877 close(4)          = 0
10211 14:55:50.356818 open("/proc/sys/kernel/ngroups_max", O_RDONLY) = 4
10211 14:55:50.356960 read(4, "65536\n", 31) = 6
10211 14:55:50.357085 close(4)          = 0
10211 14:55:50.357158 socket(PF_FILE, SOCK_STREAM, 0) = 4
10211 14:55:50.357212 fcntl64(4, F_SETFL, O_RDWR|O_NONBLOCK) = 0
10211 14:55:50.357261 connect(4, {sa_family=AF_FILE, path="/var/run/nscd/socket"}, 110) = -1 ENOENT (No such file or directory)
10211 14:55:50.357355 close(4)          = 0
10211 14:55:50.357406 socket(PF_FILE, SOCK_STREAM, 0) = 4
10211 14:55:50.357451 fcntl64(4, F_SETFL, O_RDWR|O_NONBLOCK) = 0
10211 14:55:50.357497 connect(4, {sa_family=AF_FILE, path="/var/run/nscd/socket"}, 110) = -1 ENOENT (No such file or directory)
10211 14:55:50.357634 close(4)          = 0
10211 14:55:50.357745 open("/etc/group", O_RDONLY|0x80000 /* O_??? */) = 4
10211 14:55:50.357819 _llseek(4, 0, [0], SEEK_CUR) = 0
10211 14:55:50.357871 fstat64(4, {st_mode=S_IFREG|0644, st_size=886, ...}) = 0
10211 14:55:50.357945 mmap2(NULL, 886, PROT_READ, MAP_SHARED, 4, 0) = 0xb7efc000
10211 14:55:50.357996 _llseek(4, 886, [886], SEEK_SET) = 0
10211 14:55:50.358164 fstat64(4, {st_mode=S_IFREG|0644, st_size=886, ...}) = 0
10211 14:55:50.358251 munmap(0xb7efc000, 886) = 0
10211 14:55:50.358297 close(4)          = 0
10211 14:55:50.358340 setgroups32(13, [1000, 4, 20, 24, 25, 29, 30, 44, 46, 107, 111, 112, 119]) = 0
10211 14:55:50.358412 geteuid32()       = 0
10211 14:55:50.358461 getegid32()       = 0
10211 14:55:50.358508 setregid32(-1, 1000) = 0
10211 14:55:50.358596 setreuid32(-1, 1000) = 0
10211 14:55:50.358648 chdir("/home/msfadmin") = 0
10211 14:55:50.358701 setreuid32(-1, 0) = 0
10211 14:55:50.358741 setregid32(-1, 0) = 0
10211 14:55:50.358788 setgid32(1000)    = 0
10211 14:55:50.358831 setuid32(1000)    = 0
10211 14:55:50.358876 setrlimit(RLIMIT_NPROC, {rlim_cur=0, rlim_max=0}) = 0
10211 14:55:50.358936 mmap2(NULL, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7efa000
10211 14:55:50.359005 mprotect(0xb7efc000, 4096, PROT_NONE) = 0
10211 14:55:50.359056 mprotect(0xb7efa000, 4096, PROT_NONE) = 0
10211 14:55:50.359105 getcwd("/home/msfadmin", 4096) = 15
10211 14:55:50.359163 umask(022)        = 077
10211 14:55:50.359207 getcwd("/home/msfadmin", 4096) = 15
10211 14:55:50.359265 open(".message", O_RDONLY|O_NONBLOCK|O_LARGEFILE) = -1 ENOENT (No such file or directory)
10211 14:55:50.359364 write(0, "230 Login successful.\r\n", 23) = 23
10211 14:55:50.359924 rt_sigaction(SIGALRM, {0x805cad0, ~[RTMIN RT_1], 0}, NULL, 8) = 0
10211 14:55:50.360001 alarm(300)        = 0
10211 14:55:50.360049 mmap2(NULL, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7ef7000
10211 14:55:50.360100 mprotect(0xb7ef9000, 4096, PROT_NONE) = 0
10211 14:55:50.360150 mprotect(0xb7ef7000, 4096, PROT_NONE) = 0
10211 14:55:50.360207 recv(0, "TYPE I\r\n", 4096, MSG_PEEK) = 8
10211 14:55:50.360264 read(0, "TYPE I\r\n", 8) = 8
10211 14:55:50.360339 write(0, "200 Switching to Binary mode.\r\n", 31) = 31
10211 14:55:50.360503 rt_sigaction(SIGALRM, {0x805cad0, ~[RTMIN RT_1], 0}, NULL, 8) = 0
10211 14:55:50.360567 alarm(300)        = 300
10211 14:55:50.360660 recv(0, "PASV\r\n", 4096, MSG_PEEK) = 6
10211 14:55:50.360725 read(0, "PASV\r\n", 6) = 6
10211 14:55:50.360779 write(5, "\n", 1) = 1
10211 14:55:50.360828 read(5,  <unfinished ...>
10209 14:55:50.360881 close(5)          = 0
10209 14:55:50.360935 getuid32()        = 0
10209 14:55:50.361002 open("/etc/passwd", O_RDONLY|0x80000 /* O_??? */) = 5
10209 14:55:50.361066 _llseek(5, 0, [0], SEEK_CUR) = 0
10209 14:55:50.361120 fstat64(5, {st_mode=S_IFREG|0644, st_size=1624, ...}) = 0
10209 14:55:50.361199 mmap2(NULL, 1624, PROT_READ, MAP_SHARED, 5, 0) = 0xb7efc000
10209 14:55:50.361249 _llseek(5, 1624, [1624], SEEK_SET) = 0
10209 14:55:50.361326 munmap(0xb7efc000, 1624) = 0
10209 14:55:50.361377 close(5)          = 0
10209 14:55:50.361447 setgroups32(0, []) = 0
10209 14:55:50.361500 chdir("/usr/share/empty") = 0
10209 14:55:50.361554 chroot(".")       = 0
10209 14:55:50.361640 capset(NULL, NULL) = -1 EFAULT (Bad address)
10209 14:55:50.361702 prctl(0x8, 0, 0xbf9e5488, 0x80549a6, 0xbf9e5470) = 0
10209 14:55:50.361751 prctl(0x8, 0x1, 0xbf9e5488, 0x8054a49, 0xbf9e5470) = 0
10209 14:55:50.361796 setgid32(65534)   = 0
10209 14:55:50.361840 setuid32(65534)   = 0
10209 14:55:50.361882 capset(0x19980330, 0, {CAP_NET_BIND_SERVICE, CAP_NET_BIND_SERVICE, 0}) = 0
10209 14:55:50.361943 read(4, "\n", 1)  = 1
10209 14:55:50.362001 write(4, "\1", 1) = 1
10211 14:55:50.362051 <... read resumed> "\1", 1) = 1
10211 14:55:50.362084 write(5, "\f", 1) = 1
10211 14:55:50.362128 read(5,  <unfinished ...>
10209 14:55:50.362158 read(4, "\f", 1)  = 1
10209 14:55:50.362213 socket(PF_INET, SOCK_STREAM, IPPROTO_TCP) = 5
10209 14:55:50.362275 setsockopt(5, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
10209 14:55:50.362326 gettimeofday({1495652150, 362342}, NULL) = 0
10209 14:55:50.362399 bind(5, {sa_family=AF_INET, sin_port=htons(64960), sin_addr=inet_addr("127.0.0.1")}, 16) = 0
10209 14:55:50.362476 listen(5, 1)      = 0
10209 14:55:50.362533 write(4, "\300\375\0\0", 4) = 4
10211 14:55:50.362641 <... read resumed> "\300\375\0\0", 4) = 4
10211 14:55:50.362674 write(0, "227 Entering Passive Mode (127,0,0,1,253,192).\r\n", 48) = 48
10211 14:55:50.362882 rt_sigaction(SIGALRM, {0x805cad0, ~[RTMIN RT_1], 0}, NULL, 8) = 0
10211 14:55:50.362917 alarm(300)        = 300
10211 14:55:50.362941 recv(0, "STOR myfile5\r\n", 4096, MSG_PEEK) = 14
10211 14:55:50.362966 read(0, "STOR myfile5\r\n", 14) = 14
10211 14:55:50.362998 write(5, "\v", 1) = 1
10211 14:55:50.363020 read(5,  <unfinished ...>
10209 14:55:50.363035 read(4, "\v", 1)  = 1
10209 14:55:50.363058 write(4, "\1\0\0\0", 4) = 4
10211 14:55:50.363080 <... read resumed> "\1\0\0\0", 4) = 4
10211 14:55:50.363099 gettimeofday({1495652150, 363106}, NULL) = 0
10211 14:55:50.363121 getcwd("/home/msfadmin", 4096) = 15
10211 14:55:50.363147 open("myfile5", O_WRONLY|O_CREAT|O_NONBLOCK|O_LARGEFILE, 0666) = 4
10211 14:55:50.363174 fstat64(4, {st_mode=S_IFREG|0644, st_size=17, ...}) = 0
10211 14:55:50.363219 fcntl64(4, F_GETFL) = 0x8801 (flags O_WRONLY|O_NONBLOCK|O_LARGEFILE)
10211 14:55:50.363242 fcntl64(4, F_SETFL, O_WRONLY|O_LARGEFILE) = 0
10211 14:55:50.363262 fcntl64(4, F_SETLKW64, {type=F_WRLCK, whence=SEEK_SET, start=0, len=0}, 0xbf9e53d4) = 0
10211 14:55:50.363295 ftruncate64(4, 0) = 0
10211 14:55:50.363335 _llseek(4, 0, [0], SEEK_SET) = 0
10211 14:55:50.363358 write(5, "\v", 1) = 1
10211 14:55:50.363381 read(5,  <unfinished ...>
10209 14:55:50.363396 read(4, "\v", 1)  = 1
10209 14:55:50.363419 write(4, "\1\0\0\0", 4) = 4
10211 14:55:50.363441 <... read resumed> "\1\0\0\0", 4) = 4
10211 14:55:50.363457 write(5, "\v", 1) = 1
10211 14:55:50.363478 read(5,  <unfinished ...>
10209 14:55:50.363491 read(4, "\v", 1)  = 1
10209 14:55:50.363535 write(4, "\1\0\0\0", 4) = 4
10211 14:55:50.363559 <... read resumed> "\1\0\0\0", 4) = 4
10211 14:55:50.363575 write(5, "\r", 1) = 1
10211 14:55:50.363596 read(5,  <unfinished ...>
10209 14:55:50.363610 read(4, "\r", 1)  = 1
10209 14:55:50.363637 select(6, [5], NULL, NULL, {60, 0}) = 1 (in [5], left {60, 0})
10209 14:55:50.363672 accept(5, {sa_family=AF_INET, sin_port=htons(40625), sin_addr=inet_addr("127.0.0.1")}, [16]) = 6
10209 14:55:50.363718 write(4, "\1", 1) = 1
10211 14:55:50.363741 <... read resumed> "\1", 1) = 1
10211 14:55:50.363761 recvmsg(5,  <unfinished ...>
10209 14:55:50.363781 sendmsg(4, {msg_name(0)=NULL, msg_iov(1)=[{"\0", 1}], msg_controllen=16, {cmsg_len=16, cmsg_level=SOL_SOCKET, cmsg_type=SCM_RIGHTS, {6}}, msg_flags=0}, 0) = 1
10211 14:55:50.363816 <... recvmsg resumed> {msg_name(0)=NULL, msg_iov(1)=[{"\0", 1}], msg_controllen=16, {cmsg_len=16, cmsg_level=SOL_SOCKET, cmsg_type=SCM_RIGHTS, {6}}, msg_flags=0}, 0) = 1
10211 14:55:50.363843 setsockopt(6, SOL_SOCKET, SO_KEEPALIVE, [1], 4) = 0
10211 14:55:50.363869 setsockopt(6, SOL_IP, IP_TOS, [8], 4) = 0
10211 14:55:50.363893 setsockopt(6, SOL_SOCKET, SO_LINGER, {onoff=1, linger=32767}, 8) = 0
10211 14:55:50.363916 rt_sigaction(SIGALRM, {0x805cad0, ~[RTMIN RT_1], 0}, NULL, 8) = 0
10211 14:55:50.363943 alarm(300)        = 300
10211 14:55:50.363970 write(0, "150 Ok to send data.\r\n", 22) = 22
10211 14:55:50.364029 mmap2(NULL, 77824, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7d31000
10211 14:55:50.364054 mprotect(0xb7d43000, 4096, PROT_NONE) = 0
10211 14:55:50.364074 mprotect(0xb7d31000, 4096, PROT_NONE) = 0
10211 14:55:50.364091 read(6, "assasaaa\na\na\na\na\n", 65536) = 17
10211 14:55:50.364114 write(4, "assasaaa\na\na\na\na\n", 17) = 17
10211 14:55:50.364141 read(6, "", 65536) = 0
10211 14:55:50.364159 rt_sigaction(SIGALRM, {0x805cad0, ~[RTMIN RT_1], 0}, NULL, 8) = 0
10211 14:55:50.364182 alarm(300)        = 300
10211 14:55:50.364198 close(6)          = 0
10211 14:55:50.364213 alarm(0)          = 300
10211 14:55:50.364229 gettimeofday({1495652150, 364235}, NULL) = 0
10211 14:55:50.364259 getpid()          = 10211
10211 14:55:50.364279 gettimeofday({1495652150, 364285}, NULL) = 0
10211 14:55:50.364308 fcntl64(3, F_SETLKW64, {type=F_WRLCK, whence=SEEK_SET, start=0, len=0}, 0xbf9e5374) = 0
10211 14:55:50.364333 write(3, "Wed May 24 14:55:50 2017 [pid 10211] [msfadmin] OK UPLOAD: Client \"127.0.0.1\", \"/home/msfadmin/myfile5\", 17 bytes, 14.08Kbyte/sec\n", 130) = 130
10211 14:55:50.364387 fcntl64(3, F_SETLK64, {type=F_UNLCK, whence=SEEK_SET, start=0, len=0}, 0xbf9e537c) = 0
10211 14:55:50.364414 write(0, "226 Transfer complete.\r\n", 24) = 24
10211 14:55:50.364483 write(5, "\n", 1) = 1
10211 14:55:50.364504 read(5,  <unfinished ...>
10209 14:55:50.364516 close(6)          = 0
10209 14:55:50.364547 read(4, "\n", 1)  = 1
10209 14:55:50.364566 close(5)          = 0
10209 14:55:50.364585 write(4, "\1", 1) = 1
10211 14:55:50.364604 <... read resumed> "\1", 1) = 1
10211 14:55:50.364616 close(4)          = 0
10211 14:55:50.364634 rt_sigaction(SIGALRM, {0x805cad0, ~[RTMIN RT_1], 0}, NULL, 8) = 0
10211 14:55:50.364657 alarm(300)        = 0
