12891 20:31:23.767899 read(6, "xists($arg->{PeerAddr});\n \n        $raddr = shift @raddr;\n\n\treturn _error($sock, $EINVAL, \'Cannot determine remote port\')\n\t\tunless($rport || $type == SOCK_DGRAM || $type == SOCK_RAW);\n\n\tlast\n\t    unless($type == SOCK_STREAM || defined $raddr);\n\n\treturn _error($sock, $EINVAL, \"Bad hostname \'\",$arg->{PeerAddr},\"\'\")\n\t    unless defined $raddr;\n\n#        my $timeout = ${*$sock}{\'io_socket_timeout\'};\n#        my $before = time() if $timeout;\n\n\tundef $@;\n        if ($sock->connect(pack_sockaddr_in($rport, $raddr))) {\n#            ${*$sock}{\'io_socket_timeout\'} = $timeout;\n            return $sock;\n        }\n\n\treturn _error($sock, $!, $@ || \"Timeout\")\n\t    unless @raddr;\n\n#\tif ($timeout) {\n#\t    my $new_timeout = $timeout - (time() - $before);\n#\t    return _error($sock,\n#                         (exists(&Errno::ETIMEDOUT) ? Errno::ETIMEDOUT() : $EINVAL),\n#                         \"Timeout\") if $new_timeout <= 0;\n#\t    ${*$sock}{\'io_socket_timeout\'} = $new_timeout;\n#        }\n\n    }\n\n    $sock;\n}\n\nsub connect {\n    @_ == 2 || @_ == 3 or\n       croak \'usage: $sock->connect(NAME) or $sock->connect(PORT, ADDR)\';\n    my $sock = shift;\n    return $sock->SUPER::connect(@_ == 1 ? shift : pack_sockaddr_in(@_));\n}\n\nsub bind {\n    @_ == 2 || @_ == 3 or\n       croak \'usage: $sock->bind(NAME) or $sock->bind(PORT, ADDR)\';\n    my $sock = shift;\n    return $sock->SUPER::bind(@_ == 1 ? shift : pack_sockaddr_in(@_))\n}\n\nsub sockaddr {\n    @_ == 1 or croak \'usage: $sock->sockaddr()\';\n    my($sock) = @_;\n    my $name = $sock->sockname;\n    $name ? (sockaddr_in($name))[1] : undef;\n}\n\nsub sockport {\n    @_ == 1 or croak \'usage: $sock->sockport()\';\n    my($sock) = @_;\n    my $name = $sock->sockname;\n    $name ? (sockaddr_in($name))[0] : undef;\n}\n\nsub sockhost {\n    @_ == 1 or croak \'usage: $sock->sockhost()\';\n    my($sock) = @_;\n    my $addr = $sock->sockaddr;\n    $addr ? inet_ntoa($addr) : undef;\n}\n\nsub peeraddr {\n    @_ == 1 or croak \'usage: $sock->peeraddr()\';\n    my($sock) = @_;\n    my $name = $sock->peername;\n    $name ? (sockaddr_in($name))[1] : undef;\n}\n\nsub peerport {\n    @_ == 1 or croak \'usage: $sock->peerport()\';\n    my($sock) = @_;\n    my $name = $sock->peername;\n    $name ? (sockaddr_in($name))[0] : undef;\n}\n\nsub peerhost {\n    @_ == 1 or croak \'usage: $sock->peerhost()\';\n    my($sock) = @_;\n    my $addr = $sock->peeraddr;\n    $addr ? inet_ntoa($addr) : undef;\n}\n\n1;\n\n__END__\n\n", 4096) = 2401
12891 20:31:23.768293 _llseek(6, 6496, [6496], SEEK_SET) = 0
12891 20:31:23.768311 _llseek(6, 0, [6496], SEEK_CUR) = 0
12891 20:31:23.768322 close(6)          = 0
12891 20:31:23.768386 stat64("/etc/perl/IO/Socket/UNIX.pmc", 0xbff764cc) = -1 ENOENT (No such file or directory)
12891 20:31:23.768408 stat64("/etc/perl/IO/Socket/UNIX.pm", 0xbff763dc) = -1 ENOENT (No such file or directory)
12891 20:31:23.768423 stat64("/usr/local/lib/perl/5.8.8/IO/Socket/UNIX.pmc", 0xbff764cc) = -1 ENOENT (No such file or directory)
12891 20:31:23.768437 stat64("/usr/local/lib/perl/5.8.8/IO/Socket/UNIX.pm", 0xbff763dc) = -1 ENOENT (No such file or directory)
12891 20:31:23.768452 stat64("/usr/local/share/perl/5.8.8/IO/Socket/UNIX.pmc", 0xbff764cc) = -1 ENOENT (No such file or directory)
12891 20:31:23.768466 stat64("/usr/local/share/perl/5.8.8/IO/Socket/UNIX.pm", 0xbff763dc) = -1 ENOENT (No such file or directory)
12891 20:31:23.768481 stat64("/usr/lib/perl5/IO/Socket/UNIX.pmc", 0xbff764cc) = -1 ENOENT (No such file or directory)
12891 20:31:23.768494 stat64("/usr/lib/perl5/IO/Socket/UNIX.pm", 0xbff763dc) = -1 ENOENT (No such file or directory)
12891 20:31:23.768508 stat64("/usr/share/perl5/IO/Socket/UNIX.pmc", 0xbff764cc) = -1 ENOENT (No such file or directory)
12891 20:31:23.768521 stat64("/usr/share/perl5/IO/Socket/UNIX.pm", 0xbff763dc) = -1 ENOENT (No such file or directory)
12891 20:31:23.768535 stat64("/usr/lib/perl/5.8/IO/Socket/UNIX.pmc", 0xbff764cc) = -1 ENOENT (No such file or directory)
12891 20:31:23.768549 stat64("/usr/lib/perl/5.8/IO/Socket/UNIX.pm", {st_mode=S_IFREG|0644, st_size=1387, ...}) = 0
12891 20:31:23.768571 open("/usr/lib/perl/5.8/IO/Socket/UNIX.pm", O_RDONLY|O_LARGEFILE) = 6
12891 20:31:23.768587 ioctl(6, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbff761e8) = -1 ENOTTY (Inappropriate ioctl for device)
12891 20:31:23.768599 _llseek(6, 0, [0], SEEK_CUR) = 0
12891 20:31:23.768615 brk(0x82bd000)    = 0x82bd000
12891 20:31:23.768632 read(6, "# IO::Socket::UNIX.pm\n#\n# Copyright (c) 1997-8 Graham Barr <gbarr@pobox.com>. All rights reserved.\n# This program is free software; you can redistribute it and/or\n# modify it under the same terms as Perl itself.\n\npackage IO::Socket::UNIX;\n\nuse strict;\nour(@ISA, $VERSION);\nuse IO::Socket;\nuse Socket;\nuse Carp;\n\n@ISA = qw(IO::Socket);\n$VERSION = \"1.22\";\n$VERSION = eval $VERSION;\n\nIO::Socket::UNIX->register_domain( AF_UNIX );\n\nsub new {\n    my $class = shift;\n    unshift(@_, \"Peer\") if @_ == 1;\n    return $class->SUPER::new(@_);\n}\n\nsub configure {\n    my($sock,$arg) = @_;\n    my($bport,$cport);\n\n    my $type = $arg->{Type} || SOCK_STREAM;\n\n    $sock->socket(AF_UNIX, $type, 0) or\n\treturn undef;\n\n    if(exists $arg->{Local}) {\n\tmy $addr = sockaddr_un($arg->{Local});\n\t$sock->bind($addr) or\n\t    return undef;\n    }\n    if(exists $arg->{Listen} && $type != SOCK_DGRAM) {\n\t$sock->listen($arg->{Listen} || 5) or\n\t    return undef;\n    }\n    elsif(exists $arg->{Peer}) {\n\tmy $addr = sockaddr_un($arg->{Peer});\n\t$sock->connect($addr) or\n\t    return undef;\n    }\n\n    $sock;\n}\n\nsub hostpath {\n    @_ == 1 or croak \'usage: $sock->hostpath()\';\n    my $n = $_[0]->sockname || return undef;\n    (sockaddr_un($n))[0];\n}\n\nsub peerpath {\n    @_ == 1 or croak \'usage: $sock->peerpath()\';\n    my $n = $_[0]->peername || return undef;\n    (sockaddr_un($n))[0];\n}\n\n1; # Keep require happy\n\n__END__\n\n", 4096) = 1387
12891 20:31:23.769601 _llseek(6, 1386, [1386], SEEK_SET) = 0
12891 20:31:24.022644 _llseek(6, 0, [1386], SEEK_CUR) = 0
12891 20:31:24.022645 close(6)          = 0
12891 20:31:24.022645 stat64("/etc/perl/IO/Dir.pmc", 0xbff764cc) = -1 ENOENT (No such file or directory)
12891 20:31:24.022645 stat64("/etc/perl/IO/Dir.pm", 0xbff763dc) = -1 ENOENT (No such file or directory)
12891 20:31:24.022645 stat64("/usr/local/lib/perl/5.8.8/IO/Dir.pmc", 0xbff764cc) = -1 ENOENT (No such file or directory)
12891 20:31:24.022645 stat64("/usr/local/lib/perl/5.8.8/IO/Dir.pm", 0xbff763dc) = -1 ENOENT (No such file or directory)
12891 20:31:24.022646 stat64("/usr/local/share/perl/5.8.8/IO/Dir.pmc", 0xbff764cc) = -1 ENOENT (No such file or directory)
12891 20:31:24.022646 stat64("/usr/local/share/perl/5.8.8/IO/Dir.pm", 0xbff763dc) = -1 ENOENT (No such file or directory)
12891 20:31:24.022646 stat64("/usr/lib/perl5/IO/Dir.pmc", 0xbff764cc) = -1 ENOENT (No such file or directory)
12891 20:31:24.022646 stat64("/usr/lib/perl5/IO/Dir.pm", 0xbff763dc) = -1 ENOENT (No such file or directory)
12891 20:31:24.022649 stat64("/usr/share/perl5/IO/Dir.pmc", 0xbff764cc) = -1 ENOENT (No such file or directory)
12891 20:31:24.022662 stat64("/usr/share/perl5/IO/Dir.pm", 0xbff763dc) = -1 ENOENT (No such file or directory)
12891 20:31:24.022676 stat64("/usr/lib/perl/5.8/IO/Dir.pmc", 0xbff764cc) = -1 ENOENT (No such file or directory)
12891 20:31:24.022690 stat64("/usr/lib/perl/5.8/IO/Dir.pm", {st_mode=S_IFREG|0644, st_size=5318, ...}) = 0
12891 20:31:24.022712 open("/usr/lib/perl/5.8/IO/Dir.pm", O_RDONLY|O_LARGEFILE) = 6
12891 20:31:24.022729 ioctl(6, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbff761e8) = -1 ENOTTY (Inappropriate ioctl for device)
12891 20:31:24.022755 _llseek(6, 0, [0], SEEK_CUR) = 0
12891 20:31:24.022780 read(6, "# IO::Dir.pm\n#\n# Copyright (c) 1997-8 Graham Barr <gbarr@pobox.com>. All rights reserved.\n# This program is free software; you can redistribute it and/or\n# modify it under the same terms as Perl itself.\n\npackage IO::Dir;\n\nuse 5.006;\n\nuse strict;\nuse Carp;\nuse Symbol;\nuse Exporter;\nuse IO::File;\nour(@ISA, $VERSION, @EXPORT_OK);\nuse Tie::Hash;\nuse File::stat;\nuse File::Spec;\n\n@ISA = qw(Tie::Hash Exporter);\n$VERSION = \"1.05\";\n$VERSION = eval $VERSION;\n@EXPORT_OK = qw(DIR_UNLINK);\n\nsub DIR_UNLINK () { 1 }\n\nsub new {\n    @_ >= 1 && @_ <= 2 or croak \'usage: new IO::Dir [DIRNAME]\';\n    my $class = shift;\n    my $dh = gensym;\n    if (@_) {\n\tIO::Dir::open($dh, $_[0])\n\t    or return undef;\n    }\n    bless $dh, $class;\n}\n\nsub DESTROY {\n    my ($dh) = @_;\n    closedir($dh);\n}\n\nsub open {\n    @_ == 2 or croak \'usage: $dh->open(DIRNAME)\';\n    my ($dh, $dirname) = @_;\n    return undef\n\tunless opendir($dh, $dirname);\n    # a dir name should always have a \":\" in it; assume dirname is\n    # in current directory\n    $dirname = \':\' .  $dirname if ( ($^O eq \'MacOS\') && ($dirname !~ /:/) );\n    ${*$dh}{io_dir_path} = $dirname;\n    1;\n}\n\nsub close {\n    @_ == 1 or croak \'usage: $dh->close()\';\n    my ($dh) = @_;\n    closedir($dh);\n}\n\nsub read {\n    @_ == 1 or croak \'usage: $dh->read()\';\n    my ($dh) = @_;\n    readdir($dh);\n}\n\nsub seek {\n    @_ == 2 or croak \'usage: $dh->seek(POS)\';\n    my ($dh,$pos) = @_;\n    seekdir($dh,$pos);\n}\n\nsub tell {\n    @_ == 1 or croak \'usage: $dh->tell()\';\n    my ($dh) = @_;\n    telldir($dh);\n}\n\nsub rewind {\n    @_ == 1 or croak \'usage: $dh->rewind()\';\n    my ($dh) = @_;\n    rewinddir($dh);\n}\n\nsub TIEHASH {\n    my($class,$dir,$options) = @_;\n\n    my $dh = $class->new($dir)\n\tor return undef;\n\n    $options ||= 0;\n\n    ${*$dh}{io_dir_unlink} = $options & DIR_UNLINK;\n    $dh;\n}\n\nsub FIRSTKEY {\n    my($dh) = @_;\n    $dh->rewind;\n    scalar $dh->read;\n}\n\nsub NEXTKEY {\n    my($dh) = @_;\n    scalar $dh->read;\n}\n\nsub EXISTS {\n    my($dh,$key) = @_;\n    -e File::Spec->catfile(${*$dh}{io_dir_path}, $key);\n}\n\nsub FETCH {\n    my($dh,$key) = @_;\n    &lstat(File::Spec->catfile(${*$dh}{io_dir_path}, $key));\n}\n\nsub STORE {\n    my($dh,$key,$data) = @_;\n    my($atime,$mtime) = ref($data) ? @$data : ($data,$data);\n    my $file = File::Spec->catfile(${*$dh}{io_dir_path}, $key);\n    unless(-e $file) {\n\tmy $io = IO::File->new($file,O_CREAT | O_RDWR);\n\t$io->close if $io;\n    }\n    utime($atime,$mtime, $file);\n}\n\nsub DELETE {\n    my($dh,$key) = @_;\n\n    # Only unlink if unlink-ing is enabled\n    return 0\n\tunless ${*$dh}{io_dir_unlink};\n\n    my $file = File::Spec->catfile(${*$dh}{io_dir_path}, $key);\n\n    -d $file\n\t? rmdir($file)\n\t: unlink($file);\n}\n\n1;\n\n__END__\n\n=head1 NAME \n\nIO::Dir - supply object methods for directory handles\n\n=head1 SYNOPSIS\n\n    use IO::Dir;\n    $d = IO::Dir->new(\".\");\n    if (defined $d) {\n        while (defined($_ = $d->read)) { something($_); }\n        $d->rewind;\n        while (defined($_ = $d->read)) { something_else($_); }\n        undef $d;\n    }\n\n    tie %dir, \'IO::Dir\', \".\";\n    foreach (keys %dir) {\n\tprint $_, \" \" , $dir{$_}->size,\"\\n\";\n    }\n\n=head1 DESCRIPTION\n\nThe C<IO::Dir> package provides two interfaces to perl\'s directory reading\nroutines.\n\nThe first interface is an object approach. C<IO::Dir> provides an object\nconstructor and methods, which are just wrappers around perl\'s built in\ndirectory reading routines.\n\n=over 4\n\n=item new ( [ DIRNAME ] )\n\nC<new> is the constructor for C<IO::Dir> objects. It accepts one optional\nargument which,  if given, C<new> will pass to C<open>\n\n=back\n\nThe following methods are wrappers for the directory related functions built\ninto perl (the trailing `dir\' has been removed from the names). See L<perlfunc>\nfor details of these functions.\n\n=over 4\n\n=item open ( DIRNAME )\n\n=item read ()\n\n=item seek ( POS )\n\n=item tell ()\n\n=item rewind ()\n\n=item close ()\n\n=back\n\nC<IO::Dir> also provides an interface to reading directories via a tied\nhash. The tied hash extends the interface beyond just the directory\nreading routines by the use of C<lstat>, from the C<File::stat> package,\nC<unlin", 4096) = 4096
12891 20:31:24.023233 stat64("/etc/perl/Tie/Hash.pmc", 0xbff7601c) = -1 ENOENT (No such file or directory)
12891 20:31:24.023256 stat64("/etc/perl/Tie/Hash.pm", 0xbff75f2c) = -1 ENOENT (No such file or directory)
12891 20:31:24.023271 stat64("/usr/local/lib/perl/5.8.8/Tie/Hash.pmc", 0xbff7601c) = -1 ENOENT (No such file or directory)
12891 20:31:24.023285 stat64("/usr/local/lib/perl/5.8.8/Tie/Hash.pm", 0xbff75f2c) = -1 ENOENT (No such file or directory)
12891 20:31:24.023299 stat64("/usr/local/share/perl/5.8.8/Tie/Hash.pmc", 0xbff7601c) = -1 ENOENT (No such file or directory)
12891 20:31:24.023313 stat64("/usr/local/share/perl/5.8.8/Tie/Hash.pm", 0xbff75f2c) = -1 ENOENT (No such file or directory)
12891 20:31:24.023327 stat64("/usr/lib/perl5/Tie/Hash.pmc", 0xbff7601c) = -1 ENOENT (No such file or directory)
12891 20:31:24.023340 stat64("/usr/lib/perl5/Tie/Hash.pm", 0xbff75f2c) = -1 ENOENT (No such file or directory)
12891 20:31:24.023353 stat64("/usr/share/perl5/Tie/Hash.pmc", 0xbff7601c) = -1 ENOENT (No such file or directory)
12891 20:31:24.023365 stat64("/usr/share/perl5/Tie/Hash.pm", 0xbff75f2c) = -1 ENOENT (No such file or directory)
12891 20:31:24.023379 stat64("/usr/lib/perl/5.8/Tie/Hash.pmc", 0xbff7601c) = -1 ENOENT (No such file or directory)
12891 20:31:24.023393 stat64("/usr/lib/perl/5.8/Tie/Hash.pm", 0xbff75f2c) = -1 ENOENT (No such file or directory)
12891 20:31:24.023407 stat64("/usr/share/perl/5.8/Tie/Hash.pmc", 0xbff7601c) = -1 ENOENT (No such file or directory)
12891 20:31:24.023421 stat64("/usr/share/perl/5.8/Tie/Hash.pm", {st_mode=S_IFREG|0644, st_size=7304, ...}) = 0
12891 20:31:24.023443 open("/usr/share/perl/5.8/Tie/Hash.pm", O_RDONLY|O_LARGEFILE) = 8
12891 20:31:24.023458 ioctl(8, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbff75d38) = -1 ENOTTY (Inappropriate ioctl for device)
12891 20:31:24.023474 _llseek(8, 0, [0], SEEK_CUR) = 0
12891 20:31:24.023493 read(8, "package Tie::Hash;\n\nour $VERSION = \'1.02\';\n\n=head1 NAME\n\nTie::Hash, Tie::StdHash, Tie::ExtraHash - base class definitions for tied hashes\n\n=head1 SYNOPSIS\n\n    package NewHash;\n    require Tie::Hash;\n\n    @ISA = (Tie::Hash);\n\n    sub DELETE { ... }\t\t# Provides needed method\n    sub CLEAR { ... }\t\t# Overrides inherited method\n\n\n    package NewStdHash;\n    require Tie::Hash;\n\n    @ISA = (Tie::StdHash);\n\n    # All methods provided by default, define only those needing overrides\n    # Accessors access the storage in %{$_[0]};\n    # TIEHASH should return a reference to the actual storage\n    sub DELETE { ... }\n\n    package NewExtraHash;\n    require Tie::Hash;\n\n    @ISA = (Tie::ExtraHash);\n\n    # All methods provided by default, define only those needing overrides\n    # Accessors access the storage in %{$_[0][0]};\n    # TIEHASH should return an array reference with the first element being\n    # the reference to the actual storage \n    sub DELETE { \n      $_[0][1]->(\'del\', $_[0][0], $_[1]); # Call the report writer\n      delete $_[0][0]->{$_[1]};\t\t  #  $_[0]->SUPER::DELETE($_[1])\n    }\n\n\n    package main;\n\n    tie %new_hash, \'NewHash\';\n    tie %new_std_hash, \'NewStdHash\';\n    tie %new_extra_hash, \'NewExtraHash\',\n\tsub {warn \"Doing \\U$_[1]\\E of $_[2].\\n\"};\n\n=head1 DESCRIPTION\n\nThis module provides some skeletal methods for hash-tying classes. See\nL<perltie> for a list of the functions required in order to tie a hash\nto a package. The basic B<Tie::Hash> package provides a C<new> method, as well\nas methods C<TIEHASH>, C<EXISTS> and C<CLEAR>. The B<Tie::StdHash> and\nB<Tie::ExtraHash> packages\nprovide most methods for hashes described in L<perltie> (the exceptions\nare C<UNTIE> and C<DESTROY>).  They cause tied hashes to behave exactly like standard hashes,\nand allow for selective overwriting of methods.  B<Tie::Hash> grandfathers the\nC<new> method: it is used if C<TIEHASH> is not defined\nin the case a class forgets to include a C<TIEHASH> method.\n\nFor developers wishing to write their own tied hashes, the required methods\nare briefly defined below. See the L<perltie> section for more detailed\ndescriptive, as well as example code:\n\n=over 4\n\n=item TIEHASH classname, LIST\n\nThe method invoked by the command C<tie %hash, classname>. Associates a new\nhash instance with the specified class. C<LIST> would represent additional\narguments (along the lines of L<AnyDBM_File> and compatriots) needed to\ncomplete the association.\n\n=item STORE this, key, value\n\nStore datum I<value> into I<key> for the tied hash I<this>.\n\n=item FETCH this, key\n\nRetrieve the datum in I<key> for the tied hash I<this>.\n\n=item FIRSTKEY this\n\nReturn the first key in the hash.\n\n=item NEXTKEY this, lastkey\n\nReturn the next key in the hash.\n\n=item EXISTS this, key\n\nVerify that I<key> exists with the tied hash I<this>.\n\nThe B<Tie::Hash> implementation is a stub that simply croaks.\n\n=item DELETE this, key\n\nDelete the key I<key> from the tied hash I<this>.\n\n=item CLEAR this\n\nClear all values from the tied hash I<this>.\n\n=item SCALAR this\n\nReturns what evaluating the hash in scalar context yields.\n\nB<Tie::Hash> does not implement this method (but B<Tie::StdHash>\nand B<Tie::ExtraHash> do).\n\n=back\n\n=head1 Inheriting from B<Tie::StdHash>\n\nThe accessor methods assume that the actual storage for the data in the tied\nhash is in the hash referenced by C<tied(%tiedhash)>.  Thus overwritten\nC<TIEHASH> method should return a hash reference, and the remaining methods\nshould operate on the hash referenced by the first argument:\n\n  package ReportHash;\n  our @ISA = \'Tie::StdHash\';\n\n  sub TIEHASH  {\n    my $storage = bless {}, shift;\n    warn \"New ReportHash created, stored in $storage.\\n\";\n    $storage\n  }\n  sub STORE    {\n    warn \"Storing data with key $_[1] at $_[0].\\n\";\n    $_[0]{$_[1]} = $_[2]\n  }\n\n\n=head1 Inheriting from B<Tie::ExtraHash>\n\nThe accessor methods assume that the actual storage for the data in the tied\nhash is in the hash referenced by C<(tied(%tiedhash))-E<gt>[0]>.  Thus overwritten\nC<TIEHASH> method should return an array reference with the first\nelement being a hash refer", 4096) = 4096
12891 20:31:24.023914 read(8, "ence, and the remaining methods should operate on the\nhash C<< %{ $_[0]->[0] } >>:\n\n  package ReportHash;\n  our @ISA = \'Tie::ExtraHash\';\n\n  sub TIEHASH  {\n    my $class = shift;\n    my $storage = bless [{}, @_], $class;\n    warn \"New ReportHash created, stored in $storage.\\n\";\n    $storage;\n  }\n  sub STORE    {\n    warn \"Storing data with key $_[1] at $_[0].\\n\";\n    $_[0][0]{$_[1]} = $_[2]\n  }\n\nThe default C<TIEHASH> method stores \"extra\" arguments to tie() starting\nfrom offset 1 in the array referenced by C<tied(%tiedhash)>; this is the\nsame storage algorithm as in TIEHASH subroutine above.  Hence, a typical\npackage inheriting from B<Tie::ExtraHash> does not need to overwrite this\nmethod.\n\n=head1 C<SCALAR>, C<UNTIE> and C<DESTROY>\n\nThe methods C<UNTIE> and C<DESTROY> are not defined in B<Tie::Hash>,\nB<Tie::StdHash>, or B<Tie::ExtraHash>.  Tied hashes do not require\npresence of these methods, but if defined, the methods will be called in\nproper time, see L<perltie>.\n\nC<SCALAR> is only defined in B<Tie::StdHash> and B<Tie::ExtraHash>.\n\nIf needed, these methods should be defined by the package inheriting from\nB<Tie::Hash>, B<Tie::StdHash>, or B<Tie::ExtraHash>. See L<pertie/\"SCALAR\">\nto find out what happens when C<SCALAR> does not exist.\n\n=head1 MORE INFORMATION\n\nThe packages relating to various DBM-related implementations (F<DB_File>,\nF<NDBM_File>, etc.) show examples of general tied hashes, as does the\nL<Config> module. While these do not utilize B<Tie::Hash>, they serve as\ngood working examples.\n\n=cut\n\nuse Carp;\nuse warnings::register;\n\nsub new {\n    my $pkg = shift;\n    $pkg->TIEHASH(@_);\n}\n\n# Grandfather \"new\"\n\nsub TIEHASH {\n    my $pkg = shift;\n    if (defined &{\"${pkg}::new\"}) {\n\twarnings::warnif(\"WARNING: calling ${pkg}->new since ${pkg}->TIEHASH is missing\");\n\t$pkg->new(@_);\n    }\n    else {\n\tcroak \"$pkg doesn\'t define a TIEHASH method\";\n    }\n}\n\nsub EXISTS {\n    my $pkg = ref $_[0];\n    croak \"$pkg doesn\'t define an EXISTS method\";\n}\n\nsub CLEAR {\n    my $self = shift;\n    my $key = $self->FIRSTKEY(@_);\n    my @keys;\n\n    while (defined $key) {\n\tpush @keys, $key;\n\t$key = $self->NEXTKEY(@_, $key);\n    }\n    foreach $key (@keys) {\n\t$self->DELETE(@_, $key);\n    }\n}\n\n# The Tie::StdHash package implements standard perl hash behaviour.\n# It exists to act as a base class for classes which only wish to\n# alter some parts of their behaviour.\n\npackage Tie::StdHash;\n# @ISA = qw(Tie::Hash);\t\t# would inherit new() only\n\nsub TIEHASH  { bless {}, $_[0] }\nsub STORE    { $_[0]->{$_[1]} = $_[2] }\nsub FETCH    { $_[0]->{$_[1]} }\nsub FIRSTKEY { my $a = scalar keys %{$_[0]}; each %{$_[0]} }\nsub NEXTKEY  { each %{$_[0]} }\nsub EXISTS   { exists $_[0]->{$_[1]} }\nsub DELETE   { delete $_[0]->{$_[1]} }\nsub CLEAR    { %{$_[0]} = () }\nsub SCALAR   { scalar %{$_[0]} }\n\npackage Tie::ExtraHash;\n\nsub TIEHASH  { my $p = shift; bless [{}, @_], $p }\nsub STORE    { $_[0][0]{$_[1]} = $_[2] }\nsub FETCH    { $_[0][0]{$_[1]} }\nsub FIRSTKEY { my $a = scalar keys %{$_[0][0]}; each %{$_[0][0]} }\nsub NEXTKEY  { each %{$_[0][0]} }\nsub EXISTS   { exists $_[0][0]->{$_[1]} }\nsub DELETE   { delete $_[0][0]->{$_[1]} }\nsub CLEAR    { %{$_[0][0]} = () }\nsub SCALAR   { scalar %{$_[0][0]} }\n\n1;\n", 4096) = 3208
12891 20:31:24.024472 read(8, "", 4096) = 0
12891 20:31:24.024489 close(8)          = 0
12891 20:31:24.024520 stat64("/etc/perl/File/stat.pmc", 0xbff7601c) = -1 ENOENT (No such file or directory)
12891 20:31:24.024535 stat64("/etc/perl/File/stat.pm", 0xbff75f2c) = -1 ENOENT (No such file or directory)
12891 20:31:24.024550 stat64("/usr/local/lib/perl/5.8.8/File/stat.pmc", 0xbff7601c) = -1 ENOENT (No such file or directory)
12891 20:31:24.024566 stat64("/usr/local/lib/perl/5.8.8/File/stat.pm", 0xbff75f2c) = -1 ENOENT (No such file or directory)
12891 20:31:24.024581 stat64("/usr/local/share/perl/5.8.8/File/stat.pmc", 0xbff7601c) = -1 ENOENT (No such file or directory)
12891 20:31:24.024594 stat64("/usr/local/share/perl/5.8.8/File/stat.pm", 0xbff75f2c) = -1 ENOENT (No such file or directory)
12891 20:31:24.024608 stat64("/usr/lib/perl5/File/stat.pmc", 0xbff7601c) = -1 ENOENT (No such file or directory)
12891 20:31:24.024620 stat64("/usr/lib/perl5/File/stat.pm", 0xbff75f2c) = -1 ENOENT (No such file or directory)
12891 20:31:24.024633 stat64("/usr/share/perl5/File/stat.pmc", 0xbff7601c) = -1 ENOENT (No such file or directory)
12891 20:31:24.024681 stat64("/usr/share/perl5/File/stat.pm", 0xbff75f2c) = -1 ENOENT (No such file or directory)
12891 20:31:24.024727 stat64("/usr/lib/perl/5.8/File/stat.pmc", 0xbff7601c) = -1 ENOENT (No such file or directory)
12891 20:31:24.024740 stat64("/usr/lib/perl/5.8/File/stat.pm", 0xbff75f2c) = -1 ENOENT (No such file or directory)
12891 20:31:24.024755 stat64("/usr/share/perl/5.8/File/stat.pmc", 0xbff7601c) = -1 ENOENT (No such file or directory)
12891 20:31:24.024768 stat64("/usr/share/perl/5.8/File/stat.pm", {st_mode=S_IFREG|0644, st_size=3372, ...}) = 0
12891 20:31:24.024803 open("/usr/share/perl/5.8/File/stat.pm", O_RDONLY|O_LARGEFILE) = 8
12891 20:31:24.024818 ioctl(8, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbff75d38) = -1 ENOTTY (Inappropriate ioctl for device)
12891 20:31:24.024830 _llseek(8, 0, [0], SEEK_CUR) = 0
12891 20:31:24.024847 read(8, "package File::stat;\nuse 5.006;\n\nuse strict;\nuse warnings;\n\nour(@EXPORT, @EXPORT_OK, %EXPORT_TAGS);\n\nour $VERSION = \'1.00\';\n\nBEGIN { \n    use Exporter   ();\n    @EXPORT      = qw(stat lstat);\n    @EXPORT_OK   = qw( $st_dev\t   $st_ino    $st_mode \n\t\t       $st_nlink   $st_uid    $st_gid \n\t\t       $st_rdev    $st_size \n\t\t       $st_atime   $st_mtime  $st_ctime \n\t\t       $st_blksize $st_blocks\n\t\t    );\n    %EXPORT_TAGS = ( FIELDS => [ @EXPORT_OK, @EXPORT ] );\n}\nuse vars @EXPORT_OK;\n\n# Class::Struct forbids use of @ISA\nsub import { goto &Exporter::import }\n\nuse Class::Struct qw(struct);\nstruct \'File::stat\' => [\n     map { $_ => \'$\' } qw{\n\t dev ino mode nlink uid gid rdev size\n\t atime mtime ctime blksize blocks\n     }\n];\n\nsub populate (@) {\n    return unless @_;\n    my $stob = new();\n    @$stob = (\n\t$st_dev, $st_ino, $st_mode, $st_nlink, $st_uid, $st_gid, $st_rdev,\n        $st_size, $st_atime, $st_mtime, $st_ctime, $st_blksize, $st_blocks ) \n\t    = @_;\n    return $stob;\n} \n\nsub lstat ($)  { populate(CORE::lstat(shift)) }\n\nsub stat ($) {\n    my $arg = shift;\n    my $st = populate(CORE::stat $arg);\n    return $st if $st;\n\tmy $fh;\n    {\n\t\tlocal $!;\n\t\tno strict \'refs\';\n\t\trequire Symbol;\n\t\t$fh = \\*{ Symbol::qualify( $arg, caller() )};\n\t\treturn unless defined fileno $fh;\n\t}\n    return populate(CORE::stat $fh);\n}\n\n1;\n__END__\n\n=head1 NAME\n\nFile::stat - by-name interface to Perl\'s built-in stat() functions\n\n=head1 SYNOPSIS\n\n use File::stat;\n $st = stat($file) or die \"No $file: $!\";\n if ( ($st->mode & 0111) && $st->nlink > 1) ) {\n     print \"$file is executable with lotsa links\\n\";\n } \n\n use File::stat qw(:FIELDS);\n stat($file) or die \"No $file: $!\";\n if ( ($st_mode & 0111) && $st_nlink > 1) ) {\n     print \"$file is executable with lotsa links\\n\";\n } \n\n=head1 DESCRIPTION\n\nThis module\'s default exports override the core stat() \nand lstat() functions, replacing them with versions that return \n\"File::stat\" objects.  This object has methods that\nreturn the similarly named structure field name from the\nstat(2) function; namely,\ndev,\nino,\nmode,\nnlink,\nuid,\ngid,\nrdev,\nsize,\natime,\nmtime,\nctime,\nblksize,\nand\nblocks.  \n\nYou may also import all the structure fields directly into your namespace\nas regular variables using the :FIELDS import tag.  (Note that this still\noverrides your stat() and lstat() functions.)  Access these fields as\nvariables named with a preceding C<st_> in front their method names.\nThus, C<$stat_obj-E<gt>dev()> corresponds to $st_dev if you import\nthe fields.\n\nTo access this functionality without the core overrides,\npass the C<use> an empty import list, and then access\nfunction functions with their full qualified names.\nOn the other hand, the built-ins are still available\nvia the C<CORE::> pseudo-package.\n\n=head1 BUGS\n\nAs of Perl 5.8.0 after using this module you cannot use the implicit\nC<$_> or the special filehandle C<_> with stat() or lstat(), trying\nto do so leads into strange errors.  The workaround is for C<$_> to\nbe explicit\n\n    my $stat_obj = stat $_;\n\nand for C<_> to explicitly populate the object using the unexported\nand undocumented populate() function with CORE::stat():\n\n    my $stat_obj = File::stat::populate(CORE::stat(_));\n\n=head1 NOTE\n\nWhile this class is currently implemented using the Class::Struct\nmodule to build a struct-like class, you shouldn\'t rely upon this.\n\n=head1 AUTHOR\n\nTom Christiansen\n", 4096) = 3372
12891 20:31:24.025328 stat64("/etc/perl/Class/Struct.pmc", 0xbff75b6c) = -1 ENOENT (No such file or directory)
12891 20:31:24.025346 stat64("/etc/perl/Class/Struct.pm", 0xbff75a7c) = -1 ENOENT (No such file or directory)
12891 20:31:24.025361 stat64("/usr/local/lib/perl/5.8.8/Class/Struct.pmc", 0xbff75b6c) = -1 ENOENT (No such file or directory)
12891 20:31:24.025374 stat64("/usr/local/lib/perl/5.8.8/Class/Struct.pm", 0xbff75a7c) = -1 ENOENT (No such file or directory)
12891 20:31:24.025388 stat64("/usr/local/share/perl/5.8.8/Class/Struct.pmc", 0xbff75b6c) = -1 ENOENT (No such file or directory)
12891 20:31:24.025401 stat64("/usr/local/share/perl/5.8.8/Class/Struct.pm", 0xbff75a7c) = -1 ENOENT (No such file or directory)
12891 20:31:24.025416 stat64("/usr/lib/perl5/Class/Struct.pmc", 0xbff75b6c) = -1 ENOENT (No such file or directory)
12891 20:31:24.025428 stat64("/usr/lib/perl5/Class/Struct.pm", 0xbff75a7c) = -1 ENOENT (No such file or directory)
12891 20:31:24.025441 stat64("/usr/share/perl5/Class/Struct.pmc", 0xbff75b6c) = -1 ENOENT (No such file or directory)
12891 20:31:24.025454 stat64("/usr/share/perl5/Class/Struct.pm", 0xbff75a7c) = -1 ENOENT (No such file or directory)
12891 20:31:24.025467 stat64("/usr/lib/perl/5.8/Class/Struct.pmc", 0xbff75b6c) = -1 ENOENT (No such file or directory)
12891 20:31:24.025480 stat64("/usr/lib/perl/5.8/Class/Struct.pm", 0xbff75a7c) = -1 ENOENT (No such file or directory)
12891 20:31:24.025494 stat64("/usr/share/perl/5.8/Class/Struct.pmc", 0xbff75b6c) = -1 ENOENT (No such file or directory)
12891 20:31:24.025507 stat64("/usr/share/perl/5.8/Class/Struct.pm", {st_mode=S_IFREG|0644, st_size=20512, ...}) = 0
12891 20:31:24.025529 open("/usr/share/perl/5.8/Class/Struct.pm", O_RDONLY|O_LARGEFILE) = 10
12891 20:31:24.025544 ioctl(10, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbff75888) = -1 ENOTTY (Inappropriate ioctl for device)
12891 20:31:24.025555 _llseek(10, 0, [0], SEEK_CUR) = 0
12891 20:31:24.025574 read(10, "package Class::Struct;\n\n## See POD after __END__\n\nuse 5.006_001;\n\nuse strict;\nuse warnings::register;\nour(@ISA, @EXPORT, $VERSION);\n\nuse Carp;\n\nrequire Exporter;\n@ISA = qw(Exporter);\n@EXPORT = qw(struct);\n\n$VERSION = \'0.63\';\n\n## Tested on 5.002 and 5.003 without class membership tests:\nmy $CHECK_CLASS_MEMBERSHIP = ($] >= 5.003_95);\n\nmy $print = 0;\nsub printem {\n    if (@_) { $print = shift }\n    else    { $print++ }\n}\n\n{\n    package Class::Struct::Tie_ISA;\n\n    sub TIEARRAY {\n        my $class = shift;\n        return bless [], $class;\n    }\n\n    sub STORE {\n        my ($self, $index, $value) = @_;\n        Class::Struct::_subclass_error();\n    }\n\n    sub FETCH {\n        my ($self, $index) = @_;\n        $self->[$index];\n    }\n\n    sub FETCHSIZE {\n        my $self = shift;\n        return scalar(@$self);\n    }\n\n    sub DESTROY { }\n}\n\nsub import {\n    my $self = shift;\n\n    if ( @_ == 0 ) {\n      $self->export_to_level( 1, $self, @EXPORT );\n    } elsif ( @_ == 1 ) {\n\t# This is admittedly a little bit silly:\n\t# do we ever export anything else than \'struct\'...?\n      $self->export_to_level( 1, $self, @_ );\n    } else {\n      goto &struct;\n    }\n}\n\nsub struct {\n\n    # Determine parameter list structure, one of:\n    #   struct( class => [ element-list ])\n    #   struct( class => { element-list })\n    #   struct( element-list )\n    # Latter form assumes current package name as struct name.\n\n    my ($class, @decls);\n    my $base_type = ref $_[1];\n    if ( $base_type eq \'HASH\' ) {\n        $class = shift;\n        @decls = %{shift()};\n        _usage_error() if @_;\n    }\n    elsif ( $base_type eq \'ARRAY\' ) {\n        $class = shift;\n        @decls = @{shift()};\n        _usage_error() if @_;\n    }\n    else {\n        $base_type = \'ARRAY\';\n        $class = (caller())[0];\n        @decls = @_;\n    }\n\n    _usage_error() if @decls % 2 == 1;\n\n    # Ensure we are not, and will not be, a subclass.\n\n    my $isa = do {\n        no strict \'refs\';\n        \\@{$class . \'::ISA\'};\n    };\n    _subclass_error() if @$isa;\n    tie @$isa, \'Class::Struct::Tie_ISA\';\n\n    # Create constructor.\n\n    croak \"function \'new\' already defined in package $class\"\n        if do { no strict \'refs\'; defined &{$class . \"::new\"} };\n\n    my @methods = ();\n    my %refs = ();\n    my %arrays = ();\n    my %hashes = ();\n    my %classes = ();\n    my $got_class = 0;\n    my $out = \'\';\n\n    $out = \"{\\n  package $class;\\n  use Carp;\\n  sub new {\\n\";\n    $out .= \"    my (\\$class, \\%init) = \\@_;\\n\";\n    $out .= \"    \\$class = __PACKAGE__ unless \\@_;\\n\";\n\n    my $cnt = 0;\n    my $idx = 0;\n    my( $cmt, $name, $type, $elem );\n\n    if( $base_type eq \'HASH\' ){\n        $out .= \"    my(\\$r) = {};\\n\";\n        $cmt = \'\';\n    }\n    elsif( $base_type eq \'ARRAY\' ){\n        $out .= \"    my(\\$r) = [];\\n\";\n    }\n    while( $idx < @decls ){\n        $name = $decls[$idx];\n        $type = $decls[$idx+1];\n        push( @methods, $name );\n        if( $base_type eq \'HASH\' ){\n            $elem = \"{\'${class}::$name\'}\";\n        }\n        elsif( $base_type eq \'ARRAY\' ){\n            $elem = \"[$cnt]\";\n            ++$cnt;\n            $cmt = \" # $name\";\n        }\n        if( $type =~ /^\\*(.)/ ){\n            $refs{$name}++;\n            $type = $1;\n        }\n        my $init = \"defined(\\$init{\'$name\'}) ? \\$init{\'$name\'} :\";\n        if( $type eq \'@\' ){\n            $out .= \"    croak \'Initializer for $name must be array reference\'\\n\"; \n            $out .= \"        if defined(\\$init{\'$name\'}) && ref(\\$init{\'$name\'}) ne \'ARRAY\';\\n\";\n            $out .= \"    \\$r->$elem = $init [];$cmt\\n\"; \n            $arrays{$name}++;\n        }\n        elsif( $type eq \'%\' ){\n            $out .= \"    croak \'Initializer for $name must be hash reference\'\\n\";\n            $out .= \"        if defined(\\$init{\'$name\'}) && ref(\\$init{\'$name\'}) ne \'HASH\';\\n\";\n            $out .= \"    \\$r->$elem = $init {};$cmt\\n\";\n            $hashes{$name}++;\n        }\n        elsif ( $type eq \'$\') {\n            $out .= \"    \\$r->$elem = $init undef;$cmt\\n\";\n        }\n        elsif( $type =~ /^\\w+(?:::\\w+)*$/ ){\n            $out .= \"    if (defined(\\$init{\'$name\'}))", 4096) = 4096
12891 20:31:24.026057 brk(0x82de000)    = 0x82de000
12891 20:31:24.026481 read(10, " {\\n\";\n           $out .= \"       if (ref \\$init{\'$name\'} eq \'HASH\')\\n\";\n            $out .= \"            { \\$r->$elem = $type->new(\\%{\\$init{\'$name\'}}) } $cmt\\n\";\n           $out .= \"       elsif (UNIVERSAL::isa(\\$init{\'$name\'}, \'$type\'))\\n\";\n            $out .= \"            { \\$r->$elem = \\$init{\'$name\'} } $cmt\\n\";\n            $out .= \"       else { croak \'Initializer for $name must be hash or $type reference\' }\\n\";\n            $out .= \"    }\\n\";\n            $classes{$name} = $type;\n            $got_class = 1;\n        }\n        else{\n            croak \"\'$type\' is not a valid struct element type\";\n        }\n        $idx += 2;\n    }\n    $out .= \"    bless \\$r, \\$class;\\n  }\\n\";\n\n    # Create accessor methods.\n\n    my( $pre, $pst, $sel );\n    $cnt = 0;\n    foreach $name (@methods){\n        if ( do { no strict \'refs\'; defined &{$class . \"::$name\"} } ) {\n            warnings::warnif(\"function \'$name\' already defined, overrides struct accessor method\");\n        }\n        else {\n            $pre = $pst = $cmt = $sel = \'\';\n            if( defined $refs{$name} ){\n                $pre = \"\\\\(\";\n                $pst = \")\";\n                $cmt = \" # returns ref\";\n            }\n            $out .= \"  sub $name {$cmt\\n    my \\$r = shift;\\n\";\n            if( $base_type eq \'ARRAY\' ){\n                $elem = \"[$cnt]\";\n                ++$cnt;\n            }\n            elsif( $base_type eq \'HASH\' ){\n                $elem = \"{\'${class}::$name\'}\";\n            }\n            if( defined $arrays{$name} ){\n                $out .= \"    my \\$i;\\n\";\n                $out .= \"    \\@_ ? (\\$i = shift) : return \\$r->$elem;\\n\"; \n                $out .= \"    if (ref(\\$i) eq \'ARRAY\' && !\\@_) { \\$r->$elem = \\$i; return \\$r }\\n\";\n                $sel = \"->[\\$i]\";\n            }\n            elsif( defined $hashes{$name} ){\n                $out .= \"    my \\$i;\\n\";\n                $out .= \"    \\@_ ? (\\$i = shift) : return \\$r->$elem;\\n\";\n                $out .= \"    if (ref(\\$i) eq \'HASH\' && !\\@_) { \\$r->$elem = \\$i; return \\$r }\\n\";\n                $sel = \"->{\\$i}\";\n            }\n            elsif( defined $classes{$name} ){\n                if ( $CHECK_CLASS_MEMBERSHIP ) {\n                    $out .= \"    croak \'$name argument is wrong class\' if \\@_ && ! UNIVERSAL::isa(\\$_[0], \'$classes{$name}\');\\n\";\n                }\n            }\n            $out .= \"    croak \'Too many args to $name\' if \\@_ > 1;\\n\";\n            $out .= \"    \\@_ ? ($pre\\$r->$elem$sel = shift$pst) : $pre\\$r->$elem$sel$pst;\\n\";\n            $out .= \"  }\\n\";\n        }\n    }\n    $out .= \"}\\n1;\\n\";\n\n    print $out if $print;\n    my $result = eval $out;\n    carp $@ if $@;\n}\n\nsub _usage_error {\n    confess \"struct usage error\";\n}\n\nsub _subclass_error {\n    croak \'struct class cannot be a subclass (@ISA not allowed)\';\n}\n\n1; # for require\n\n\n__END__\n\n=head1 NAME\n\nClass::Struct - declare struct-like datatypes as Perl classes\n\n=head1 SYNOPSIS\n\n    use Class::Struct;\n            # declare struct, based on array:\n    struct( CLASS_NAME => [ ELEMENT_NAME => ELEMENT_TYPE, ... ]);\n            # declare struct, based on hash:\n    struct( CLASS_NAME => { ELEMENT_NAME => ELEMENT_TYPE, ... });\n\n    package CLASS_NAME;\n    use Class::Struct;\n            # declare struct, based on array, implicit class name:\n    struct( ELEMENT_NAME => ELEMENT_TYPE, ... );\n\n    # Declare struct at compile time\n    use Class::Struct CLASS_NAME => [ ELEMENT_NAME => ELEMENT_TYPE, ... ];\n    use Class::Struct CLASS_NAME => { ELEMENT_NAME => ELEMENT_TYPE, ... };\n\n    # declare struct at compile time, based on array, implicit class name:\n    package CLASS_NAME;\n    use Class::Struct ELEMENT_NAME => ELEMENT_TYPE, ... ;\n\n    package Myobj;\n    use Class::Struct;\n            # declare struct with four types of elements:\n    struct( s => \'$\', a => \'@\', h => \'%\', c => \'My_Other_Class\' );\n\n    $obj = new Myobj;               # constructor\n\n                                    # scalar type accessor:\n    $element_value = $obj->s;           # element value\n    $obj->s(\'new value\');               # assign to element\n\n                             ", 4096) = 4096
12891 20:31:24.027148 _llseek(10, 6916, [6916], SEEK_SET) = 0
12891 20:31:24.027165 _llseek(10, 0, [6916], SEEK_CUR) = 0
12891 20:31:24.027175 close(10)         = 0
12891 20:31:24.027395 _llseek(8, 1334, [1334], SEEK_SET) = 0
12891 20:31:24.027412 _llseek(8, 0, [1334], SEEK_CUR) = 0
12891 20:31:24.027427 close(8)          = 0
12891 20:31:24.028092 brk(0x82ff000)    = 0x82ff000
12891 20:31:24.028321 _llseek(6, 2689, [2689], SEEK_SET) = 0
12891 20:31:24.028338 _llseek(6, 0, [2689], SEEK_CUR) = 0
12891 20:31:24.028348 close(6)          = 0
12891 20:31:24.028498 clone(child_stack=0, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0xb7d7f908) = 12892
12892 20:31:24.042647 getppid()         = 12891
12892 20:31:24.042895 open("/etc/nsswitch.conf", O_RDONLY) = 6
12892 20:31:24.042919 fstat64(6, {st_mode=S_IFREG|0644, st_size=475, ...}) = 0
12892 20:31:24.042938 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f45000
12892 20:31:24.042953 read(6, "# /etc/nsswitch.conf\n#\n# Example configuration of GNU Name Service Switch functionality.\n# If you have the `glibc-doc-reference\' and `info\' packages installed, try:\n# `info libc \"Name Service Switch\"\' for information about this file.\n\npasswd:         compat\ngroup:          compat\nshadow:         compat\n\nhosts:          files dns\nnetworks:       files\n\nprotocols:      db files\nservices:       db files\nethers:         db files\nrpc:            db files\n\nnetgroup:       nis\n", 4096) = 475
12892 20:31:24.043003 read(6, "", 4096) = 0
12892 20:31:24.043013 close(6)          = 0
12892 20:31:24.043023 munmap(0xb7f45000, 4096) = 0
12892 20:31:24.043050 open("/etc/ld.so.cache", O_RDONLY) = 6
12892 20:31:24.043063 fstat64(6, {st_mode=S_IFREG|0644, st_size=29913, ...}) = 0
12892 20:31:24.043080 mmap2(NULL, 29913, PROT_READ, MAP_PRIVATE, 6, 0) = 0xb7d4c000
12892 20:31:24.043091 close(6)          = 0
12892 20:31:24.043102 access("/etc/ld.so.nohwcap", F_OK) = -1 ENOENT (No such file or directory)
12892 20:31:24.043120 open("/lib/tls/i686/sse2/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.043134 stat64("/lib/tls/i686/sse2/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.043148 open("/lib/tls/i686/sse2/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.043161 stat64("/lib/tls/i686/sse2", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.043173 open("/lib/tls/i686/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.043186 stat64("/lib/tls/i686/cmov", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
12892 20:31:24.043204 open("/lib/tls/i686/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.043216 stat64("/lib/tls/i686", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
12892 20:31:24.043988 open("/lib/tls/sse2/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044020 stat64("/lib/tls/sse2/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044032 open("/lib/tls/sse2/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044044 stat64("/lib/tls/sse2", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044069 open("/lib/tls/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044081 stat64("/lib/tls/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044092 open("/lib/tls/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044103 stat64("/lib/tls", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
12892 20:31:24.044120 open("/lib/i686/sse2/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044132 stat64("/lib/i686/sse2/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044143 open("/lib/i686/sse2/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044155 stat64("/lib/i686/sse2", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044166 open("/lib/i686/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044178 stat64("/lib/i686/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044193 open("/lib/i686/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044205 stat64("/lib/i686", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044216 open("/lib/sse2/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044228 stat64("/lib/sse2/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044239 open("/lib/sse2/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044250 stat64("/lib/sse2", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044261 open("/lib/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044273 stat64("/lib/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044283 open("/lib/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044294 stat64("/lib", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
12892 20:31:24.044311 open("/usr/lib/tls/i686/sse2/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044324 stat64("/usr/lib/tls/i686/sse2/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044336 open("/usr/lib/tls/i686/sse2/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044348 stat64("/usr/lib/tls/i686/sse2", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044360 open("/usr/lib/tls/i686/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044372 stat64("/usr/lib/tls/i686/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044383 open("/usr/lib/tls/i686/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044395 stat64("/usr/lib/tls/i686", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044406 open("/usr/lib/tls/sse2/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044488 stat64("/usr/lib/tls/sse2/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044501 open("/usr/lib/tls/sse2/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044545 stat64("/usr/lib/tls/sse2", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044557 open("/usr/lib/tls/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044569 stat64("/usr/lib/tls/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044581 open("/usr/lib/tls/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044593 stat64("/usr/lib/tls", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044604 open("/usr/lib/i686/sse2/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044617 stat64("/usr/lib/i686/sse2/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044629 open("/usr/lib/i686/sse2/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044642 stat64("/usr/lib/i686/sse2", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044654 open("/usr/lib/i686/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044667 stat64("/usr/lib/i686/cmov", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
12892 20:31:24.044685 open("/usr/lib/i686/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044697 stat64("/usr/lib/i686", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
12892 20:31:24.044715 open("/usr/lib/sse2/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044727 stat64("/usr/lib/sse2/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044739 open("/usr/lib/sse2/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044751 stat64("/usr/lib/sse2", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044762 open("/usr/lib/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044778 stat64("/usr/lib/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044790 open("/usr/lib/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044801 stat64("/usr/lib", {st_mode=S_IFDIR|0755, st_size=32768, ...}) = 0
12892 20:31:24.044819 open("/lib/i486-linux-gnu/tls/i686/sse2/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044833 stat64("/lib/i486-linux-gnu/tls/i686/sse2/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044846 open("/lib/i486-linux-gnu/tls/i686/sse2/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044860 stat64("/lib/i486-linux-gnu/tls/i686/sse2", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044873 open("/lib/i486-linux-gnu/tls/i686/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044886 stat64("/lib/i486-linux-gnu/tls/i686/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044899 open("/lib/i486-linux-gnu/tls/i686/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044918 stat64("/lib/i486-linux-gnu/tls/i686", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044931 open("/lib/i486-linux-gnu/tls/sse2/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044945 stat64("/lib/i486-linux-gnu/tls/sse2/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044958 open("/lib/i486-linux-gnu/tls/sse2/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044971 stat64("/lib/i486-linux-gnu/tls/sse2", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.044983 open("/lib/i486-linux-gnu/tls/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.044997 stat64("/lib/i486-linux-gnu/tls/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.045009 open("/lib/i486-linux-gnu/tls/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045022 stat64("/lib/i486-linux-gnu/tls", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.045034 open("/lib/i486-linux-gnu/i686/sse2/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045047 stat64("/lib/i486-linux-gnu/i686/sse2/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.045060 open("/lib/i486-linux-gnu/i686/sse2/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045073 stat64("/lib/i486-linux-gnu/i686/sse2", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.045086 open("/lib/i486-linux-gnu/i686/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045099 stat64("/lib/i486-linux-gnu/i686/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.045111 open("/lib/i486-linux-gnu/i686/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045124 stat64("/lib/i486-linux-gnu/i686", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.045136 open("/lib/i486-linux-gnu/sse2/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045150 stat64("/lib/i486-linux-gnu/sse2/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.045162 open("/lib/i486-linux-gnu/sse2/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045175 stat64("/lib/i486-linux-gnu/sse2", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.045187 open("/lib/i486-linux-gnu/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045200 stat64("/lib/i486-linux-gnu/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.045212 open("/lib/i486-linux-gnu/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045225 stat64("/lib/i486-linux-gnu", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
12892 20:31:24.045246 open("/usr/lib/i486-linux-gnu/tls/i686/sse2/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045261 stat64("/usr/lib/i486-linux-gnu/tls/i686/sse2/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.045274 open("/usr/lib/i486-linux-gnu/tls/i686/sse2/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045288 stat64("/usr/lib/i486-linux-gnu/tls/i686/sse2", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.045301 open("/usr/lib/i486-linux-gnu/tls/i686/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045315 stat64("/usr/lib/i486-linux-gnu/tls/i686/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.045328 open("/usr/lib/i486-linux-gnu/tls/i686/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045342 stat64("/usr/lib/i486-linux-gnu/tls/i686", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.045354 open("/usr/lib/i486-linux-gnu/tls/sse2/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045368 stat64("/usr/lib/i486-linux-gnu/tls/sse2/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.045381 open("/usr/lib/i486-linux-gnu/tls/sse2/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045395 stat64("/usr/lib/i486-linux-gnu/tls/sse2", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.045412 open("/usr/lib/i486-linux-gnu/tls/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045427 stat64("/usr/lib/i486-linux-gnu/tls/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.045440 open("/usr/lib/i486-linux-gnu/tls/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045453 stat64("/usr/lib/i486-linux-gnu/tls", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.045466 open("/usr/lib/i486-linux-gnu/i686/sse2/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045479 stat64("/usr/lib/i486-linux-gnu/i686/sse2/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.045492 open("/usr/lib/i486-linux-gnu/i686/sse2/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045506 stat64("/usr/lib/i486-linux-gnu/i686/sse2", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.045519 open("/usr/lib/i486-linux-gnu/i686/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045532 stat64("/usr/lib/i486-linux-gnu/i686/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.045545 open("/usr/lib/i486-linux-gnu/i686/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045558 stat64("/usr/lib/i486-linux-gnu/i686", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.045570 open("/usr/lib/i486-linux-gnu/sse2/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045584 stat64("/usr/lib/i486-linux-gnu/sse2/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.045596 open("/usr/lib/i486-linux-gnu/sse2/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045610 stat64("/usr/lib/i486-linux-gnu/sse2", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.045622 open("/usr/lib/i486-linux-gnu/cmov/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045635 stat64("/usr/lib/i486-linux-gnu/cmov", 0xbff7640c) = -1 ENOENT (No such file or directory)
12892 20:31:24.045647 open("/usr/lib/i486-linux-gnu/libnss_db.so.2", O_RDONLY) = -1 ENOENT (No such file or directory)
12892 20:31:24.045660 stat64("/usr/lib/i486-linux-gnu", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
12892 20:31:24.045682 munmap(0xb7d4c000, 29913) = 0
12892 20:31:24.045704 open("/etc/ld.so.cache", O_RDONLY) = 6
12892 20:31:24.045717 fstat64(6, {st_mode=S_IFREG|0644, st_size=29913, ...}) = 0
12892 20:31:24.045737 mmap2(NULL, 29913, PROT_READ, MAP_PRIVATE, 6, 0) = 0xb7d4c000
12892 20:31:24.045748 close(6)          = 0
12892 20:31:24.045759 access("/etc/ld.so.nohwcap", F_OK) = -1 ENOENT (No such file or directory)
12892 20:31:24.045774 open("/lib/tls/i686/cmov/libnss_files.so.2", O_RDONLY) = 6
12892 20:31:24.045790 read(6, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0\340\30\0\0004\0\0\0\254\221\0\0\0\0\0\0004\0 \0\10\0(\0\34\0\33\0\6\0\0\0004\0\0\0004\0\0\0004\0\0\0\0\1\0\0\0\1\0\0\5\0\0\0\4\0\0\0\3\0\0\0\330\206\0\0\330\206\0\0\330\206\0\0\23\0\0\0\23\0\0\0\4\0\0\0\1\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\240\213\0\0\240\213\0\0\5\0\0\0\0\20\0\0\1\0\0\0\350\216\0\0\350\236\0\0\350\236\0\0\314\1\0\0\260\3\0\0\6\0\0\0\0\20\0\0\2\0\0\0\374\216\0\0\374\236\0\0\374\236\0\0\340\0\0\0\340\0\0\0\6\0\0\0\4\0\0\0\4\0\0\0004\1\0\0004\1\0\0004\1\0\0 \0\0\0 \0\0\0\4\0\0\0\4\0\0\0Q\345td\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\4\0\0\0R\345td\350\216\0\0\350\236\0\0\350\236\0\0\f\1\0\0\f\1\0\0\4\0\0\0\1\0\0\0\4\0\0\0\20\0\0\0\1\0\0\0GNU\0\0\0\0\0\2\0\0\0\6\0\0\0\10\0\0\0k\0\0\0.\0\0\0\20\0\0\0\t\0\0\0\"F\340\24\240\240\245\1\31\10\200\20\203\6\212\10\0\0\222@]\1(\nx\10 \"\220\200\20,\5\1\204\4)!\0224\0\24\0\31\0\0\2\2\210@\0\200@0\210\201@@\200\0B\0\6\300.\0\0\0\0\0\0\0\0\0\0\0/\0\0\0000\0\0\0001\0\0\0002\0\0\0003\0\0\0\0\0\0\0004\0\0\0\0\0\0\0005\0\0\0007\0\0\0008\0\0\0\0\0\0\0:\0\0\0\0\0\0\0;\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", 512) = 512
12892 20:31:24.045883 fstat64(6, {st_mode=S_IFREG|0644, st_size=38412, ...}) = 0
12892 20:31:24.045904 mmap2(NULL, 41624, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 6, 0) = 0xb7d41000
12892 20:31:24.045924 mmap2(0xb7d4a000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 6, 0x8) = 0xb7d4a000
12892 20:31:24.045970 close(6)          = 0
12892 20:31:24.046010 munmap(0xb7d4c000, 29913) = 0
12892 20:31:24.046027 open("/etc/protocols", O_RDONLY|0x80000 /* O_??? */) = 6
12892 20:31:24.046045 fcntl64(6, F_GETFD) = 0x1 (flags FD_CLOEXEC)
12892 20:31:24.046061 fstat64(6, {st_mode=S_IFREG|0644, st_size=2510, ...}) = 0
12892 20:31:24.046092 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7d53000
12892 20:31:24.046103 read(6, "# Internet (IP) protocols\n#\n# Updated from http://www.iana.org/assignments/protocol-numbers and other\n# sources.\n# New protocols will be added on request if they have been officially\n# assigned by IANA and are not historical.\n# If you need a huge list of used numbers please install the nmap package.\n\nip\t0\tIP\t\t# internet protocol, pseudo protocol number\n#hopopt\t0\tHOPOPT\t\t# IPv6 Hop-by-Hop Option [RFC1883]\nicmp\t1\tICMP\t\t# internet control message protocol\nigmp\t2\tIGMP\t\t# Internet Group Management\nggp\t3\tGGP\t\t# gateway-gateway protocol\nipencap\t4\tIP-ENCAP\t# IP encapsulated in IP (officially ``IP\'\')\nst\t5\tST\t\t# ST datagram mode\ntcp\t6\tTCP\t\t# transmission control protocol\negp\t8\tEGP\t\t# exterior gateway protocol\nigp\t9\tIGP\t\t# any private interior gateway (Cisco)\npup\t12\tPUP\t\t# PARC universal packet protocol\nudp\t17\tUDP\t\t# user datagram protocol\nhmp\t20\tHMP\t\t# host monitoring protocol\nxns-idp\t22\tXNS-IDP\t\t# Xerox NS IDP\nrdp\t27\tRDP\t\t# \"reliable datagram\" protocol\niso-tp4\t29\tISO-TP4\t\t# ISO Transport Protocol class 4 [RFC905]\nxtp\t36\tXTP\t\t# Xpress Transfer Protocol\nddp\t37\tDDP\t\t# Datagram Delivery Protocol\nidpr-cmtp 38\tIDPR-CMTP\t# IDPR Control Message Transport\nipv6\t41\tIPv6\t\t# Internet Protocol, version 6\nipv6-route 43\tIPv6-Route\t# Routing Header for IPv6\nipv6-frag 44\tIPv6-Frag\t# Fragment Header for IPv6\nidrp\t45\tIDRP\t\t# Inter-Domain Routing Protocol\nrsvp\t46\tRSVP\t\t# Reservation Protocol\ngre\t47\tGRE\t\t# General Routing Encapsulation\nesp\t50\tIPSEC-ESP\t# Encap Security Payload [RFC2406]\nah\t51\tIPSEC-AH\t# Authentication Header [RFC2402]\nskip\t57\tSKIP\t\t# SKIP\nipv6-icmp 58\tIPv6-ICMP\t# ICMP for IPv6\nipv6-nonxt 59\tIPv6-NoNxt\t# No Next Header for IPv6\nipv6-opts 60\tIPv6-Opts\t# Destination Options for IPv6\nrspf\t73\tRSPF CPHB\t# Radio Shortest Path First (officially CPHB)\nvmtp\t81\tVMTP\t\t# Versatile Message Transport\neigrp\t88\tEIGRP\t\t# Enhanced Interior Routing Protocol (Cisco)\nospf\t89\tOSPFIGP\t\t# Open Shortest Path First IGP\nax.25\t93\tAX.25\t\t# AX.25 frames\nipip\t94\tIPIP\t\t# IP-within-IP Encapsulation Protocol\netherip\t97\tETHERIP\t\t# Ethernet-within-IP Encapsulation [RFC3378]\nencap\t98\tENCAP\t\t# Yet Another IP encapsulation [RFC1241]\n#\t99\t\t\t# any private encryption scheme\npim\t103\tPIM\t\t# Protocol Independent Multicast\nipcomp\t108\tIPCOMP\t\t# IP Payload Compression Protocol\nvrrp\t112\tVRRP\t\t# Virtual Router Redundancy Protocol\nl2tp\t115\tL2TP\t\t# Layer Two Tunneling Protocol [RFC2661]\nisis\t124\tISIS\t\t# IS-IS over IPv4\nsctp\t132\tSCTP\t\t# Stream Control Transmission Protocol\nfc\t133\tFC\t\t# Fibre Channel\nudplite\t136\tUDPLite\t\t# UDP-Lite\n\n", 4096) = 2510
12892 20:31:24.046294 close(6)          = 0
12892 20:31:24.046305 munmap(0xb7d53000, 4096) = 0
12892 20:31:24.046324 open("/etc/protocols", O_RDONLY|0x80000 /* O_??? */) = 6
12892 20:31:24.046337 fstat64(6, {st_mode=S_IFREG|0644, st_size=2510, ...}) = 0
12892 20:31:24.046354 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7d53000
12892 20:31:24.046366 read(6, "# Internet (IP) protocols\n#\n# Updated from http://www.iana.org/assignments/protocol-numbers and other\n# sources.\n# New protocols will be added on request if they have been officially\n# assigned by IANA and are not historical.\n# If you need a huge list of used numbers please install the nmap package.\n\nip\t0\tIP\t\t# internet protocol, pseudo protocol number\n#hopopt\t0\tHOPOPT\t\t# IPv6 Hop-by-Hop Option [RFC1883]\nicmp\t1\tICMP\t\t# internet control message protocol\nigmp\t2\tIGMP\t\t# Internet Group Management\nggp\t3\tGGP\t\t# gateway-gateway protocol\nipencap\t4\tIP-ENCAP\t# IP encapsulated in IP (officially ``IP\'\')\nst\t5\tST\t\t# ST datagram mode\ntcp\t6\tTCP\t\t# transmission control protocol\negp\t8\tEGP\t\t# exterior gateway protocol\nigp\t9\tIGP\t\t# any private interior gateway (Cisco)\npup\t12\tPUP\t\t# PARC universal packet protocol\nudp\t17\tUDP\t\t# user datagram protocol\nhmp\t20\tHMP\t\t# host monitoring protocol\nxns-idp\t22\tXNS-IDP\t\t# Xerox NS IDP\nrdp\t27\tRDP\t\t# \"reliable datagram\" protocol\niso-tp4\t29\tISO-TP4\t\t# ISO Transport Protocol class 4 [RFC905]\nxtp\t36\tXTP\t\t# Xpress Transfer Protocol\nddp\t37\tDDP\t\t# Datagram Delivery Protocol\nidpr-cmtp 38\tIDPR-CMTP\t# IDPR Control Message Transport\nipv6\t41\tIPv6\t\t# Internet Protocol, version 6\nipv6-route 43\tIPv6-Route\t# Routing Header for IPv6\nipv6-frag 44\tIPv6-Frag\t# Fragment Header for IPv6\nidrp\t45\tIDRP\t\t# Inter-Domain Routing Protocol\nrsvp\t46\tRSVP\t\t# Reservation Protocol\ngre\t47\tGRE\t\t# General Routing Encapsulation\nesp\t50\tIPSEC-ESP\t# Encap Security Payload [RFC2406]\nah\t51\tIPSEC-AH\t# Authentication Header [RFC2402]\nskip\t57\tSKIP\t\t# SKIP\nipv6-icmp 58\tIPv6-ICMP\t# ICMP for IPv6\nipv6-nonxt 59\tIPv6-NoNxt\t# No Next Header for IPv6\nipv6-opts 60\tIPv6-Opts\t# Destination Options for IPv6\nrspf\t73\tRSPF CPHB\t# Radio Shortest Path First (officially CPHB)\nvmtp\t81\tVMTP\t\t# Versatile Message Transport\neigrp\t88\tEIGRP\t\t# Enhanced Interior Routing Protocol (Cisco)\nospf\t89\tOSPFIGP\t\t# Open Shortest Path First IGP\nax.25\t93\tAX.25\t\t# AX.25 frames\nipip\t94\tIPIP\t\t# IP-within-IP Encapsulation Protocol\netherip\t97\tETHERIP\t\t# Ethernet-within-IP Encapsulation [RFC3378]\nencap\t98\tENCAP\t\t# Yet Another IP encapsulation [RFC1241]\n#\t99\t\t\t# any private encryption scheme\npim\t103\tPIM\t\t# Protocol Independent Multicast\nipcomp\t108\tIPCOMP\t\t# IP Payload Compression Protocol\nvrrp\t112\tVRRP\t\t# Virtual Router Redundancy Protocol\nl2tp\t115\tL2TP\t\t# Layer Two Tunneling Protocol [RFC2661]\nisis\t124\tISIS\t\t# IS-IS over IPv4\nsctp\t132\tSCTP\t\t# Stream Control Transmission Protocol\nfc\t133\tFC\t\t# Fibre Channel\nudplite\t136\tUDPLite\t\t# UDP-Lite\n\n", 4096) = 2510
12892 20:31:24.046595 close(6)          = 0
12892 20:31:24.046606 munmap(0xb7d53000, 4096) = 0
12892 20:31:24.046635 socket(PF_INET, SOCK_STREAM, IPPROTO_TCP) = 6
12892 20:31:24.046657 ioctl(6, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbff76918) = -1 EINVAL (Invalid argument)
12892 20:31:24.046670 _llseek(6, 0, 0xbff76960, SEEK_CUR) = -1 ESPIPE (Illegal seek)
12892 20:31:24.046683 ioctl(6, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbff76918) = -1 EINVAL (Invalid argument)
12892 20:31:24.046693 _llseek(6, 0, 0xbff76960, SEEK_CUR) = -1 ESPIPE (Illegal seek)
12892 20:31:24.046703 fcntl64(6, F_SETFD, FD_CLOEXEC) = 0
12892 20:31:24.046760 setsockopt(6, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
12892 20:31:24.046799 bind(6, {sa_family=AF_INET, sin_port=htons(4444), sin_addr=inet_addr("0.0.0.0")}, 16) = 0
12892 20:31:24.046826 listen(6, 5)      = 0
12892 20:31:24.223199 accept(6,  <unfinished ...>
12891 20:31:24.223398 exit_group(0)     = ?
12889 20:31:24.313047 <... waitpid resumed> [{WIFEXITED(s) && WEXITSTATUS(s) == 0}], 0) = 12891
12889 20:31:24.313144 rt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0
12889 20:31:24.313171 --- SIGCHLD (Child exited) @ 0 (0) ---
12889 20:31:24.313181 waitpid(-1, 0xbf805378, WNOHANG) = -1 ECHILD (No child processes)
12889 20:31:24.313193 sigreturn()       = ? (mask now [])
12889 20:31:24.313210 rt_sigaction(SIGINT, {SIG_DFL}, {0x807f150, [], 0}, 8) = 0
12889 20:31:24.313267 exit_group(0)     = ?
4519  20:31:24.313314 <... waitpid resumed> [{WIFEXITED(s) && WEXITSTATUS(s) == 0}], 0) = 12889
4519  20:31:24.313327 rt_sigaction(SIGINT, {0x8062280, [HUP INT], 0}, NULL, 8) = 0
4519  20:31:24.313342 rt_sigaction(SIGQUIT, {SIG_IGN}, NULL, 8) = 0
4519  20:31:24.313353 rt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0
4519  20:31:24.313363 --- SIGCHLD (Child exited) @ 0 (0) ---
4519  20:31:24.313383 send(5, ":irc.Metasploitable.LAN 451 AB;perl :You have not registered\r\n", 62, 0) = 62
4519  20:31:24.313450 time(NULL)        = 1495672284
4519  20:31:24.313462 time(NULL)        = 1495672284
