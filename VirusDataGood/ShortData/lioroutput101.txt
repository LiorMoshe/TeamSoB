10184 20:03:52.777346 stat64("/etc/perl/IO/Seekable.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:52.777347 stat64("/etc/perl/IO/Seekable.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:52.777347 stat64("/usr/local/lib/perl/5.8.8/IO/Seekable.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:52.777347 stat64("/usr/local/lib/perl/5.8.8/IO/Seekable.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:52.777347 stat64("/usr/local/share/perl/5.8.8/IO/Seekable.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:52.777348 stat64("/usr/local/share/perl/5.8.8/IO/Seekable.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:52.777348 stat64("/usr/lib/perl5/IO/Seekable.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:52.777348 stat64("/usr/lib/perl5/IO/Seekable.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:52.777348 stat64("/usr/share/perl5/IO/Seekable.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:52.777348 stat64("/usr/share/perl5/IO/Seekable.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:52.777349 stat64("/usr/lib/perl/5.8/IO/Seekable.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:52.777349 stat64("/usr/lib/perl/5.8/IO/Seekable.pm", {st_mode=S_IFREG|0644, st_size=686, ...}) = 0
10184 20:03:52.777349 open("/usr/lib/perl/5.8/IO/Seekable.pm", O_RDONLY|O_LARGEFILE) = 6
10184 20:03:52.777363 ioctl(6, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf81c298) = -1 ENOTTY (Inappropriate ioctl for device)
10184 20:03:52.777376 _llseek(6, 0, [0], SEEK_CUR) = 0
10184 20:03:52.777396 read(6, "#\n\npackage IO::Seekable;\n\nuse 5.006_001;\nuse Carp;\nuse strict;\nour($VERSION, @EXPORT, @ISA);\nuse IO::Handle ();\n# XXX we can\'t get these from IO::Handle or we\'ll get prototype\n# mismatch warnings on C<use POSIX; use IO::File;> :-(\nuse Fcntl qw(SEEK_SET SEEK_CUR SEEK_END);\nrequire Exporter;\n\n@EXPORT = qw(SEEK_SET SEEK_CUR SEEK_END);\n@ISA = qw(Exporter);\n\n$VERSION = \"1.10\";\n$VERSION = eval $VERSION;\n\nsub seek {\n    @_ == 3 or croak \'usage: $io->seek(POS, WHENCE)\';\n    seek($_[0], $_[1], $_[2]);\n}\n\nsub sysseek {\n    @_ == 3 or croak \'usage: $io->sysseek(POS, WHENCE)\';\n    sysseek($_[0], $_[1], $_[2]);\n}\n\nsub tell {\n    @_ == 1 or croak \'usage: $io->tell()\';\n    tell($_[0]);\n}\n\n1;\n", 4096) = 686
10184 20:03:52.777563 stat64("/etc/perl/Fcntl.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.777579 stat64("/etc/perl/Fcntl.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:52.777593 stat64("/usr/local/lib/perl/5.8.8/Fcntl.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.777606 stat64("/usr/local/lib/perl/5.8.8/Fcntl.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:52.777620 stat64("/usr/local/share/perl/5.8.8/Fcntl.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.777633 stat64("/usr/local/share/perl/5.8.8/Fcntl.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:52.777647 stat64("/usr/lib/perl5/Fcntl.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.777660 stat64("/usr/lib/perl5/Fcntl.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:52.777673 stat64("/usr/share/perl5/Fcntl.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.777685 stat64("/usr/share/perl5/Fcntl.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:52.777698 stat64("/usr/lib/perl/5.8/Fcntl.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.777711 stat64("/usr/lib/perl/5.8/Fcntl.pm", {st_mode=S_IFREG|0644, st_size=3458, ...}) = 0
10184 20:03:52.777732 open("/usr/lib/perl/5.8/Fcntl.pm", O_RDONLY|O_LARGEFILE) = 8
10184 20:03:52.777746 ioctl(8, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf81bde8) = -1 ENOTTY (Inappropriate ioctl for device)
10184 20:03:52.777758 _llseek(8, 0, [0], SEEK_CUR) = 0
10184 20:03:52.777778 read(8, "package Fcntl;\n\nour($VERSION, @ISA, @EXPORT, @EXPORT_OK, %EXPORT_TAGS, $AUTOLOAD);\n\nrequire Exporter;\nuse XSLoader ();\n@ISA = qw(Exporter);\n$VERSION = \"1.05\";\n# Items to export into callers namespace by default\n# (move infrequently used names to @EXPORT_OK below)\n@EXPORT =\n  qw(\n\tFD_CLOEXEC\n\tF_ALLOCSP\n\tF_ALLOCSP64\n\tF_COMPAT\n\tF_DUP2FD\n\tF_DUPFD\n\tF_EXLCK\n\tF_FREESP\n\tF_FREESP64\n\tF_FSYNC\n\tF_FSYNC64\n\tF_GETFD\n\tF_GETFL\n\tF_GETLK\n\tF_GETLK64\n\tF_GETOWN\n\tF_NODNY\n\tF_POSIX\n\tF_RDACC\n\tF_RDDNY\n\tF_RDLCK\n\tF_RWACC\n\tF_RWDNY\n\tF_SETFD\n\tF_SETFL\n\tF_SETLK\n\tF_SETLK64\n\tF_SETLKW\n\tF_SETLKW64\n\tF_SETOWN\n\tF_SHARE\n\tF_SHLCK\n\tF_UNLCK\n\tF_UNSHARE\n\tF_WRACC\n\tF_WRDNY\n\tF_WRLCK\n\tO_ACCMODE\n\tO_ALIAS\n\tO_APPEND\n\tO_ASYNC\n\tO_BINARY\n\tO_CREAT\n\tO_DEFER\n\tO_DIRECT\n\tO_DIRECTORY\n\tO_DSYNC\n\tO_EXCL\n\tO_EXLOCK\n\tO_LARGEFILE\n\tO_NDELAY\n\tO_NOCTTY\n\tO_NOFOLLOW\n\tO_NOINHERIT\n\tO_NONBLOCK\n\tO_RANDOM\n\tO_RAW\n\tO_RDONLY\n\tO_RDWR\n\tO_RSRC\n\tO_RSYNC\n\tO_SEQUENTIAL\n\tO_SHLOCK\n\tO_SYNC\n\tO_TEMPORARY\n\tO_TEXT\n\tO_TRUNC\n\tO_WRONLY\n     );\n\n# Other items we are prepared to export if requested\n@EXPORT_OK = qw(\n\tDN_ACCESS\n\tDN_ATTRIB\n\tDN_CREATE\n\tDN_DELETE\n\tDN_MODIFY\n\tDN_MULTISHOT\n\tDN_RENAME\n\tFAPPEND\n\tFASYNC\n\tFCREAT\n\tFDEFER\n\tFDSYNC\n\tFEXCL\n\tFLARGEFILE\n\tFNDELAY\n\tFNONBLOCK\n\tFRSYNC\n\tFSYNC\n\tFTRUNC\n\tF_GETLEASE\n\tF_GETSIG\n\tF_NOTIFY\n\tF_SETLEASE\n\tF_SETSIG\n\tLOCK_EX\n\tLOCK_MAND\n\tLOCK_NB\n\tLOCK_READ\n\tLOCK_RW\n\tLOCK_SH\n\tLOCK_UN\n\tLOCK_WRITE\n\tO_IGNORE_CTTY\n\tO_NOATIME\n\tO_NOLINK\n\tO_NOTRANS\n\tSEEK_CUR\n\tSEEK_END\n\tSEEK_SET\n\tS_IFSOCK S_IFBLK S_IFCHR S_IFIFO S_IFWHT S_ENFMT\n\tS_IREAD S_IWRITE S_IEXEC\n\tS_IRGRP S_IWGRP S_IXGRP S_IRWXG\n\tS_IROTH S_IWOTH S_IXOTH S_IRWXO\n\tS_IRUSR S_IWUSR S_IXUSR S_IRWXU\n\tS_ISUID S_ISGID S_ISVTX S_ISTXT\n\t_S_IFMT S_IFREG S_IFDIR S_IFLNK\n\t&S_ISREG &S_ISDIR &S_ISLNK &S_ISSOCK &S_ISBLK &S_ISCHR &S_ISFIFO\n\t&S_ISWHT &S_ISENFMT &S_IFMT &S_IMODE\n);\n# Named groups of exports\n%EXPORT_TAGS = (\n    \'flock\'   => [qw(LOCK_SH LOCK_EX LOCK_NB LOCK_UN)],\n    \'Fcompat\' => [qw(FAPPEND FASYNC FCREAT FDEFER FDSYNC FEXCL FLARGEFILE\n\t\t     FNDELAY FNONBLOCK FRSYNC FSYNC FTRUNC)],\n    \'seek\'    => [qw(SEEK_SET SEEK_CUR SEEK_END)],\n    \'mode\'    => [qw(S_ISUID S_ISGID S_ISVTX S_ISTXT\n\t\t     _S_IFMT S_IFREG S_IFDIR S_IFLNK\n\t\t     S_IFSOCK S_IFBLK S_IFCHR S_IFIFO S_IFWHT S_ENFMT\n\t\t     S_IRUSR S_IWUSR S_IXUSR S_IRWXU\n\t\t     S_IRGRP S_IWGRP S_IXGRP S_IRWXG\n\t\t     S_IROTH S_IWOTH S_IXOTH S_IRWXO\n\t\t     S_IREAD S_IWRITE S_IEXEC\n\t\t     S_ISREG S_ISDIR S_ISLNK S_ISSOCK\n\t\t     S_ISBLK S_ISCHR S_ISFIFO\n\t\t     S_ISWHT S_ISENFMT\t\t\n\t\t     S_IFMT S_IMODE\n                  )],\n);\n\nsub S_IFMT  { @_ ? ( $_[0] & _S_IFMT() ) : _S_IFMT()  }\nsub S_IMODE { $_[0] & 07777 }\n\nsub S_ISREG    { ( $_[0] & _S_IFMT() ) == S_IFREG()   }\nsub S_ISDIR    { ( $_[0] & _S_IFMT() ) == S_IFDIR()   }\nsub S_ISLNK    { ( $_[0] & _S_IFMT() ) == S_IFLNK()   }\nsub S_ISSOCK   { ( $_[0] & _S_IFMT() ) == S_IFSOCK()  }\nsub S_ISBLK    { ( $_[0] & _S_IFMT() ) == S_IFBLK()   }\nsub S_ISCHR    { ( $_[0] & _S_IFMT() ) == S_IFCHR()   }\nsub S_ISFIFO   { ( $_[0] & _S_IFMT() ) == S_IFIFO()   }\nsub S_ISWHT    { ( $_[0] & _S_IFMT() ) == S_IFWHT()   }\nsub S_ISENFMT  { ( $_[0] & _S_IFMT() ) == S_IFENFMT() }\n\nsub AUTOLOAD {\n    (my $constname = $AUTOLOAD) =~ s/.*:://;\n    die \"&Fcntl::constant not defined\" if $constname eq \'constant\';\n    my ($error, $val) = constant($constname);\n    if ($error) {\n        my (undef,$file,$line) = caller;\n        die \"$error at $file line $line.\\n\";\n    }\n    *$AUTOLOAD = sub { $val };\n    goto &$AUTOLOAD;\n}\n\nXSLoader::load \'Fcntl\', $VERSION;\n\n1;\n", 4096) = 3458
10184 20:03:52.778135 brk(0x81f7000)    = 0x81f7000
10184 20:03:52.778318 read(8, "", 4096) = 0
10184 20:03:52.778333 close(8)          = 0
10184 20:03:52.778416 stat64("/usr/lib/perl/5.8/auto/Fcntl/Fcntl.so", {st_mode=S_IFREG|0644, st_size=12412, ...}) = 0
10184 20:03:52.778443 stat64("/usr/lib/perl/5.8/auto/Fcntl/Fcntl.bs", {st_mode=S_IFREG|0644, st_size=0, ...}) = 0
10184 20:03:52.778476 open("/usr/lib/perl/5.8/auto/Fcntl/Fcntl.so", O_RDONLY) = 8
10184 20:03:52.778491 read(8, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0 \10\0\0004\0\0\0\274,\0\0\0\0\0\0004\0 \0\4\0(\0\30\0\27\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\274*\0\0\274*\0\0\5\0\0\0\0\20\0\0\1\0\0\0\274*\0\0\274:\0\0\274:\0\0T\1\0\0X\1\0\0\6\0\0\0\0\20\0\0\2\0\0\0\320*\0\0\320:\0\0\320:\0\0\310\0\0\0\310\0\0\0\6\0\0\0\4\0\0\0Q\345td\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\4\0\0\0\21\0\0\0\36\0\0\0\0\0\0\0\25\0\0\0\32\0\0\0\24\0\0\0\5\0\0\0\t\0\0\0\0\0\0\0\23\0\0\0\21\0\0\0\34\0\0\0\4\0\0\0\26\0\0\0\0\0\0\0\30\0\0\0\17\0\0\0\27\0\0\0\r\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\1\0\0\0\0\0\0\0\3\0\0\0\2\0\0\0\0\0\0\0\0\0\0\0\v\0\0\0\6\0\0\0\35\0\0\0\7\0\0\0\0\0\0\0\22\0\0\0\31\0\0\0\33\0\0\0\20\0\0\0\16\0\0\0\n\0\0\0\0\0\0\0\f\0\0\0\10\0\0\0\0\0\0\0\3\0\0\0\27\0\0\0\2\0\0\0\6\0\0\0\210\0 \1\0\304H\t\27\0\0\0\32\0\0\0\35\0\0\0\356TU\220\272\343\222|CE\325\354.6bx\330qX\34\271\215\361\16\353\323\357\16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\353\0\0\0\0\0\0\0\0\0\0\0\20\0\0\0j\1\0\0\0\0\0\0\0\0\0\0\20\0\0\0\337\0\0\0\0\0\0\0\0\0\0\0\20\0\0\0u\0\0\0\0\0\0\0", 512) = 512
10184 20:03:52.778582 fstat64(8, {st_mode=S_IFREG|0644, st_size=12412, ...}) = 0
10184 20:03:52.778601 mmap2(NULL, 15380, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 8, 0) = 0xb7de5000
10184 20:03:52.778615 mmap2(0xb7de8000, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 8, 0x2) = 0xb7de8000
10184 20:03:52.778632 close(8)          = 0
10184 20:03:52.778845 read(6, "", 4096) = 0
10184 20:03:52.778859 close(6)          = 0
10184 20:03:52.778896 stat64("/etc/perl/IO/File.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:52.778944 stat64("/etc/perl/IO/File.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:52.778993 stat64("/usr/local/lib/perl/5.8.8/IO/File.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:52.779020 stat64("/usr/local/lib/perl/5.8.8/IO/File.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:52.779035 stat64("/usr/local/share/perl/5.8.8/IO/File.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:52.779048 stat64("/usr/local/share/perl/5.8.8/IO/File.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:52.779062 stat64("/usr/lib/perl5/IO/File.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:52.779074 stat64("/usr/lib/perl5/IO/File.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:52.779087 stat64("/usr/share/perl5/IO/File.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:52.779099 stat64("/usr/share/perl5/IO/File.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:52.779113 stat64("/usr/lib/perl/5.8/IO/File.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:52.779126 stat64("/usr/lib/perl/5.8/IO/File.pm", {st_mode=S_IFREG|0644, st_size=1784, ...}) = 0
10184 20:03:52.779147 open("/usr/lib/perl/5.8/IO/File.pm", O_RDONLY|O_LARGEFILE) = 6
10184 20:03:52.779162 ioctl(6, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf81c298) = -1 ENOTTY (Inappropriate ioctl for device)
10184 20:03:52.779174 _llseek(6, 0, [0], SEEK_CUR) = 0
10184 20:03:52.779192 read(6, "#\n\npackage IO::File;\n\nuse 5.006_001;\nuse strict;\nour($VERSION, @EXPORT, @EXPORT_OK, @ISA);\nuse Carp;\nuse Symbol;\nuse SelectSaver;\nuse IO::Seekable;\nuse File::Spec;\n\nrequire Exporter;\n\n@ISA = qw(IO::Handle IO::Seekable Exporter);\n\n$VERSION = \"1.13\";\n\n@EXPORT = @IO::Seekable::EXPORT;\n\neval {\n    # Make all Fcntl O_XXX constants available for importing\n    require Fcntl;\n    my @O = grep /^O_/, @Fcntl::EXPORT;\n    Fcntl->import(@O);  # first we import what we want to export\n    push(@EXPORT, @O);\n};\n\n################################################\n## Constructor\n##\n\nsub new {\n    my $type = shift;\n    my $class = ref($type) || $type || \"IO::File\";\n    @_ >= 0 && @_ <= 3\n\tor croak \"usage: new $class [FILENAME [,MODE [,PERMS]]]\";\n    my $fh = $class->SUPER::new();\n    if (@_) {\n\t$fh->open(@_)\n\t    or return undef;\n    }\n    $fh;\n}\n\n################################################\n## Open\n##\n\nsub open {\n    @_ >= 2 && @_ <= 4 or croak \'usage: $fh->open(FILENAME [,MODE [,PERMS]])\';\n    my ($fh, $file) = @_;\n    if (@_ > 2) {\n\tmy ($mode, $perms) = @_[2, 3];\n\tif ($mode =~ /^\\d+$/) {\n\t    defined $perms or $perms = 0666;\n\t    return sysopen($fh, $file, $mode, $perms);\n\t} elsif ($mode =~ /:/) {\n\t    return open($fh, $mode, $file) if @_ == 3;\n\t    croak \'usage: $fh->open(FILENAME, IOLAYERS)\';\n\t}\n\tif (defined($file) && length($file)\n\t    && ! File::Spec->file_name_is_absolute($file))\n\t{\n\t    $file = File::Spec->rel2abs($file);\n\t}\n\t$file = IO::Handle::_open_mode_string($mode) . \" $file\\0\";\n    }\n    open($fh, $file);\n}\n\n################################################\n## Binmode\n##\n\nsub binmode {\n    ( @_ == 1 or @_ == 2 ) or croak \'usage $fh->binmode([LAYER])\';\n\n    my($fh, $layer) = @_;\n\n    return binmode $$fh unless $layer;\n    return binmode $$fh, $layer;\n}\n\n1;\n", 4096) = 1784
10184 20:03:52.779567 stat64("/etc/perl/File/Spec.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.779585 stat64("/etc/perl/File/Spec.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:52.779599 stat64("/usr/local/lib/perl/5.8.8/File/Spec.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.779612 stat64("/usr/local/lib/perl/5.8.8/File/Spec.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:52.779626 stat64("/usr/local/share/perl/5.8.8/File/Spec.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.779643 stat64("/usr/local/share/perl/5.8.8/File/Spec.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:52.779658 stat64("/usr/lib/perl5/File/Spec.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.779670 stat64("/usr/lib/perl5/File/Spec.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:52.779683 stat64("/usr/share/perl5/File/Spec.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.779696 stat64("/usr/share/perl5/File/Spec.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:52.779710 stat64("/usr/lib/perl/5.8/File/Spec.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.779723 stat64("/usr/lib/perl/5.8/File/Spec.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:52.779737 stat64("/usr/share/perl/5.8/File/Spec.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.779751 stat64("/usr/share/perl/5.8/File/Spec.pm", {st_mode=S_IFREG|0644, st_size=595, ...}) = 0
10184 20:03:52.779772 open("/usr/share/perl/5.8/File/Spec.pm", O_RDONLY|O_LARGEFILE) = 8
10184 20:03:52.779787 ioctl(8, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf81bde8) = -1 ENOTTY (Inappropriate ioctl for device)
10184 20:03:52.779799 _llseek(8, 0, [0], SEEK_CUR) = 0
10184 20:03:52.779823 read(8, "package File::Spec;\n\nuse strict;\nuse vars qw(@ISA $VERSION);\n\n$VERSION = \'3.12\';\n$VERSION = eval $VERSION;\n\nmy %module = (MacOS   => \'Mac\',\n\t      MSWin32 => \'Win32\',\n\t      os2     => \'OS2\',\n\t      VMS     => \'VMS\',\n\t      epoc    => \'Epoc\',\n\t      NetWare => \'Win32\', # Yes, File::Spec::Win32 works on NetWare.\n\t      symbian => \'Win32\', # Yes, File::Spec::Win32 works on symbian.\n\t      dos     => \'OS2\',   # Yes, File::Spec::OS2 works on DJGPP.\n\t      cygwin  => \'Cygwin\');\n\nmy $module = $module{$^O} || \'Unix\';\n\nrequire \"File/Spec/$module.pm\";\n@ISA = (\"File::Spec::$module\");\n\n1;\n\n__END__\n\n", 4096) = 595
10184 20:03:52.779899 stat64("/etc/perl/vars.pmc", 0xbf81bc1c) = -1 ENOENT (No such file or directory)
10184 20:03:52.779912 stat64("/etc/perl/vars.pm", 0xbf81bb2c) = -1 ENOENT (No such file or directory)
10184 20:03:52.779926 stat64("/usr/local/lib/perl/5.8.8/vars.pmc", 0xbf81bc1c) = -1 ENOENT (No such file or directory)
10184 20:03:52.779938 stat64("/usr/local/lib/perl/5.8.8/vars.pm", 0xbf81bb2c) = -1 ENOENT (No such file or directory)
10184 20:03:52.779952 stat64("/usr/local/share/perl/5.8.8/vars.pmc", 0xbf81bc1c) = -1 ENOENT (No such file or directory)
10184 20:03:52.779965 stat64("/usr/local/share/perl/5.8.8/vars.pm", 0xbf81bb2c) = -1 ENOENT (No such file or directory)
10184 20:03:52.779980 stat64("/usr/lib/perl5/vars.pmc", 0xbf81bc1c) = -1 ENOENT (No such file or directory)
10184 20:03:52.779992 stat64("/usr/lib/perl5/vars.pm", 0xbf81bb2c) = -1 ENOENT (No such file or directory)
10184 20:03:52.780015 stat64("/usr/share/perl5/vars.pmc", 0xbf81bc1c) = -1 ENOENT (No such file or directory)
10184 20:03:52.780028 stat64("/usr/share/perl5/vars.pm", 0xbf81bb2c) = -1 ENOENT (No such file or directory)
10184 20:03:52.780042 stat64("/usr/lib/perl/5.8/vars.pmc", 0xbf81bc1c) = -1 ENOENT (No such file or directory)
10184 20:03:52.780054 stat64("/usr/lib/perl/5.8/vars.pm", 0xbf81bb2c) = -1 ENOENT (No such file or directory)
10184 20:03:52.780069 stat64("/usr/share/perl/5.8/vars.pmc", 0xbf81bc1c) = -1 ENOENT (No such file or directory)
10184 20:03:52.780082 stat64("/usr/share/perl/5.8/vars.pm", {st_mode=S_IFREG|0644, st_size=1149, ...}) = 0
10184 20:03:52.780103 open("/usr/share/perl/5.8/vars.pm", O_RDONLY|O_LARGEFILE) = 10
10184 20:03:52.780117 ioctl(10, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf81b938) = -1 ENOTTY (Inappropriate ioctl for device)
10184 20:03:52.780128 _llseek(10, 0, [0], SEEK_CUR) = 0
10184 20:03:52.780145 read(10, "package vars;\n\nuse 5.006;\n\nour $VERSION = \'1.01\';\n\nuse warnings::register;\nuse strict qw(vars subs);\n\nsub import {\n    my $callpack = caller;\n    my ($pack, @imports) = @_;\n    my ($sym, $ch);\n    foreach (@imports) {\n        if (($ch, $sym) = /^([\\$\\@\\%\\*\\&])(.+)/) {\n\t    if ($sym =~ /\\W/) {\n\t\t# time for a more-detailed check-up\n\t\tif ($sym =~ /^\\w+[[{].*[]}]$/) {\n\t\t    require Carp;\n\t\t    Carp::croak(\"Can\'t declare individual elements of hash or array\");\n\t\t} elsif (warnings::enabled() and length($sym) == 1 and $sym !~ tr/a-zA-Z//) {\n\t\t    warnings::warn(\"No need to declare built-in vars\");\n\t\t} elsif  (($^H &= strict::bits(\'vars\'))) {\n\t\t    require Carp;\n\t\t    Carp::croak(\"\'$_\' is not a valid variable name under strict vars\");\n\t\t}\n\t    }\n\t    $sym = \"${callpack}::$sym\" unless $sym =~ /::/;\n\t    *$sym =\n\t\t(  $ch eq \"\\$\" ? \\$$sym\n\t\t : $ch eq \"\\@\" ? \\@$sym\n\t\t : $ch eq \"\\%\" ? \\%$sym\n\t\t : $ch eq \"\\*\" ? \\*$sym\n\t\t : $ch eq \"\\&\" ? \\&$sym \n\t\t : do {\n\t\t     require Carp;\n\t\t     Carp::croak(\"\'$_\' is not a valid variable name\");\n\t\t });\n\t} else {\n\t    require Carp;\n\t    Carp::croak(\"\'$_\' is not a valid variable name\");\n\t}\n    }\n};\n\n1;\n__END__\n\n", 4096) = 1149
10184 20:03:52.780263 stat64("/etc/perl/warnings/register.pmc", 0xbf81b76c) = -1 ENOENT (No such file or directory)
10184 20:03:52.780278 stat64("/etc/perl/warnings/register.pm", 0xbf81b67c) = -1 ENOENT (No such file or directory)
10184 20:03:52.780292 stat64("/usr/local/lib/perl/5.8.8/warnings/register.pmc", 0xbf81b76c) = -1 ENOENT (No such file or directory)
10184 20:03:52.780306 stat64("/usr/local/lib/perl/5.8.8/warnings/register.pm", 0xbf81b67c) = -1 ENOENT (No such file or directory)
10184 20:03:52.780320 stat64("/usr/local/share/perl/5.8.8/warnings/register.pmc", 0xbf81b76c) = -1 ENOENT (No such file or directory)
10184 20:03:52.780334 stat64("/usr/local/share/perl/5.8.8/warnings/register.pm", 0xbf81b67c) = -1 ENOENT (No such file or directory)
10184 20:03:52.780349 stat64("/usr/lib/perl5/warnings/register.pmc", 0xbf81b76c) = -1 ENOENT (No such file or directory)
10184 20:03:52.780361 stat64("/usr/lib/perl5/warnings/register.pm", 0xbf81b67c) = -1 ENOENT (No such file or directory)
10184 20:03:52.780375 stat64("/usr/share/perl5/warnings/register.pmc", 0xbf81b76c) = -1 ENOENT (No such file or directory)
10184 20:03:52.780388 stat64("/usr/share/perl5/warnings/register.pm", 0xbf81b67c) = -1 ENOENT (No such file or directory)
10184 20:03:52.780402 stat64("/usr/lib/perl/5.8/warnings/register.pmc", 0xbf81b76c) = -1 ENOENT (No such file or directory)
10184 20:03:52.780415 stat64("/usr/lib/perl/5.8/warnings/register.pm", 0xbf81b67c) = -1 ENOENT (No such file or directory)
10184 20:03:52.780430 stat64("/usr/share/perl/5.8/warnings/register.pmc", 0xbf81b76c) = -1 ENOENT (No such file or directory)
10184 20:03:52.780443 stat64("/usr/share/perl/5.8/warnings/register.pm", {st_mode=S_IFREG|0644, st_size=732, ...}) = 0
10184 20:03:52.780465 open("/usr/share/perl/5.8/warnings/register.pm", O_RDONLY|O_LARGEFILE) = 11
10184 20:03:52.780480 ioctl(11, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf81b488) = -1 ENOTTY (Inappropriate ioctl for device)
10184 20:03:52.780491 _llseek(11, 0, [0], SEEK_CUR) = 0
10184 20:03:52.780518 read(11, "package warnings::register;\n\nour $VERSION = \'1.01\';\n\nrequire warnings;\n\nsub mkMask\n{\n    my ($bit) = @_;\n    my $mask = \"\";\n\n    vec($mask, $bit, 1) = 1;\n    return $mask;\n}\n\nsub import\n{\n    shift;\n    my $package = (caller(0))[0];\n    if (! defined $warnings::Bits{$package}) {\n        $warnings::Bits{$package}     = mkMask($warnings::LAST_BIT);\n        vec($warnings::Bits{\'all\'}, $warnings::LAST_BIT, 1) = 1;\n        $warnings::Offsets{$package}  = $warnings::LAST_BIT ++;\n\tforeach my $k (keys %warnings::Bits) {\n\t    vec($warnings::Bits{$k}, $warnings::LAST_BIT, 1) = 0;\n\t}\n        $warnings::DeadBits{$package} = mkMask($warnings::LAST_BIT);\n        vec($warnings::DeadBits{\'all\'}, $warnings::LAST_BIT++, 1) = 1;\n    }\n}\n\n1;\n", 4096) = 732
10184 20:03:52.780667 read(11, "", 4096) = 0
10184 20:03:52.780680 close(11)         = 0
10184 20:03:52.780879 _llseek(10, 1148, [1148], SEEK_SET) = 0
10184 20:03:52.780900 _llseek(10, 0, [1148], SEEK_CUR) = 0
10184 20:03:52.780910 close(10)         = 0
10184 20:03:52.780980 _llseek(8, 594, [594], SEEK_SET) = 0
10184 20:03:52.781003 _llseek(8, 0, [594], SEEK_CUR) = 0
10184 20:03:52.781015 close(8)          = 0
10184 20:03:52.781050 stat64("/etc/perl/File/Spec/Unix.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.781066 stat64("/etc/perl/File/Spec/Unix.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:52.781080 stat64("/usr/local/lib/perl/5.8.8/File/Spec/Unix.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.781093 stat64("/usr/local/lib/perl/5.8.8/File/Spec/Unix.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:52.781108 stat64("/usr/local/share/perl/5.8.8/File/Spec/Unix.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.781121 stat64("/usr/local/share/perl/5.8.8/File/Spec/Unix.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:52.781136 stat64("/usr/lib/perl5/File/Spec/Unix.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.781148 stat64("/usr/lib/perl5/File/Spec/Unix.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:52.781163 stat64("/usr/share/perl5/File/Spec/Unix.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.781175 stat64("/usr/share/perl5/File/Spec/Unix.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:52.781189 stat64("/usr/lib/perl/5.8/File/Spec/Unix.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.781203 stat64("/usr/lib/perl/5.8/File/Spec/Unix.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:52.781217 stat64("/usr/share/perl/5.8/File/Spec/Unix.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.781230 stat64("/usr/share/perl/5.8/File/Spec/Unix.pm", {st_mode=S_IFREG|0644, st_size=7038, ...}) = 0
10184 20:03:52.781252 open("/usr/share/perl/5.8/File/Spec/Unix.pm", O_RDONLY|O_LARGEFILE) = 8
10184 20:03:52.781268 ioctl(8, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf81bde8) = -1 ENOTTY (Inappropriate ioctl for device)
10184 20:03:52.781280 _llseek(8, 0, [0], SEEK_CUR) = 0
10184 20:03:52.781298 read(8, "package File::Spec::Unix;\n\nuse strict;\nuse vars qw($VERSION);\n\n$VERSION = \'1.5\';\n\nsub canonpath {\n    my ($self,$path) = @_;\n    \n    # Handle POSIX-style node names beginning with double slash (qnx, nto)\n    # Handle network path names beginning with double slash (cygwin)\n    # (POSIX says: \"a pathname that begins with two successive slashes\n    # may be interpreted in an implementation-defined manner, although\n    # more than two leading slashes shall be treated as a single slash.\")\n    my $node = \'\';\n    if ( $^O =~ m/^(?:qnx|nto|cygwin)$/ && $path =~ s:^(//[^/]+)(/|\\z):/:s ) {\n      $node = $1;\n    }\n    # This used to be\n    # $path =~ s|/+|/|g unless($^O eq \'cygwin\');\n    # but that made tests 29, 30, 35, 46, and 213 (as of #13272) to fail\n    # (Mainly because trailing \"\" directories didn\'t get stripped).\n    # Why would cygwin avoid collapsing multiple slashes into one? --jhi\n    $path =~ s|/+|/|g;                             # xx////xx  -> xx/xx\n    $path =~ s@(/\\.)+(/|\\Z(?!\\n))@/@g;             # xx/././xx -> xx/xx\n    $path =~ s|^(\\./)+||s unless $path eq \"./\";    # ./xx      -> xx\n    $path =~ s|^/(\\.\\./)+|/|;                      # /../../xx -> xx\n    $path =~ s|^/\\.\\.$|/|;                         # /..       -> /\n    $path =~ s|/\\Z(?!\\n)|| unless $path eq \"/\";          # xx/       -> xx\n    return \"$node$path\";\n}\n\nsub catdir {\n    my $self = shift;\n\n    $self->canonpath(join(\'/\', @_, \'\')); # \'\' because need a trailing \'/\'\n}\n\nsub catfile {\n    my $self = shift;\n    my $file = $self->canonpath(pop @_);\n    return $file unless @_;\n    my $dir = $self->catdir(@_);\n    $dir .= \"/\" unless substr($dir,-1) eq \"/\";\n    return $dir.$file;\n}\n\nsub curdir () { \'.\' }\n\nsub devnull () { \'/dev/null\' }\n\nsub rootdir () { \'/\' }\n\nmy $tmpdir;\nsub _tmpdir {\n    return $tmpdir if defined $tmpdir;\n    my $self = shift;\n    my @dirlist = @_;\n    {\n\tno strict \'refs\';\n\tif (${\"\\cTAINT\"}) { # Check for taint mode on perl >= 5.8.0\n            require Scalar::Util;\n\t    @dirlist = grep { ! Scalar::Util::tainted($_) } @dirlist;\n\t}\n    }\n    foreach (@dirlist) {\n\tnext unless defined && -d && -w _;\n\t$tmpdir = $_;\n\tlast;\n    }\n    $tmpdir = $self->curdir unless defined $tmpdir;\n    $tmpdir = defined $tmpdir && $self->canonpath($tmpdir);\n    return $tmpdir;\n}\n\nsub tmpdir {\n    return $tmpdir if defined $tmpdir;\n    $tmpdir = $_[0]->_tmpdir( $ENV{TMPDIR}, \"/tmp\" );\n}\n\nsub updir () { \'..\' }\n\nsub no_upwards {\n    my $self = shift;\n    return grep(!/^\\.{1,2}\\Z(?!\\n)/s, @_);\n}\n\nsub case_tolerant () { 0 }\n\nsub file_name_is_absolute {\n    my ($self,$file) = @_;\n    return scalar($file =~ m:^/:s);\n}\n\nsub path {\n    return () unless exists $ENV{PATH};\n    my @path = split(\':\', $ENV{PATH});\n    foreach (@path) { $_ = \'.\' if $_ eq \'\' }\n    return @path;\n}\n\nsub join {\n    my $self = shift;\n    return $self->catfile(@_);\n}\n\nsub splitpath {\n    my ($self,$path, $nofile) = @_;\n\n    my ($volume,$directory,$file) = (\'\',\'\',\'\');\n\n    if ( $nofile ) {\n        $directory = $path;\n    }\n    else {\n        $path =~ m|^ ( (?: .* / (?: \\.\\.?\\Z(?!\\n) )? )? ) ([^/]*) |xs;\n        $directory = $1;\n        $file      = $2;\n    }\n\n    return ($volume,$directory,$file);\n}\n\nsub splitdir {\n    return split m|/|, $_[1], -1;  # Preserve trailing fields\n}\n\nsub catpath {\n    my ($self,$volume,$directory,$file) = @_;\n\n    if ( $directory ne \'\'                && \n         $file ne \'\'                     && \n         substr( $directory, -1 ) ne \'/\' && \n         substr( $file, 0, 1 ) ne \'/\' \n    ) {\n        $directory .= \"/$file\" ;\n    }\n    else {\n        $directory .= $file ;\n    }\n\n    return $directory ;\n}\n\nsub abs2rel {\n    my($self,$path,$base) = @_;\n\n    # Figure out the effective $base and clean it up.\n    if ( !defined( $base ) || $base eq \'\' ) {\n        $base = $self->_cwd();\n    }\n    elsif ( ! $self->file_name_is_absolute( $base ) ) {\n\tif ( ! $self->file_name_is_absolute( $path ) ) {\n\t    # optimisation where both paths are relative: save 2 x cwd\n\t    $base = $self->canonpath( \"/$base\" );\n\t    $path = \"/$path\";\n\t}\n\telse {\n\t    $base = $self->rel2abs( $base ) ;\n\t}\n    }\n  ", 4096) = 4096
10184 20:03:52.781928 brk(0x8218000)    = 0x8218000
10184 20:03:52.782074 read(8, "  else {\n        $base = $self->canonpath( $base ) ;\n    }\n\n    # Clean up $path\n    if ( ! $self->file_name_is_absolute( $path ) ) {\n        $path = $self->rel2abs( $path ) ;\n    }\n    else {\n        $path = $self->canonpath( $path ) ;\n    }\n\n    # Now, remove all leading components that are the same\n    my @pathchunks = $self->splitdir( $path);\n    my @basechunks = $self->splitdir( $base);\n\n    while (@pathchunks && @basechunks && $pathchunks[0] eq $basechunks[0]) {\n        shift @pathchunks ;\n        shift @basechunks ;\n    }\n\n    $path = CORE::join( \'/\', @pathchunks );\n    $base = CORE::join( \'/\', @basechunks );\n\n    # $base now contains the directories the resulting relative path \n    # must ascend out of before it can descend to $path_directory.  So, \n    # replace all names with $parentDir\n    $base =~ s|[^/]+|..|g ;\n\n    # Glue the two together, using a separator if necessary, and preventing an\n    # empty result.\n    if ( $path ne \'\' && $base ne \'\' ) {\n        $path = \"$base/$path\" ;\n    } else {\n        $path = \"$base$path\" ;\n    }\n\n    return $self->canonpath( $path ) ;\n}\n\nsub rel2abs {\n    my ($self,$path,$base ) = @_;\n\n    # Clean up $path\n    if ( ! $self->file_name_is_absolute( $path ) ) {\n        # Figure out the effective $base and clean it up.\n        if ( !defined( $base ) || $base eq \'\' ) {\n\t    $base = $self->_cwd();\n        }\n        elsif ( ! $self->file_name_is_absolute( $base ) ) {\n            $base = $self->rel2abs( $base ) ;\n        }\n        else {\n            $base = $self->canonpath( $base ) ;\n        }\n\n        # Glom them together\n        $path = $self->catdir( $base, $path ) ;\n    }\n\n    return $self->canonpath( $path ) ;\n}\n\n# Internal routine to File::Spec, no point in making this public since\n# it is the standard Cwd interface.  Most of the platform-specific\n# File::Spec subclasses use this.\nsub _cwd {\n    require Cwd;\n    Cwd::cwd();\n}\n\n# Internal method to reduce xx\\..\\yy -> yy\nsub _collapse {\n    my($fs, $path) = @_;\n\n    my $updir  = $fs->updir;\n    my $curdir = $fs->curdir;\n\n    my($vol, $dirs, $file) = $fs->splitpath($path);\n    my @dirs = $fs->splitdir($dirs);\n\n    my @collapsed;\n    foreach my $dir (@dirs) {\n        if( $dir eq $updir              and   # if we have an updir\n            @collapsed                  and   # and something to collapse\n            length $collapsed[-1]       and   # and its not the rootdir\n            $collapsed[-1] ne $updir    and   # nor another updir\n            $collapsed[-1] ne $curdir         # nor the curdir\n          ) \n        {                                     # then\n            pop @collapsed;                   # collapse\n        }\n        else {                                # else\n            push @collapsed, $dir;            # just hang onto it\n        }\n    }\n\n    return $fs->catpath($vol,\n                        $fs->catdir(@collapsed),\n                        $file\n                       );\n}\n\n1;\n", 4096) = 2942
10184 20:03:52.782456 read(8, "", 4096) = 0
10184 20:03:52.782471 close(8)          = 0
10184 20:03:52.782674 read(6, "", 4096) = 0
10184 20:03:52.782690 close(6)          = 0
10184 20:03:52.782858 stat64("/etc/perl/IO/Pipe.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:52.782875 stat64("/etc/perl/IO/Pipe.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:52.782890 stat64("/usr/local/lib/perl/5.8.8/IO/Pipe.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:52.782903 stat64("/usr/local/lib/perl/5.8.8/IO/Pipe.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:52.782918 stat64("/usr/local/share/perl/5.8.8/IO/Pipe.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:52.782930 stat64("/usr/local/share/perl/5.8.8/IO/Pipe.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:52.782945 stat64("/usr/lib/perl5/IO/Pipe.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:52.782956 stat64("/usr/lib/perl5/IO/Pipe.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:52.782970 stat64("/usr/share/perl5/IO/Pipe.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:52.782982 stat64("/usr/share/perl5/IO/Pipe.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:52.783006 stat64("/usr/lib/perl/5.8/IO/Pipe.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:52.783020 stat64("/usr/lib/perl/5.8/IO/Pipe.pm", {st_mode=S_IFREG|0644, st_size=3426, ...}) = 0
10184 20:03:52.783042 open("/usr/lib/perl/5.8/IO/Pipe.pm", O_RDONLY|O_LARGEFILE) = 6
10184 20:03:52.783057 ioctl(6, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf81c298) = -1 ENOTTY (Inappropriate ioctl for device)
10184 20:03:52.783069 _llseek(6, 0, [0], SEEK_CUR) = 0
10184 20:03:52.783090 read(6, "# IO::Pipe.pm\n#\n# Copyright (c) 1996-8 Graham Barr <gbarr@pobox.com>. All rights reserved.\n# This program is free software; you can redistribute it and/or\n# modify it under the same terms as Perl itself.\n\npackage IO::Pipe;\n\nuse 5.006_001;\n\nuse IO::Handle;\nuse strict;\nour($VERSION);\nuse Carp;\nuse Symbol;\n\n$VERSION = \"1.13\";\n\nsub new {\n    my $type = shift;\n    my $class = ref($type) || $type || \"IO::Pipe\";\n    @_ == 0 || @_ == 2 or croak \"usage: new $class [READFH, WRITEFH]\";\n\n    my $me = bless gensym(), $class;\n\n    my($readfh,$writefh) = @_ ? @_ : $me->handles;\n\n    pipe($readfh, $writefh)\n\tor return undef;\n\n    @{*$me} = ($readfh, $writefh);\n\n    $me;\n}\n\nsub handles {\n    @_ == 1 or croak \'usage: $pipe->handles()\';\n    (IO::Pipe::End->new(), IO::Pipe::End->new());\n}\n\nmy $do_spawn = $^O eq \'os2\' || $^O eq \'MSWin32\';\n\nsub _doit {\n    my $me = shift;\n    my $rw = shift;\n\n    my $pid = $do_spawn ? 0 : fork();\n\n    if($pid) { # Parent\n        return $pid;\n    }\n    elsif(defined $pid) { # Child or spawn\n        my $fh;\n        my $io = $rw ? \\*STDIN : \\*STDOUT;\n        my ($mode, $save) = $rw ? \"r\" : \"w\";\n        if ($do_spawn) {\n          require Fcntl;\n          $save = IO::Handle->new_from_fd($io, $mode);\n\t  my $handle = shift;\n          # Close in child:\n\t  unless ($^O eq \'MSWin32\') {\n            fcntl($handle, Fcntl::F_SETFD(), 1) or croak \"fcntl: $!\";\n\t  }\n          $fh = $rw ? ${*$me}[0] : ${*$me}[1];\n        } else {\n          shift;\n          $fh = $rw ? $me->reader() : $me->writer(); # close the other end\n        }\n        bless $io, \"IO::Handle\";\n        $io->fdopen($fh, $mode);\n\t$fh->close;\n\n        if ($do_spawn) {\n          $pid = eval { system 1, @_ }; # 1 == P_NOWAIT\n          my $err = $!;\n    \n          $io->fdopen($save, $mode);\n          $save->close or croak \"Cannot close $!\";\n          croak \"IO::Pipe: Cannot spawn-NOWAIT: $err\" if not $pid or $pid < 0;\n          return $pid;\n        } else {\n          exec @_ or\n            croak \"IO::Pipe: Cannot exec: $!\";\n        }\n    }\n    else {\n        croak \"IO::Pipe: Cannot fork: $!\";\n    }\n\n    # NOT Reached\n}\n\nsub reader {\n    @_ >= 1 or croak \'usage: $pipe->reader( [SUB_COMMAND_ARGS] )\';\n    my $me = shift;\n\n    return undef\n\tunless(ref($me) || ref($me = $me->new));\n\n    my $fh  = ${*$me}[0];\n    my $pid;\n    $pid = $me->_doit(0, $fh, @_)\n        if(@_);\n\n    close ${*$me}[1];\n    bless $me, ref($fh);\n    *$me = *$fh;          # Alias self to handle\n    $me->fdopen($fh->fileno,\"r\")\n\tunless defined($me->fileno);\n    bless $fh;                  # Really wan\'t un-bless here\n    ${*$me}{\'io_pipe_pid\'} = $pid\n        if defined $pid;\n\n    $me;\n}\n\nsub writer {\n    @_ >= 1 or croak \'usage: $pipe->writer( [SUB_COMMAND_ARGS] )\';\n    my $me = shift;\n\n    return undef\n\tunless(ref($me) || ref($me = $me->new));\n\n    my $fh  = ${*$me}[1];\n    my $pid;\n    $pid = $me->_doit(1, $fh, @_)\n        if(@_);\n\n    close ${*$me}[0];\n    bless $me, ref($fh);\n    *$me = *$fh;          # Alias self to handle\n    $me->fdopen($fh->fileno,\"w\")\n\tunless defined($me->fileno);\n    bless $fh;                  # Really wan\'t un-bless here\n    ${*$me}{\'io_pipe_pid\'} = $pid\n        if defined $pid;\n\n    $me;\n}\n\npackage IO::Pipe::End;\n\nour(@ISA);\n\n@ISA = qw(IO::Handle);\n\nsub close {\n    my $fh = shift;\n    my $r = $fh->SUPER::close(@_);\n\n    waitpid(${*$fh}{\'io_pipe_pid\'},0)\n\tif(defined ${*$fh}{\'io_pipe_pid\'});\n\n    $r;\n}\n\n1;\n\n__END__\n\n", 4096) = 3426
10184 20:03:52.783747 _llseek(6, 3425, [3425], SEEK_SET) = 0
10184 20:03:52.783766 _llseek(6, 0, [3425], SEEK_CUR) = 0
10184 20:03:52.783777 close(6)          = 0
10184 20:03:52.783801 stat64("/etc/perl/IO/Socket.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:52.783816 stat64("/etc/perl/IO/Socket.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:52.783830 stat64("/usr/local/lib/perl/5.8.8/IO/Socket.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:52.783843 stat64("/usr/local/lib/perl/5.8.8/IO/Socket.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:52.783857 stat64("/usr/local/share/perl/5.8.8/IO/Socket.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:52.783870 stat64("/usr/local/share/perl/5.8.8/IO/Socket.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:52.783884 stat64("/usr/lib/perl5/IO/Socket.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:52.783897 stat64("/usr/lib/perl5/IO/Socket.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:52.783914 stat64("/usr/share/perl5/IO/Socket.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:52.783927 stat64("/usr/share/perl5/IO/Socket.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:52.783940 stat64("/usr/lib/perl/5.8/IO/Socket.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:52.783953 stat64("/usr/lib/perl/5.8/IO/Socket.pm", {st_mode=S_IFREG|0644, st_size=6699, ...}) = 0
10184 20:03:52.783975 open("/usr/lib/perl/5.8/IO/Socket.pm", O_RDONLY|O_LARGEFILE) = 6
10184 20:03:52.783999 ioctl(6, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf81c298) = -1 ENOTTY (Inappropriate ioctl for device)
10184 20:03:52.784012 _llseek(6, 0, [0], SEEK_CUR) = 0
10184 20:03:52.784030 read(6, "# IO::Socket.pm\n#\n# Copyright (c) 1997-8 Graham Barr <gbarr@pobox.com>. All rights reserved.\n# This program is free software; you can redistribute it and/or\n# modify it under the same terms as Perl itself.\n\npackage IO::Socket;\n\nrequire 5.006;\n\nuse IO::Handle;\nuse Socket 1.3;\nuse Carp;\nuse strict;\nour(@ISA, $VERSION, @EXPORT_OK);\nuse Exporter;\nuse Errno;\n\n# legacy\n\nrequire IO::Socket::INET;\nrequire IO::Socket::UNIX if ($^O ne \'epoc\' && $^O ne \'symbian\');\n\n@ISA = qw(IO::Handle);\n\n$VERSION = \"1.29\";\n\n@EXPORT_OK = qw(sockatmark);\n\nsub import {\n    my $pkg = shift;\n    if (@_ && $_[0] eq \'sockatmark\') { # not very extensible but for now, fast\n\tExporter::export_to_level(\'IO::Socket\', 1, $pkg, \'sockatmark\');\n    } else {\n\tmy $callpkg = caller;\n\tExporter::export \'Socket\', $callpkg, @_;\n    }\n}\n\nsub new {\n    my($class,%arg) = @_;\n    my $sock = $class->SUPER::new();\n\n    $sock->autoflush(1);\n\n    ${*$sock}{\'io_socket_timeout\'} = delete $arg{Timeout};\n\n    return scalar(%arg) ? $sock->configure(\\%arg)\n\t\t\t: $sock;\n}\n\nmy @domain2pkg;\n\nsub register_domain {\n    my($p,$d) = @_;\n    $domain2pkg[$d] = $p;\n}\n\nsub configure {\n    my($sock,$arg) = @_;\n    my $domain = delete $arg->{Domain};\n\n    croak \'IO::Socket: Cannot configure a generic socket\'\n\tunless defined $domain;\n\n    croak \"IO::Socket: Unsupported socket domain\"\n\tunless defined $domain2pkg[$domain];\n\n    croak \"IO::Socket: Cannot configure socket in domain \'$domain\'\"\n\tunless ref($sock) eq \"IO::Socket\";\n\n    bless($sock, $domain2pkg[$domain]);\n    $sock->configure($arg);\n}\n\nsub socket {\n    @_ == 4 or croak \'usage: $sock->socket(DOMAIN, TYPE, PROTOCOL)\';\n    my($sock,$domain,$type,$protocol) = @_;\n\n    socket($sock,$domain,$type,$protocol) or\n    \treturn undef;\n\n    ${*$sock}{\'io_socket_domain\'} = $domain;\n    ${*$sock}{\'io_socket_type\'}   = $type;\n    ${*$sock}{\'io_socket_proto\'}  = $protocol;\n\n    $sock;\n}\n\nsub socketpair {\n    @_ == 4 || croak \'usage: IO::Socket->socketpair(DOMAIN, TYPE, PROTOCOL)\';\n    my($class,$domain,$type,$protocol) = @_;\n    my $sock1 = $class->new();\n    my $sock2 = $class->new();\n\n    socketpair($sock1,$sock2,$domain,$type,$protocol) or\n    \treturn ();\n\n    ${*$sock1}{\'io_socket_type\'}  = ${*$sock2}{\'io_socket_type\'}  = $type;\n    ${*$sock1}{\'io_socket_proto\'} = ${*$sock2}{\'io_socket_proto\'} = $protocol;\n\n    ($sock1,$sock2);\n}\n\nsub connect {\n    @_ == 2 or croak \'usage: $sock->connect(NAME)\';\n    my $sock = shift;\n    my $addr = shift;\n    my $timeout = ${*$sock}{\'io_socket_timeout\'};\n    my $err;\n    my $blocking;\n\n    $blocking = $sock->blocking(0) if $timeout;\n    if (!connect($sock, $addr)) {\n\tif (defined $timeout && $!{EINPROGRESS}) {\n\t    require IO::Select;\n\n\t    my $sel = new IO::Select $sock;\n\n\t    if (!$sel->can_write($timeout)) {\n\t\t$err = $! || (exists &Errno::ETIMEDOUT ? &Errno::ETIMEDOUT : 1);\n\t\t$@ = \"connect: timeout\";\n\t    }\n\t    elsif (!connect($sock,$addr) && not $!{EISCONN}) {\n\t\t# Some systems refuse to re-connect() to\n\t\t# an already open socket and set errno to EISCONN.\n\t\t$err = $!;\n\t\t$@ = \"connect: $!\";\n\t    }\n\t}\n        elsif ($blocking || !$!{EINPROGRESS})  {\n\t    $err = $!;\n\t    $@ = \"connect: $!\";\n\t}\n    }\n\n    $sock->blocking(1) if $blocking;\n\n    $! = $err if $err;\n\n    $err ? undef : $sock;\n}\n\nsub bind {\n    @_ == 2 or croak \'usage: $sock->bind(NAME)\';\n    my $sock = shift;\n    my $addr = shift;\n\n    return bind($sock, $addr) ? $sock\n\t\t\t      : undef;\n}\n\nsub listen {\n    @_ >= 1 && @_ <= 2 or croak \'usage: $sock->listen([QUEUE])\';\n    my($sock,$queue) = @_;\n    $queue = 5\n\tunless $queue && $queue > 0;\n\n    return listen($sock, $queue) ? $sock\n\t\t\t\t : undef;\n}\n\nsub accept {\n    @_ == 1 || @_ == 2 or croak \'usage $sock->accept([PKG])\';\n    my $sock = shift;\n    my $pkg = shift || $sock;\n    my $timeout = ${*$sock}{\'io_socket_timeout\'};\n    my $new = $pkg->new(Timeout => $timeout);\n    my $peer = undef;\n\n    if(defined $timeout) {\n\trequire IO::Select;\n\n\tmy $sel = new IO::Select $sock;\n\n\tunless ($sel->can_read($timeout)) {\n\t    $@ = \'accept: timeout\';\n\t    $! = (exists &Errno::ETIMEDOUT ? &Errno::ETIMEDOUT : 1);\n\t    return;\n\t}\n", 4096) = 4096
10184 20:03:52.784354 stat64("/etc/perl/Socket.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.784370 stat64("/etc/perl/Socket.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:52.784384 stat64("/usr/local/lib/perl/5.8.8/Socket.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.784397 stat64("/usr/local/lib/perl/5.8.8/Socket.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:52.784411 stat64("/usr/local/share/perl/5.8.8/Socket.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.784423 stat64("/usr/local/share/perl/5.8.8/Socket.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:52.784438 stat64("/usr/lib/perl5/Socket.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.784450 stat64("/usr/lib/perl5/Socket.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:52.784463 stat64("/usr/share/perl5/Socket.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.784475 stat64("/usr/share/perl5/Socket.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:52.784497 stat64("/usr/lib/perl/5.8/Socket.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:52.784510 stat64("/usr/lib/perl/5.8/Socket.pm", {st_mode=S_IFREG|0644, st_size=3514, ...}) = 0
10184 20:03:52.784531 open("/usr/lib/perl/5.8/Socket.pm", O_RDONLY|O_LARGEFILE) = 8
10184 20:03:52.784546 ioctl(8, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf81bde8) = -1 ENOTTY (Inappropriate ioctl for device)
10184 20:03:52.784557 _llseek(8, 0, [0], SEEK_CUR) = 0
10184 20:03:52.784575 read(8, "package Socket;\n\nour($VERSION, @ISA, @EXPORT, @EXPORT_OK, %EXPORT_TAGS);\n$VERSION = \"1.78\";\n\nuse Carp;\nuse warnings::register;\n\nrequire Exporter;\nuse XSLoader ();\n@ISA = qw(Exporter);\n@EXPORT = qw(\n\tinet_aton inet_ntoa\n\tsockaddr_family\n\tpack_sockaddr_in unpack_sockaddr_in\n\tpack_sockaddr_un unpack_sockaddr_un\n\tsockaddr_in sockaddr_un\n\tINADDR_ANY INADDR_BROADCAST INADDR_LOOPBACK INADDR_NONE\n\tAF_802\n\tAF_AAL\n\tAF_APPLETALK\n\tAF_CCITT\n\tAF_CHAOS\n\tAF_CTF\n\tAF_DATAKIT\n\tAF_DECnet\n\tAF_DLI\n\tAF_ECMA\n\tAF_GOSIP\n\tAF_HYLINK\n\tAF_IMPLINK\n\tAF_INET\n\tAF_INET6\n\tAF_ISO\n\tAF_KEY\n\tAF_LAST\n\tAF_LAT\n\tAF_LINK\n\tAF_MAX\n\tAF_NBS\n\tAF_NIT\n\tAF_NS\n\tAF_OSI\n\tAF_OSINET\n\tAF_PUP\n\tAF_ROUTE\n\tAF_SNA\n\tAF_UNIX\n\tAF_UNSPEC\n\tAF_USER\n\tAF_WAN\n\tAF_X25\n\tIOV_MAX\n\tMSG_BCAST\n\tMSG_BTAG\n\tMSG_CTLFLAGS\n\tMSG_CTLIGNORE\n\tMSG_CTRUNC\n\tMSG_DONTROUTE\n\tMSG_DONTWAIT\n\tMSG_EOF\n\tMSG_EOR\n\tMSG_ERRQUEUE\n\tMSG_ETAG\n\tMSG_FIN\n\tMSG_MAXIOVLEN\n\tMSG_MCAST\n\tMSG_NOSIGNAL\n\tMSG_OOB\n\tMSG_PEEK\n\tMSG_PROXY\n\tMSG_RST\n\tMSG_SYN\n\tMSG_TRUNC\n\tMSG_URG\n\tMSG_WAITALL\n\tMSG_WIRE\n\tPF_802\n\tPF_AAL\n\tPF_APPLETALK\n\tPF_CCITT\n\tPF_CHAOS\n\tPF_CTF\n\tPF_DATAKIT\n\tPF_DECnet\n\tPF_DLI\n\tPF_ECMA\n\tPF_GOSIP\n\tPF_HYLINK\n\tPF_IMPLINK\n\tPF_INET\n\tPF_INET6\n\tPF_ISO\n\tPF_KEY\n\tPF_LAST\n\tPF_LAT\n\tPF_LINK\n\tPF_MAX\n\tPF_NBS\n\tPF_NIT\n\tPF_NS\n\tPF_OSI\n\tPF_OSINET\n\tPF_PUP\n\tPF_ROUTE\n\tPF_SNA\n\tPF_UNIX\n\tPF_UNSPEC\n\tPF_USER\n\tPF_WAN\n\tPF_X25\n\tSCM_CONNECT\n\tSCM_CREDENTIALS\n\tSCM_CREDS\n\tSCM_RIGHTS\n\tSCM_TIMESTAMP\n\tSHUT_RD\n\tSHUT_RDWR\n\tSHUT_WR\n\tSOCK_DGRAM\n\tSOCK_RAW\n\tSOCK_RDM\n\tSOCK_SEQPACKET\n\tSOCK_STREAM\n\tSOL_SOCKET\n\tSOMAXCONN\n\tSO_ACCEPTCONN\n\tSO_ATTACH_FILTER\n\tSO_BACKLOG\n\tSO_BROADCAST\n\tSO_CHAMELEON\n\tSO_DEBUG\n\tSO_DETACH_FILTER\n\tSO_DGRAM_ERRIND\n\tSO_DONTLINGER\n\tSO_DONTROUTE\n\tSO_ERROR\n\tSO_FAMILY\n\tSO_KEEPALIVE\n\tSO_LINGER\n\tSO_OOBINLINE\n\tSO_PASSCRED\n\tSO_PASSIFNAME\n\tSO_PEERCRED\n\tSO_PROTOCOL\n\tSO_PROTOTYPE\n\tSO_RCVBUF\n\tSO_RCVLOWAT\n\tSO_RCVTIMEO\n\tSO_REUSEADDR\n\tSO_REUSEPORT\n\tSO_SECURITY_AUTHENTICATION\n\tSO_SECURITY_ENCRYPTION_NETWORK\n\tSO_SECURITY_ENCRYPTION_TRANSPORT\n\tSO_SNDBUF\n\tSO_SNDLOWAT\n\tSO_SNDTIMEO\n\tSO_STATE\n\tSO_TYPE\n\tSO_USELOOPBACK\n\tSO_XOPEN\n\tSO_XSE\n\tUIO_MAXIOV\n);\n\n@EXPORT_OK = qw(CR LF CRLF $CR $LF $CRLF\n\n\t       IPPROTO_TCP\n\t       TCP_KEEPALIVE\n\t       TCP_MAXRT\n\t       TCP_MAXSEG\n\t       TCP_NODELAY\n\t       TCP_STDURG);\n\n%EXPORT_TAGS = (\n    crlf    => [qw(CR LF CRLF $CR $LF $CRLF)],\n    all     => [@EXPORT, @EXPORT_OK],\n);\n\nBEGIN {\n    sub CR   () {\"\\015\"}\n    sub LF   () {\"\\012\"}\n    sub CRLF () {\"\\015\\012\"}\n}\n\n*CR   = \\CR();\n*LF   = \\LF();\n*CRLF = \\CRLF();\n\nsub sockaddr_in {\n    if (@_ == 6 && !wantarray) { # perl5.001m compat; use this && die\n\tmy($af, $port, @quad) = @_;\n\twarnings::warn \"6-ARG sockaddr_in call is deprecated\" \n\t    if warnings::enabled();\n\tpack_sockaddr_in($port, inet_aton(join(\'.\', @quad)));\n    } elsif (wantarray) {\n\tcroak \"usage:   (port,iaddr) = sockaddr_in(sin_sv)\" unless @_ == 1;\n        unpack_sockaddr_in(@_);\n    } else {\n\tcroak \"usage:   sin_sv = sockaddr_in(port,iaddr))\" unless @_ == 2;\n        pack_sockaddr_in(@_);\n    }\n}\n\nsub sockaddr_un {\n    if (wantarray) {\n\tcroak \"usage:   (filename) = sockaddr_un(sun_sv)\" unless @_ == 1;\n        unpack_sockaddr_un(@_);\n    } else {\n\tcroak \"usage:   sun_sv = sockaddr_un(filename)\" unless @_ == 1;\n        pack_sockaddr_un(@_);\n    }\n}\n\nsub AUTOLOAD {\n    my($constname);\n    ($constname = $AUTOLOAD) =~ s/.*:://;\n    croak \"&Socket::constant not defined\" if $constname eq \'constant\';\n    my ($error, $val) = constant($constname);\n    if ($error) {\n\tcroak $error;\n    }\n    *$AUTOLOAD = sub { $val };\n    goto &$AUTOLOAD;\n}\n\nXSLoader::load \'Socket\', $VERSION;\n\n1;\n", 4096) = 3514
10184 20:03:52.784976 brk(0x8239000)    = 0x8239000
10184 20:03:52.785270 read(8, "", 4096) = 0
10184 20:03:52.785286 close(8)          = 0
10184 20:03:52.785378 stat64("/usr/lib/perl/5.8/auto/Socket/Socket.so", {st_mode=S_IFREG|0644, st_size=19676, ...}) = 0
10184 20:03:52.785405 stat64("/usr/lib/perl/5.8/auto/Socket/Socket.bs", {st_mode=S_IFREG|0644, st_size=0, ...}) = 0
10184 20:03:52.785433 open("/usr/lib/perl/5.8/auto/Socket/Socket.so", O_RDONLY) = 8
10184 20:03:52.785458 read(8, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0\360\16\0\0004\0\0\0\34I\0\0\0\0\0\0004\0 \0\4\0(\0\30\0\27\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\264F\0\0\264F\0\0\5\0\0\0\0\20\0\0\1\0\0\0\264F\0\0\264V\0\0\264V\0\0\274\1\0\0\300\1\0\0\6\0\0\0\0\20\0\0\2\0\0\0\310F\0\0\310V\0\0\310V\0\0\310\0\0\0\310\0\0\0\6\0\0\0\4\0\0\0Q\345td\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\4\0\0\0%\0\0\0008\0\0\0\0\0\0\0\10\0\0\0\22\0\0\0\35\0\0\0\0\0\0\0)\0\0\0\0\0\0\0\0\0\0\0\7\0\0\0\37\0\0\0\0\0\0\0\0\0\0\0007\0\0\0$\0\0\0-\0\0\0(\0\0\0\36\0\0\0\n\0\0\0,\0\0\0001\0\0\0 \0\0\0\0\0\0\0000\0\0\0\0\0\0\0005\0\0\0!\0\0\0\0\0\0\0\30\0\0\0002\0\0\0\27\0\0\0\'\0\0\0+\0\0\0\f\0\0\0\0\0\0\0.\0\0\0/\0\0\0&\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0*\0\0\0\0\0\0\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\4\0\0\0\17\0\0\0\0\0\0\0\6\0\0\0\20\0\0\0\0\0\0\0\21\0\0\0\24\0\0\0\26\0\0\0\0\0\0\0\23\0\0\0\0\0\0\0\25\0\0\0\0\0\0\0\0\0\0\0\r\0\0\0\0\0\0\0\31\0\0\0003\0\0\0\0\0\0\0\34\0\0\0\0\0\0\0\0\0\0\0%\0\0\0#\0\0\0\5\0\0\0004\0\0\0\0\0\0\0\33\0\0\0", 512) = 512
10184 20:03:52.785554 fstat64(8, {st_mode=S_IFREG|0644, st_size=19676, ...}) = 0
10184 20:03:52.785574 mmap2(NULL, 22644, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 8, 0) = 0xb7ddf000
10184 20:03:52.785588 mmap2(0xb7de4000, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 8, 0x4) = 0xb7de4000
10184 20:03:52.785603 close(8)          = 0
10184 20:03:52.786234 brk(0x825a000 <unfinished ...>
10182 20:03:52.786254 rt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0
10182 20:03:52.786277 rt_sigprocmask(SIG_BLOCK, [CHLD], [], 8) = 0
10182 20:03:52.786294 rt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0
10182 20:03:52.786305 rt_sigprocmask(SIG_BLOCK, [CHLD], [], 8) = 0
10182 20:03:52.786318 rt_sigaction(SIGINT, {0x807f150, [], 0}, {SIG_DFL}, 8) = 0
10182 20:03:52.786332 waitpid(-1,  <unfinished ...>
10184 20:03:52.987046 <... brk resumed> ) = 0x825a000
10184 20:03:53.077565 stat64("/etc/perl/Errno.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:53.077641 stat64("/etc/perl/Errno.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:53.077675 stat64("/usr/local/lib/perl/5.8.8/Errno.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:53.077724 stat64("/usr/local/lib/perl/5.8.8/Errno.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:53.077739 stat64("/usr/local/share/perl/5.8.8/Errno.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:53.077768 stat64("/usr/local/share/perl/5.8.8/Errno.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:53.077815 stat64("/usr/lib/perl5/Errno.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:53.077847 stat64("/usr/lib/perl5/Errno.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:53.077893 stat64("/usr/share/perl5/Errno.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:53.077919 stat64("/usr/share/perl5/Errno.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:53.077965 stat64("/usr/lib/perl/5.8/Errno.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:53.078017 stat64("/usr/lib/perl/5.8/Errno.pm", {st_mode=S_IFREG|0644, st_size=5967, ...}) = 0
10184 20:03:53.078088 open("/usr/lib/perl/5.8/Errno.pm", O_RDONLY|O_LARGEFILE) = 8
10184 20:03:53.078141 ioctl(8, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf81bde8) = -1 ENOTTY (Inappropriate ioctl for device)
10184 20:03:53.078155 _llseek(8, 0, [0], SEEK_CUR) = 0
10184 20:03:53.078220 read(8, "#\n# This file is auto-generated. ***ANY*** changes here will be lost\n#\n\npackage Errno;\nour (@EXPORT_OK,%EXPORT_TAGS,@ISA,$VERSION,%errno,$AUTOLOAD);\nuse Exporter ();\nuse strict;\n\n$VERSION = \"1.09_01\";\n$VERSION = eval $VERSION;\n@ISA = qw(Exporter);\n\n@EXPORT_OK = qw(EBADR ENOMSG ENOTSUP ESTRPIPE EADDRINUSE EL3HLT EBADF\n\tENOTBLK ENAVAIL ECHRNG ENOTNAM ELNRNG ENOKEY EXDEV EBADE EBADSLT\n\tECONNREFUSED ENOSTR ENONET EOVERFLOW EISCONN EFBIG EKEYREVOKED\n\tECONNRESET EWOULDBLOCK ELIBMAX EREMOTEIO ENOPKG ELIBSCN EDESTADDRREQ\n\tENOTSOCK EIO EMEDIUMTYPE EINPROGRESS ERANGE EAFNOSUPPORT EADDRNOTAVAIL\n\tEINTR EREMOTE EILSEQ ENOMEM EPIPE ENETUNREACH ENODATA EUSERS\n\tEOPNOTSUPP EPROTO EISNAM ESPIPE EALREADY ENAMETOOLONG ENOEXEC EISDIR\n\tEBADRQC EEXIST EDOTDOT ELIBBAD EOWNERDEAD ESRCH EFAULT EXFULL\n\tEDEADLOCK EAGAIN ENOPROTOOPT ENETDOWN EPROTOTYPE EL2NSYNC ENETRESET\n\tEUCLEAN EADV EROFS ESHUTDOWN EMULTIHOP EPROTONOSUPPORT ENFILE ENOLCK\n\tECONNABORTED ECANCELED EDEADLK ESRMNT ENOLINK ETIME ENOTDIR EINVAL\n\tENOTTY ENOANO ELOOP ENOENT EPFNOSUPPORT EBADMSG ENOMEDIUM EL2HLT EDOM\n\tEBFONT EKEYEXPIRED EMSGSIZE ENOCSI EL3RST ENOSPC EIDRM ENOBUFS ENOSYS\n\tEHOSTDOWN EBADFD ENOSR ENOTCONN ESTALE EDQUOT EKEYREJECTED EMFILE\n\tENOTRECOVERABLE EACCES EBUSY E2BIG EPERM ELIBEXEC ETOOMANYREFS ELIBACC\n\tENOTUNIQ ECOMM ERESTART ESOCKTNOSUPPORT EUNATCH ETIMEDOUT ENXIO ENODEV\n\tETXTBSY EMLINK ECHILD EHOSTUNREACH EREMCHG ENOTEMPTY);\n\t\n%EXPORT_TAGS = (\n    POSIX => [qw(\n\tE2BIG EACCES EADDRINUSE EADDRNOTAVAIL EAFNOSUPPORT EAGAIN EALREADY\n\tEBADF EBUSY ECHILD ECONNABORTED ECONNREFUSED ECONNRESET EDEADLK\n\tEDESTADDRREQ EDOM EDQUOT EEXIST EFAULT EFBIG EHOSTDOWN EHOSTUNREACH\n\tEINPROGRESS EINTR EINVAL EIO EISCONN EISDIR ELOOP EMFILE EMLINK\n\tEMSGSIZE ENAMETOOLONG ENETDOWN ENETRESET ENETUNREACH ENFILE ENOBUFS\n\tENODEV ENOENT ENOEXEC ENOLCK ENOMEM ENOPROTOOPT ENOSPC ENOSYS ENOTBLK\n\tENOTCONN ENOTDIR ENOTEMPTY ENOTSOCK ENOTTY ENXIO EOPNOTSUPP EPERM\n\tEPFNOSUPPORT EPIPE EPROTONOSUPPORT EPROTOTYPE ERANGE EREMOTE ERESTART\n\tEROFS ESHUTDOWN ESOCKTNOSUPPORT ESPIPE ESRCH ESTALE ETIMEDOUT\n\tETOOMANYREFS ETXTBSY EUSERS EWOULDBLOCK EXDEV\n    )]\n);\n\nsub EPERM () { 1 }\nsub ENOENT () { 2 }\nsub ESRCH () { 3 }\nsub EINTR () { 4 }\nsub EIO () { 5 }\nsub ENXIO () { 6 }\nsub E2BIG () { 7 }\nsub ENOEXEC () { 8 }\nsub EBADF () { 9 }\nsub ECHILD () { 10 }\nsub EWOULDBLOCK () { 11 }\nsub EAGAIN () { 11 }\nsub ENOMEM () { 12 }\nsub EACCES () { 13 }\nsub EFAULT () { 14 }\nsub ENOTBLK () { 15 }\nsub EBUSY () { 16 }\nsub EEXIST () { 17 }\nsub EXDEV () { 18 }\nsub ENODEV () { 19 }\nsub ENOTDIR () { 20 }\nsub EISDIR () { 21 }\nsub EINVAL () { 22 }\nsub ENFILE () { 23 }\nsub EMFILE () { 24 }\nsub ENOTTY () { 25 }\nsub ETXTBSY () { 26 }\nsub EFBIG () { 27 }\nsub ENOSPC () { 28 }\nsub ESPIPE () { 29 }\nsub EROFS () { 30 }\nsub EMLINK () { 31 }\nsub EPIPE () { 32 }\nsub EDOM () { 33 }\nsub ERANGE () { 34 }\nsub EDEADLOCK () { 35 }\nsub EDEADLK () { 35 }\nsub ENAMETOOLONG () { 36 }\nsub ENOLCK () { 37 }\nsub ENOSYS () { 38 }\nsub ENOTEMPTY () { 39 }\nsub ELOOP () { 40 }\nsub ENOMSG () { 42 }\nsub EIDRM () { 43 }\nsub ECHRNG () { 44 }\nsub EL2NSYNC () { 45 }\nsub EL3HLT () { 46 }\nsub EL3RST () { 47 }\nsub ELNRNG () { 48 }\nsub EUNATCH () { 49 }\nsub ENOCSI () { 50 }\nsub EL2HLT () { 51 }\nsub EBADE () { 52 }\nsub EBADR () { 53 }\nsub EXFULL () { 54 }\nsub ENOANO () { 55 }\nsub EBADRQC () { 56 }\nsub EBADSLT () { 57 }\nsub EBFONT () { 59 }\nsub ENOSTR () { 60 }\nsub ENODATA () { 61 }\nsub ETIME () { 62 }\nsub ENOSR () { 63 }\nsub ENONET () { 64 }\nsub ENOPKG () { 65 }\nsub EREMOTE () { 66 }\nsub ENOLINK () { 67 }\nsub EADV () { 68 }\nsub ESRMNT () { 69 }\nsub ECOMM () { 70 }\nsub EPROTO () { 71 }\nsub EMULTIHOP () { 72 }\nsub EDOTDOT () { 73 }\nsub EBADMSG () { 74 }\nsub EOVERFLOW () { 75 }\nsub ENOTUNIQ () { 76 }\nsub EBADFD () { 77 }\nsub EREMCHG () { 78 }\nsub ELIBACC () { 79 }\nsub ELIBBAD () { 80 }\nsub ELIBSCN () { 81 }\nsub ELIBMAX () { 82 }\nsub ELIBEXEC () { 83 }\nsub EILSEQ () { 84 }\nsub ERESTART () { 85 }\nsub ESTRPIPE () { 86 }\nsub EUSERS () { 87 }\nsub ENOTSOCK () { 88 }\nsub EDESTADDRREQ () { 89 }\nsub EMSGSIZE () { 90 }\nsub EPROTOTYPE () { 91 }\nsub ENOPROTOOPT () { 92 }\nsub EPROTONOSUPPORT () ", 4096) = 4096
10184 20:03:53.079119 read(8, "{ 93 }\nsub ESOCKTNOSUPPORT () { 94 }\nsub ENOTSUP () { 95 }\nsub EOPNOTSUPP () { 95 }\nsub EPFNOSUPPORT () { 96 }\nsub EAFNOSUPPORT () { 97 }\nsub EADDRINUSE () { 98 }\nsub EADDRNOTAVAIL () { 99 }\nsub ENETDOWN () { 100 }\nsub ENETUNREACH () { 101 }\nsub ENETRESET () { 102 }\nsub ECONNABORTED () { 103 }\nsub ECONNRESET () { 104 }\nsub ENOBUFS () { 105 }\nsub EISCONN () { 106 }\nsub ENOTCONN () { 107 }\nsub ESHUTDOWN () { 108 }\nsub ETOOMANYREFS () { 109 }\nsub ETIMEDOUT () { 110 }\nsub ECONNREFUSED () { 111 }\nsub EHOSTDOWN () { 112 }\nsub EHOSTUNREACH () { 113 }\nsub EALREADY () { 114 }\nsub EINPROGRESS () { 115 }\nsub ESTALE () { 116 }\nsub EUCLEAN () { 117 }\nsub ENOTNAM () { 118 }\nsub ENAVAIL () { 119 }\nsub EISNAM () { 120 }\nsub EREMOTEIO () { 121 }\nsub EDQUOT () { 122 }\nsub ENOMEDIUM () { 123 }\nsub EMEDIUMTYPE () { 124 }\nsub ECANCELED () { 125 }\nsub ENOKEY () { 126 }\nsub EKEYEXPIRED () { 127 }\nsub EKEYREVOKED () { 128 }\nsub EKEYREJECTED () { 129 }\nsub EOWNERDEAD () { 130 }\nsub ENOTRECOVERABLE () { 131 }\n\nsub TIEHASH { bless [] }\n\nsub FETCH {\n    my ($self, $errname) = @_;\n    my $proto = prototype(\"Errno::$errname\");\n    my $errno = \"\";\n    if (defined($proto) && $proto eq \"\") {\n\tno strict \'refs\';\n\t$errno = &$errname;\n        $errno = 0 unless $! == $errno;\n    }\n    return $errno;\n}\n\nsub STORE {\n    require Carp;\n    Carp::confess(\"ERRNO hash is read only!\");\n}\n\n*CLEAR = \\&STORE;\n*DELETE = \\&STORE;\n\nsub NEXTKEY {\n    my($k,$v);\n    while(($k,$v) = each %Errno::) {\n\tmy $proto = prototype(\"Errno::$k\");\n\tlast if (defined($proto) && $proto eq \"\");\n    }\n    $k\n}\n\nsub FIRSTKEY {\n    my $s = scalar keys %Errno::;\t# initialize iterator\n    goto &NEXTKEY;\n}\n\nsub EXISTS {\n    my ($self, $errname) = @_;\n    my $r = ref $errname;\n    my $proto = !$r || $r eq \'CODE\' ? prototype($errname) : undef;\n    defined($proto) && $proto eq \"\";\n}\n\ntie %!, __PACKAGE__;\n\n1;\n__END__\n\n", 4096) = 1871
10184 20:03:53.079608 _llseek(8, 5966, [5966], SEEK_SET) = 0
10184 20:03:53.079625 _llseek(8, 0, [5966], SEEK_CUR) = 0
10184 20:03:53.079636 close(8)          = 0
10184 20:03:53.080643 brk(0x827b000)    = 0x827b000
10184 20:03:53.080845 read(6, "    }\n\n    $peer = accept($new,$sock)\n\tor return;\n\n    return wantarray ? ($new, $peer)\n    \t      \t     : $new;\n}\n\nsub sockname {\n    @_ == 1 or croak \'usage: $sock->sockname()\';\n    getsockname($_[0]);\n}\n\nsub peername {\n    @_ == 1 or croak \'usage: $sock->peername()\';\n    my($sock) = @_;\n    getpeername($sock)\n      || ${*$sock}{\'io_socket_peername\'}\n      || undef;\n}\n\nsub connected {\n    @_ == 1 or croak \'usage: $sock->connected()\';\n    my($sock) = @_;\n    getpeername($sock);\n}\n\nsub send {\n    @_ >= 2 && @_ <= 4 or croak \'usage: $sock->send(BUF, [FLAGS, [TO]])\';\n    my $sock  = $_[0];\n    my $flags = $_[2] || 0;\n    my $peer  = $_[3] || $sock->peername;\n\n    croak \'send: Cannot determine peer address\'\n\t unless($peer);\n\n    my $r = defined(getpeername($sock))\n\t? send($sock, $_[1], $flags)\n\t: send($sock, $_[1], $flags, $peer);\n\n    # remember who we send to, if it was successful\n    ${*$sock}{\'io_socket_peername\'} = $peer\n\tif(@_ == 4 && defined $r);\n\n    $r;\n}\n\nsub recv {\n    @_ == 3 || @_ == 4 or croak \'usage: $sock->recv(BUF, LEN [, FLAGS])\';\n    my $sock  = $_[0];\n    my $len   = $_[2];\n    my $flags = $_[3] || 0;\n\n    # remember who we recv\'d from\n    ${*$sock}{\'io_socket_peername\'} = recv($sock, $_[1]=\'\', $len, $flags);\n}\n\nsub shutdown {\n    @_ == 2 or croak \'usage: $sock->shutdown(HOW)\';\n    my($sock, $how) = @_;\n    shutdown($sock, $how);\n}\n\nsub setsockopt {\n    @_ == 4 or croak \'$sock->setsockopt(LEVEL, OPTNAME)\';\n    setsockopt($_[0],$_[1],$_[2],$_[3]);\n}\n\nmy $intsize = length(pack(\"i\",0));\n\nsub getsockopt {\n    @_ == 3 or croak \'$sock->getsockopt(LEVEL, OPTNAME)\';\n    my $r = getsockopt($_[0],$_[1],$_[2]);\n    # Just a guess\n    $r = unpack(\"i\", $r)\n\tif(defined $r && length($r) == $intsize);\n    $r;\n}\n\nsub sockopt {\n    my $sock = shift;\n    @_ == 1 ? $sock->getsockopt(SOL_SOCKET,@_)\n\t    : $sock->setsockopt(SOL_SOCKET,@_);\n}\n\nsub atmark {\n    @_ == 1 or croak \'usage: $sock->atmark()\';\n    my($sock) = @_;\n    sockatmark($sock);\n}\n\nsub timeout {\n    @_ == 1 || @_ == 2 or croak \'usage: $sock->timeout([VALUE])\';\n    my($sock,$val) = @_;\n    my $r = ${*$sock}{\'io_socket_timeout\'};\n\n    ${*$sock}{\'io_socket_timeout\'} = defined $val ? 0 + $val : $val\n\tif(@_ == 2);\n\n    $r;\n}\n\nsub sockdomain {\n    @_ == 1 or croak \'usage: $sock->sockdomain()\';\n    my $sock = shift;\n    ${*$sock}{\'io_socket_domain\'};\n}\n\nsub socktype {\n    @_ == 1 or croak \'usage: $sock->socktype()\';\n    my $sock = shift;\n    ${*$sock}{\'io_socket_type\'}\n}\n\nsub protocol {\n    @_ == 1 or croak \'usage: $sock->protocol()\';\n    my($sock) = @_;\n    ${*$sock}{\'io_socket_proto\'};\n}\n\n1;\n\n__END__\n\n", 4096) = 2603
10184 20:03:53.081396 _llseek(6, 6698, [6698], SEEK_SET) = 0
10184 20:03:53.081413 _llseek(6, 0, [6698], SEEK_CUR) = 0
10184 20:03:53.081423 close(6)          = 0
10184 20:03:53.081442 stat64("/etc/perl/IO/Socket/INET.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:53.081457 stat64("/etc/perl/IO/Socket/INET.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:53.081476 stat64("/usr/local/lib/perl/5.8.8/IO/Socket/INET.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:53.081489 stat64("/usr/local/lib/perl/5.8.8/IO/Socket/INET.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:53.081503 stat64("/usr/local/share/perl/5.8.8/IO/Socket/INET.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:53.081516 stat64("/usr/local/share/perl/5.8.8/IO/Socket/INET.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:53.081531 stat64("/usr/lib/perl5/IO/Socket/INET.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:53.081543 stat64("/usr/lib/perl5/IO/Socket/INET.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:53.081556 stat64("/usr/share/perl5/IO/Socket/INET.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:53.081569 stat64("/usr/share/perl5/IO/Socket/INET.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:53.081582 stat64("/usr/lib/perl/5.8/IO/Socket/INET.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:53.081596 stat64("/usr/lib/perl/5.8/IO/Socket/INET.pm", {st_mode=S_IFREG|0644, st_size=6497, ...}) = 0
10184 20:03:53.081662 open("/usr/lib/perl/5.8/IO/Socket/INET.pm", O_RDONLY|O_LARGEFILE) = 6
10184 20:03:53.081694 ioctl(6, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf81c298) = -1 ENOTTY (Inappropriate ioctl for device)
10184 20:03:53.081720 _llseek(6, 0, [0], SEEK_CUR) = 0
10184 20:03:53.081737 read(6, "# IO::Socket::INET.pm\n#\n# Copyright (c) 1997-8 Graham Barr <gbarr@pobox.com>. All rights reserved.\n# This program is free software; you can redistribute it and/or\n# modify it under the same terms as Perl itself.\n\npackage IO::Socket::INET;\n\nuse strict;\nour(@ISA, $VERSION);\nuse IO::Socket;\nuse Socket;\nuse Carp;\nuse Exporter;\nuse Errno;\n\n@ISA = qw(IO::Socket);\n$VERSION = \"1.29\";\n\nmy $EINVAL = exists(&Errno::EINVAL) ? Errno::EINVAL() : 1;\n\nIO::Socket::INET->register_domain( AF_INET );\n\nmy %socket_type = ( tcp  => SOCK_STREAM,\n\t\t    udp  => SOCK_DGRAM,\n\t\t    icmp => SOCK_RAW\n\t\t  );\n\nsub new {\n    my $class = shift;\n    unshift(@_, \"PeerAddr\") if @_ == 1;\n    return $class->SUPER::new(@_);\n}\n\nsub _sock_info {\n  my($addr,$port,$proto) = @_;\n  my $origport = $port;\n  my @proto = ();\n  my @serv = ();\n\n  $port = $1\n\tif(defined $addr && $addr =~ s,:([\\w\\(\\)/]+)$,,);\n\n  if(defined $proto  && $proto =~ /\\D/) {\n    if(@proto = getprotobyname($proto)) {\n      $proto = $proto[2] || undef;\n    }\n    else {\n      $@ = \"Bad protocol \'$proto\'\";\n      return;\n    }\n  }\n\n  if(defined $port) {\n    my $defport = ($port =~ s,\\((\\d+)\\)$,,) ? $1 : undef;\n    my $pnum = ($port =~ m,^(\\d+)$,)[0];\n\n    @serv = getservbyname($port, $proto[0] || \"\")\n\tif ($port =~ m,\\D,);\n\n    $port = $serv[2] || $defport || $pnum;\n    unless (defined $port) {\n\t$@ = \"Bad service \'$origport\'\";\n\treturn;\n    }\n\n    $proto = (getprotobyname($serv[3]))[2] || undef\n\tif @serv && !$proto;\n  }\n\n return ($addr || undef,\n\t $port || undef,\n\t $proto || undef\n\t);\n}\n\nsub _error {\n    my $sock = shift;\n    my $err = shift;\n    {\n      local($!);\n      my $title = ref($sock).\": \";\n      $@ = join(\"\", $_[0] =~ /^$title/ ? \"\" : $title, @_);\n      close($sock)\n\tif(defined fileno($sock));\n    }\n    $! = $err;\n    return undef;\n}\n\nsub _get_addr {\n    my($sock,$addr_str, $multi) = @_;\n    my @addr;\n    if ($multi && $addr_str !~ /^\\d+(?:\\.\\d+){3}$/) {\n\t(undef, undef, undef, undef, @addr) = gethostbyname($addr_str);\n    } else {\n\tmy $h = inet_aton($addr_str);\n\tpush(@addr, $h) if defined $h;\n    }\n    @addr;\n}\n\nsub configure {\n    my($sock,$arg) = @_;\n    my($lport,$rport,$laddr,$raddr,$proto,$type);\n\n    $arg->{LocalAddr} = $arg->{LocalHost}\n\tif exists $arg->{LocalHost} && !exists $arg->{LocalAddr};\n\n    ($laddr,$lport,$proto) = _sock_info($arg->{LocalAddr},\n\t\t\t\t\t$arg->{LocalPort},\n\t\t\t\t\t$arg->{Proto})\n\t\t\tor return _error($sock, $!, $@);\n\n    $laddr = defined $laddr ? inet_aton($laddr)\n\t\t\t    : INADDR_ANY;\n\n    return _error($sock, $EINVAL, \"Bad hostname \'\",$arg->{LocalAddr},\"\'\")\n\tunless(defined $laddr);\n\n    $arg->{PeerAddr} = $arg->{PeerHost}\n\tif exists $arg->{PeerHost} && !exists $arg->{PeerAddr};\n\n    unless(exists $arg->{Listen}) {\n\t($raddr,$rport,$proto) = _sock_info($arg->{PeerAddr},\n\t\t\t\t\t    $arg->{PeerPort},\n\t\t\t\t\t    $proto)\n\t\t\tor return _error($sock, $!, $@);\n    }\n\n    $proto ||= (getprotobyname(\'tcp\'))[2];\n\n    my $pname = (getprotobynumber($proto))[0];\n    $type = $arg->{Type} || $socket_type{lc $pname};\n\n    my @raddr = ();\n\n    if(defined $raddr) {\n\t@raddr = $sock->_get_addr($raddr, $arg->{MultiHomed});\n\treturn _error($sock, $EINVAL, \"Bad hostname \'\",$arg->{PeerAddr},\"\'\")\n\t    unless @raddr;\n    }\n\n    while(1) {\n\n\t$sock->socket(AF_INET, $type, $proto) or\n\t    return _error($sock, $!, \"$!\");\n\n        if (defined $arg->{Blocking}) {\n\t    defined $sock->blocking($arg->{Blocking})\n\t\tor return _error($sock, $!, \"$!\");\n\t}\n\n\tif ($arg->{Reuse} || $arg->{ReuseAddr}) {\n\t    $sock->sockopt(SO_REUSEADDR,1) or\n\t\t    return _error($sock, $!, \"$!\");\n\t}\n\n\tif ($arg->{ReusePort}) {\n\t    $sock->sockopt(SO_REUSEPORT,1) or\n\t\t    return _error($sock, $!, \"$!\");\n\t}\n\n\tif ($arg->{Broadcast}) {\n\t\t$sock->sockopt(SO_BROADCAST,1) or\n\t\t    return _error($sock, $!, \"$!\");\n\t}\n\n\tif($lport || ($laddr ne INADDR_ANY) || exists $arg->{Listen}) {\n\t    $sock->bind($lport || 0, $laddr) or\n\t\t    return _error($sock, $!, \"$!\");\n\t}\n\n\tif(exists $arg->{Listen}) {\n\t    $sock->listen($arg->{Listen} || 5) or\n\t\treturn _error($sock, $!, \"$!\");\n\t    last;\n\t}\n\n \t# don\'t try to connect unless we\'re given a PeerAddr\n \tlast unless e", 4096) = 4096
10184 20:03:53.082050 stat64("/etc/perl/Exporter/Heavy.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:53.082066 stat64("/etc/perl/Exporter/Heavy.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:53.082079 stat64("/usr/local/lib/perl/5.8.8/Exporter/Heavy.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:53.082092 stat64("/usr/local/lib/perl/5.8.8/Exporter/Heavy.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:53.082106 stat64("/usr/local/share/perl/5.8.8/Exporter/Heavy.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:53.082240 stat64("/usr/local/share/perl/5.8.8/Exporter/Heavy.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:53.082288 stat64("/usr/lib/perl5/Exporter/Heavy.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:53.082300 stat64("/usr/lib/perl5/Exporter/Heavy.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:53.082314 stat64("/usr/share/perl5/Exporter/Heavy.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:53.082326 stat64("/usr/share/perl5/Exporter/Heavy.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:53.082339 stat64("/usr/lib/perl/5.8/Exporter/Heavy.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:53.082352 stat64("/usr/lib/perl/5.8/Exporter/Heavy.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:53.082366 stat64("/usr/share/perl/5.8/Exporter/Heavy.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:53.082380 stat64("/usr/share/perl/5.8/Exporter/Heavy.pm", {st_mode=S_IFREG|0644, st_size=6252, ...}) = 0
10184 20:03:53.082401 open("/usr/share/perl/5.8/Exporter/Heavy.pm", O_RDONLY|O_LARGEFILE) = 8
10184 20:03:53.082416 ioctl(8, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf81bde8) = -1 ENOTTY (Inappropriate ioctl for device)
10184 20:03:53.082427 _llseek(8, 0, [0], SEEK_CUR) = 0
10184 20:03:53.082444 read(8, "package Exporter::Heavy;\n\nuse strict;\nno strict \'refs\';\n\n# On one line so MakeMaker will see it.\nrequire Exporter;  our $VERSION = $Exporter::VERSION;\n$Carp::Internal{\"Exporter::Heavy\"} = 1;\n\n#\n# We go to a lot of trouble not to \'require Carp\' at file scope,\n#  because Carp requires Exporter, and something has to give.\n#\n\nsub _rebuild_cache {\n    my ($pkg, $exports, $cache) = @_;\n    s/^&// foreach @$exports;\n    @{$cache}{@$exports} = (1) x @$exports;\n    my $ok = \\@{\"${pkg}::EXPORT_OK\"};\n    if (@$ok) {\n\ts/^&// foreach @$ok;\n\t@{$cache}{@$ok} = (1) x @$ok;\n    }\n}\n\nsub heavy_export {\n\n    # First make import warnings look like they\'re coming from the \"use\".\n    local $SIG{__WARN__} = sub {\n\tmy $text = shift;\n\tif ($text =~ s/ at \\S*Exporter\\S*.pm line \\d+.*\\n//) {\n\t    require Carp;\n\t    local $Carp::CarpLevel = 1;\t# ignore package calling us too.\n\t    Carp::carp($text);\n\t}\n\telse {\n\t    warn $text;\n\t}\n    };\n    local $SIG{__DIE__} = sub {\n\trequire Carp;\n\tlocal $Carp::CarpLevel = 1;\t# ignore package calling us too.\n\tCarp::croak(\"$_[0]Illegal null symbol in \\@${1}::EXPORT\")\n\t    if $_[0] =~ /^Unable to create sub named \"(.*?)::\"/;\n    };\n\n    my($pkg, $callpkg, @imports) = @_;\n    my($type, $sym, $cache_is_current, $oops);\n    my($exports, $export_cache) = (\\@{\"${pkg}::EXPORT\"},\n                                   $Exporter::Cache{$pkg} ||= {});\n\n    if (@imports) {\n\tif (!%$export_cache) {\n\t    _rebuild_cache ($pkg, $exports, $export_cache);\n\t    $cache_is_current = 1;\n\t}\n\n\tif (grep m{^[/!:]}, @imports) {\n\t    my $tagsref = \\%{\"${pkg}::EXPORT_TAGS\"};\n\t    my $tagdata;\n\t    my %imports;\n\t    my($remove, $spec, @names, @allexports);\n\t    # negated first item implies starting with default set:\n\t    unshift @imports, \':DEFAULT\' if $imports[0] =~ m/^!/;\n\t    foreach $spec (@imports){\n\t\t$remove = $spec =~ s/^!//;\n\n\t\tif ($spec =~ s/^://){\n\t\t    if ($spec eq \'DEFAULT\'){\n\t\t\t@names = @$exports;\n\t\t    }\n\t\t    elsif ($tagdata = $tagsref->{$spec}) {\n\t\t\t@names = @$tagdata;\n\t\t    }\n\t\t    else {\n\t\t\twarn qq[\"$spec\" is not defined in %${pkg}::EXPORT_TAGS];\n\t\t\t++$oops;\n\t\t\tnext;\n\t\t    }\n\t\t}\n\t\telsif ($spec =~ m:^/(.*)/$:){\n\t\t    my $patn = $1;\n\t\t    @allexports = keys %$export_cache unless @allexports; # only do keys once\n\t\t    @names = grep(/$patn/, @allexports); # not anchored by default\n\t\t}\n\t\telse {\n\t\t    @names = ($spec); # is a normal symbol name\n\t\t}\n\n\t\twarn \"Import \".($remove ? \"del\":\"add\").\": @names \"\n\t\t    if $Exporter::Verbose;\n\n\t\tif ($remove) {\n\t\t   foreach $sym (@names) { delete $imports{$sym} } \n\t\t}\n\t\telse {\n\t\t    @imports{@names} = (1) x @names;\n\t\t}\n\t    }\n\t    @imports = keys %imports;\n\t}\n\n        my @carp;\n\tforeach $sym (@imports) {\n\t    if (!$export_cache->{$sym}) {\n\t\tif ($sym =~ m/^\\d/) {\n\t\t    $pkg->VERSION($sym); # inherit from UNIVERSAL\n\t\t    # If the version number was the only thing specified\n\t\t    # then we should act as if nothing was specified:\n\t\t    if (@imports == 1) {\n\t\t\t@imports = @$exports;\n\t\t\tlast;\n\t\t    }\n\t\t    # We need a way to emulate \'use Foo ()\' but still\n\t\t    # allow an easy version check: \"use Foo 1.23, \'\'\";\n\t\t    if (@imports == 2 and !$imports[1]) {\n\t\t\t@imports = ();\n\t\t\tlast;\n\t\t    }\n\t\t} elsif ($sym !~ s/^&// || !$export_cache->{$sym}) {\n\t\t    # Last chance - see if they\'ve updated EXPORT_OK since we\n\t\t    # cached it.\n\n\t\t    unless ($cache_is_current) {\n\t\t\t%$export_cache = ();\n\t\t\t_rebuild_cache ($pkg, $exports, $export_cache);\n\t\t\t$cache_is_current = 1;\n\t\t    }\n\n\t\t    if (!$export_cache->{$sym}) {\n\t\t\t# accumulate the non-exports\n\t\t\tpush @carp,\n\t\t\t  qq[\"$sym\" is not exported by the $pkg module\\n];\n\t\t\t$oops++;\n\t\t    }\n\t\t}\n\t    }\n\t}\n\tif ($oops) {\n\t    require Carp;\n\t    Carp::croak(\"@{carp}Can\'t continue after import errors\");\n\t}\n    }\n    else {\n\t@imports = @$exports;\n    }\n\n    my($fail, $fail_cache) = (\\@{\"${pkg}::EXPORT_FAIL\"},\n                              $Exporter::FailCache{$pkg} ||= {});\n\n    if (@$fail) {\n\tif (!%$fail_cache) {\n\t    # Build cache of symbols. Optimise the lookup by adding\n\t    # barewords twice... both with and without a leading &.\n\t    # (Technique could be applied to $export_cac", 4096) = 4096
10184 20:03:53.083169 read(8, "he at cost of memory)\n\t    my @expanded = map { /^\\w/ ? ($_, \'&\'.$_) : $_ } @$fail;\n\t    warn \"${pkg}::EXPORT_FAIL cached: @expanded\" if $Exporter::Verbose;\n\t    @{$fail_cache}{@expanded} = (1) x @expanded;\n\t}\n\tmy @failed;\n\tforeach $sym (@imports) { push(@failed, $sym) if $fail_cache->{$sym} }\n\tif (@failed) {\n\t    @failed = $pkg->export_fail(@failed);\n\t    foreach $sym (@failed) {\n                require Carp;\n\t\tCarp::carp(qq[\"$sym\" is not implemented by the $pkg module ],\n\t\t\t\"on this architecture\");\n\t    }\n\t    if (@failed) {\n\t\trequire Carp;\n\t\tCarp::croak(\"Can\'t continue after import errors\");\n\t    }\n\t}\n    }\n\n    warn \"Importing into $callpkg from $pkg: \",\n\t\tjoin(\", \",sort @imports) if $Exporter::Verbose;\n\n    foreach $sym (@imports) {\n\t# shortcut for the common case of no type character\n\t(*{\"${callpkg}::$sym\"} = \\&{\"${pkg}::$sym\"}, next)\n\t    unless $sym =~ s/^(\\W)//;\n\t$type = $1;\n\t*{\"${callpkg}::$sym\"} =\n\t    $type eq \'&\' ? \\&{\"${pkg}::$sym\"} :\n\t    $type eq \'$\' ? \\${\"${pkg}::$sym\"} :\n\t    $type eq \'@\' ? \\@{\"${pkg}::$sym\"} :\n\t    $type eq \'%\' ? \\%{\"${pkg}::$sym\"} :\n\t    $type eq \'*\' ?  *{\"${pkg}::$sym\"} :\n\t    do { require Carp; Carp::croak(\"Can\'t export symbol: $type$sym\") };\n    }\n}\n\nsub heavy_export_to_level\n{\n      my $pkg = shift;\n      my $level = shift;\n      (undef) = shift;\t\t\t# XXX redundant arg\n      my $callpkg = caller($level);\n      $pkg->export($callpkg, @_);\n}\n\n# Utility functions\n\nsub _push_tags {\n    my($pkg, $var, $syms) = @_;\n    my @nontag = ();\n    my $export_tags = \\%{\"${pkg}::EXPORT_TAGS\"};\n    push(@{\"${pkg}::$var\"},\n\tmap { $export_tags->{$_} ? @{$export_tags->{$_}} \n                                 : scalar(push(@nontag,$_),$_) }\n\t\t(@$syms) ? @$syms : keys %$export_tags);\n    if (@nontag and $^W) {\n\t# This may change to a die one day\n\trequire Carp;\n\tCarp::carp(join(\", \", @nontag).\" are not tags of $pkg\");\n    }\n}\n\nsub heavy_require_version {\n    my($self, $wanted) = @_;\n    my $pkg = ref $self || $self;\n    return ${pkg}->VERSION($wanted);\n}\n\nsub heavy_export_tags {\n  _push_tags((caller)[0], \"EXPORT\",    \\@_);\n}\n\nsub heavy_export_ok_tags {\n  _push_tags((caller)[0], \"EXPORT_OK\", \\@_);\n}\n\n1;\n", 4096) = 2156
10184 20:03:53.083457 brk(0x829c000)    = 0x829c000
10184 20:03:53.083709 read(8, "", 4096) = 0
10184 20:03:53.083759 close(8)          = 0
10184 20:03:53.084891 read(6, "xists($arg->{PeerAddr});\n \n        $raddr = shift @raddr;\n\n\treturn _error($sock, $EINVAL, \'Cannot determine remote port\')\n\t\tunless($rport || $type == SOCK_DGRAM || $type == SOCK_RAW);\n\n\tlast\n\t    unless($type == SOCK_STREAM || defined $raddr);\n\n\treturn _error($sock, $EINVAL, \"Bad hostname \'\",$arg->{PeerAddr},\"\'\")\n\t    unless defined $raddr;\n\n#        my $timeout = ${*$sock}{\'io_socket_timeout\'};\n#        my $before = time() if $timeout;\n\n\tundef $@;\n        if ($sock->connect(pack_sockaddr_in($rport, $raddr))) {\n#            ${*$sock}{\'io_socket_timeout\'} = $timeout;\n            return $sock;\n        }\n\n\treturn _error($sock, $!, $@ || \"Timeout\")\n\t    unless @raddr;\n\n#\tif ($timeout) {\n#\t    my $new_timeout = $timeout - (time() - $before);\n#\t    return _error($sock,\n#                         (exists(&Errno::ETIMEDOUT) ? Errno::ETIMEDOUT() : $EINVAL),\n#                         \"Timeout\") if $new_timeout <= 0;\n#\t    ${*$sock}{\'io_socket_timeout\'} = $new_timeout;\n#        }\n\n    }\n\n    $sock;\n}\n\nsub connect {\n    @_ == 2 || @_ == 3 or\n       croak \'usage: $sock->connect(NAME) or $sock->connect(PORT, ADDR)\';\n    my $sock = shift;\n    return $sock->SUPER::connect(@_ == 1 ? shift : pack_sockaddr_in(@_));\n}\n\nsub bind {\n    @_ == 2 || @_ == 3 or\n       croak \'usage: $sock->bind(NAME) or $sock->bind(PORT, ADDR)\';\n    my $sock = shift;\n    return $sock->SUPER::bind(@_ == 1 ? shift : pack_sockaddr_in(@_))\n}\n\nsub sockaddr {\n    @_ == 1 or croak \'usage: $sock->sockaddr()\';\n    my($sock) = @_;\n    my $name = $sock->sockname;\n    $name ? (sockaddr_in($name))[1] : undef;\n}\n\nsub sockport {\n    @_ == 1 or croak \'usage: $sock->sockport()\';\n    my($sock) = @_;\n    my $name = $sock->sockname;\n    $name ? (sockaddr_in($name))[0] : undef;\n}\n\nsub sockhost {\n    @_ == 1 or croak \'usage: $sock->sockhost()\';\n    my($sock) = @_;\n    my $addr = $sock->sockaddr;\n    $addr ? inet_ntoa($addr) : undef;\n}\n\nsub peeraddr {\n    @_ == 1 or croak \'usage: $sock->peeraddr()\';\n    my($sock) = @_;\n    my $name = $sock->peername;\n    $name ? (sockaddr_in($name))[1] : undef;\n}\n\nsub peerport {\n    @_ == 1 or croak \'usage: $sock->peerport()\';\n    my($sock) = @_;\n    my $name = $sock->peername;\n    $name ? (sockaddr_in($name))[0] : undef;\n}\n\nsub peerhost {\n    @_ == 1 or croak \'usage: $sock->peerhost()\';\n    my($sock) = @_;\n    my $addr = $sock->peeraddr;\n    $addr ? inet_ntoa($addr) : undef;\n}\n\n1;\n\n__END__\n\n", 4096) = 2401
10184 20:03:53.085318 _llseek(6, 6496, [6496], SEEK_SET) = 0
10184 20:03:53.085335 _llseek(6, 0, [6496], SEEK_CUR) = 0
10184 20:03:53.085347 close(6)          = 0
10184 20:03:53.085421 stat64("/etc/perl/IO/Socket/UNIX.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:53.085437 stat64("/etc/perl/IO/Socket/UNIX.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:53.085451 stat64("/usr/local/lib/perl/5.8.8/IO/Socket/UNIX.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:53.085464 stat64("/usr/local/lib/perl/5.8.8/IO/Socket/UNIX.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:53.085479 stat64("/usr/local/share/perl/5.8.8/IO/Socket/UNIX.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:53.085491 stat64("/usr/local/share/perl/5.8.8/IO/Socket/UNIX.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:53.085506 stat64("/usr/lib/perl5/IO/Socket/UNIX.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:53.085518 stat64("/usr/lib/perl5/IO/Socket/UNIX.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:53.085531 stat64("/usr/share/perl5/IO/Socket/UNIX.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:53.085544 stat64("/usr/share/perl5/IO/Socket/UNIX.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:53.085557 stat64("/usr/lib/perl/5.8/IO/Socket/UNIX.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:53.085570 stat64("/usr/lib/perl/5.8/IO/Socket/UNIX.pm", {st_mode=S_IFREG|0644, st_size=1387, ...}) = 0
10184 20:03:53.085592 open("/usr/lib/perl/5.8/IO/Socket/UNIX.pm", O_RDONLY|O_LARGEFILE) = 6
10184 20:03:53.085607 ioctl(6, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf81c298) = -1 ENOTTY (Inappropriate ioctl for device)
10184 20:03:53.085619 _llseek(6, 0, [0], SEEK_CUR) = 0
10184 20:03:53.085634 brk(0x82bd000)    = 0x82bd000
10184 20:03:53.085650 read(6, "# IO::Socket::UNIX.pm\n#\n# Copyright (c) 1997-8 Graham Barr <gbarr@pobox.com>. All rights reserved.\n# This program is free software; you can redistribute it and/or\n# modify it under the same terms as Perl itself.\n\npackage IO::Socket::UNIX;\n\nuse strict;\nour(@ISA, $VERSION);\nuse IO::Socket;\nuse Socket;\nuse Carp;\n\n@ISA = qw(IO::Socket);\n$VERSION = \"1.22\";\n$VERSION = eval $VERSION;\n\nIO::Socket::UNIX->register_domain( AF_UNIX );\n\nsub new {\n    my $class = shift;\n    unshift(@_, \"Peer\") if @_ == 1;\n    return $class->SUPER::new(@_);\n}\n\nsub configure {\n    my($sock,$arg) = @_;\n    my($bport,$cport);\n\n    my $type = $arg->{Type} || SOCK_STREAM;\n\n    $sock->socket(AF_UNIX, $type, 0) or\n\treturn undef;\n\n    if(exists $arg->{Local}) {\n\tmy $addr = sockaddr_un($arg->{Local});\n\t$sock->bind($addr) or\n\t    return undef;\n    }\n    if(exists $arg->{Listen} && $type != SOCK_DGRAM) {\n\t$sock->listen($arg->{Listen} || 5) or\n\t    return undef;\n    }\n    elsif(exists $arg->{Peer}) {\n\tmy $addr = sockaddr_un($arg->{Peer});\n\t$sock->connect($addr) or\n\t    return undef;\n    }\n\n    $sock;\n}\n\nsub hostpath {\n    @_ == 1 or croak \'usage: $sock->hostpath()\';\n    my $n = $_[0]->sockname || return undef;\n    (sockaddr_un($n))[0];\n}\n\nsub peerpath {\n    @_ == 1 or croak \'usage: $sock->peerpath()\';\n    my $n = $_[0]->peername || return undef;\n    (sockaddr_un($n))[0];\n}\n\n1; # Keep require happy\n\n__END__\n\n", 4096) = 1387
10184 20:03:53.086577 _llseek(6, 1386, [1386], SEEK_SET) = 0
10184 20:03:53.086595 _llseek(6, 0, [1386], SEEK_CUR) = 0
10184 20:03:53.086606 close(6)          = 0
10184 20:03:53.086662 stat64("/etc/perl/IO/Dir.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:53.086678 stat64("/etc/perl/IO/Dir.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:53.086700 stat64("/usr/local/lib/perl/5.8.8/IO/Dir.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:53.086715 stat64("/usr/local/lib/perl/5.8.8/IO/Dir.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:53.086730 stat64("/usr/local/share/perl/5.8.8/IO/Dir.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:53.086742 stat64("/usr/local/share/perl/5.8.8/IO/Dir.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:53.086757 stat64("/usr/lib/perl5/IO/Dir.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:53.086769 stat64("/usr/lib/perl5/IO/Dir.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:53.086782 stat64("/usr/share/perl5/IO/Dir.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:53.086794 stat64("/usr/share/perl5/IO/Dir.pm", 0xbf81c48c) = -1 ENOENT (No such file or directory)
10184 20:03:53.086807 stat64("/usr/lib/perl/5.8/IO/Dir.pmc", 0xbf81c57c) = -1 ENOENT (No such file or directory)
10184 20:03:53.086820 stat64("/usr/lib/perl/5.8/IO/Dir.pm", {st_mode=S_IFREG|0644, st_size=5318, ...}) = 0
10184 20:03:53.086842 open("/usr/lib/perl/5.8/IO/Dir.pm", O_RDONLY|O_LARGEFILE) = 6
10184 20:03:53.086857 ioctl(6, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf81c298) = -1 ENOTTY (Inappropriate ioctl for device)
10184 20:03:53.086869 _llseek(6, 0, [0], SEEK_CUR) = 0
10184 20:03:53.086889 read(6, "# IO::Dir.pm\n#\n# Copyright (c) 1997-8 Graham Barr <gbarr@pobox.com>. All rights reserved.\n# This program is free software; you can redistribute it and/or\n# modify it under the same terms as Perl itself.\n\npackage IO::Dir;\n\nuse 5.006;\n\nuse strict;\nuse Carp;\nuse Symbol;\nuse Exporter;\nuse IO::File;\nour(@ISA, $VERSION, @EXPORT_OK);\nuse Tie::Hash;\nuse File::stat;\nuse File::Spec;\n\n@ISA = qw(Tie::Hash Exporter);\n$VERSION = \"1.05\";\n$VERSION = eval $VERSION;\n@EXPORT_OK = qw(DIR_UNLINK);\n\nsub DIR_UNLINK () { 1 }\n\nsub new {\n    @_ >= 1 && @_ <= 2 or croak \'usage: new IO::Dir [DIRNAME]\';\n    my $class = shift;\n    my $dh = gensym;\n    if (@_) {\n\tIO::Dir::open($dh, $_[0])\n\t    or return undef;\n    }\n    bless $dh, $class;\n}\n\nsub DESTROY {\n    my ($dh) = @_;\n    closedir($dh);\n}\n\nsub open {\n    @_ == 2 or croak \'usage: $dh->open(DIRNAME)\';\n    my ($dh, $dirname) = @_;\n    return undef\n\tunless opendir($dh, $dirname);\n    # a dir name should always have a \":\" in it; assume dirname is\n    # in current directory\n    $dirname = \':\' .  $dirname if ( ($^O eq \'MacOS\') && ($dirname !~ /:/) );\n    ${*$dh}{io_dir_path} = $dirname;\n    1;\n}\n\nsub close {\n    @_ == 1 or croak \'usage: $dh->close()\';\n    my ($dh) = @_;\n    closedir($dh);\n}\n\nsub read {\n    @_ == 1 or croak \'usage: $dh->read()\';\n    my ($dh) = @_;\n    readdir($dh);\n}\n\nsub seek {\n    @_ == 2 or croak \'usage: $dh->seek(POS)\';\n    my ($dh,$pos) = @_;\n    seekdir($dh,$pos);\n}\n\nsub tell {\n    @_ == 1 or croak \'usage: $dh->tell()\';\n    my ($dh) = @_;\n    telldir($dh);\n}\n\nsub rewind {\n    @_ == 1 or croak \'usage: $dh->rewind()\';\n    my ($dh) = @_;\n    rewinddir($dh);\n}\n\nsub TIEHASH {\n    my($class,$dir,$options) = @_;\n\n    my $dh = $class->new($dir)\n\tor return undef;\n\n    $options ||= 0;\n\n    ${*$dh}{io_dir_unlink} = $options & DIR_UNLINK;\n    $dh;\n}\n\nsub FIRSTKEY {\n    my($dh) = @_;\n    $dh->rewind;\n    scalar $dh->read;\n}\n\nsub NEXTKEY {\n    my($dh) = @_;\n    scalar $dh->read;\n}\n\nsub EXISTS {\n    my($dh,$key) = @_;\n    -e File::Spec->catfile(${*$dh}{io_dir_path}, $key);\n}\n\nsub FETCH {\n    my($dh,$key) = @_;\n    &lstat(File::Spec->catfile(${*$dh}{io_dir_path}, $key));\n}\n\nsub STORE {\n    my($dh,$key,$data) = @_;\n    my($atime,$mtime) = ref($data) ? @$data : ($data,$data);\n    my $file = File::Spec->catfile(${*$dh}{io_dir_path}, $key);\n    unless(-e $file) {\n\tmy $io = IO::File->new($file,O_CREAT | O_RDWR);\n\t$io->close if $io;\n    }\n    utime($atime,$mtime, $file);\n}\n\nsub DELETE {\n    my($dh,$key) = @_;\n\n    # Only unlink if unlink-ing is enabled\n    return 0\n\tunless ${*$dh}{io_dir_unlink};\n\n    my $file = File::Spec->catfile(${*$dh}{io_dir_path}, $key);\n\n    -d $file\n\t? rmdir($file)\n\t: unlink($file);\n}\n\n1;\n\n__END__\n\n=head1 NAME \n\nIO::Dir - supply object methods for directory handles\n\n=head1 SYNOPSIS\n\n    use IO::Dir;\n    $d = IO::Dir->new(\".\");\n    if (defined $d) {\n        while (defined($_ = $d->read)) { something($_); }\n        $d->rewind;\n        while (defined($_ = $d->read)) { something_else($_); }\n        undef $d;\n    }\n\n    tie %dir, \'IO::Dir\', \".\";\n    foreach (keys %dir) {\n\tprint $_, \" \" , $dir{$_}->size,\"\\n\";\n    }\n\n=head1 DESCRIPTION\n\nThe C<IO::Dir> package provides two interfaces to perl\'s directory reading\nroutines.\n\nThe first interface is an object approach. C<IO::Dir> provides an object\nconstructor and methods, which are just wrappers around perl\'s built in\ndirectory reading routines.\n\n=over 4\n\n=item new ( [ DIRNAME ] )\n\nC<new> is the constructor for C<IO::Dir> objects. It accepts one optional\nargument which,  if given, C<new> will pass to C<open>\n\n=back\n\nThe following methods are wrappers for the directory related functions built\ninto perl (the trailing `dir\' has been removed from the names). See L<perlfunc>\nfor details of these functions.\n\n=over 4\n\n=item open ( DIRNAME )\n\n=item read ()\n\n=item seek ( POS )\n\n=item tell ()\n\n=item rewind ()\n\n=item close ()\n\n=back\n\nC<IO::Dir> also provides an interface to reading directories via a tied\nhash. The tied hash extends the interface beyond just the directory\nreading routines by the use of C<lstat>, from the C<File::stat> package,\nC<unlin", 4096) = 4096
10184 20:03:53.087221 stat64("/etc/perl/Tie/Hash.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:53.087240 stat64("/etc/perl/Tie/Hash.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:53.087255 stat64("/usr/local/lib/perl/5.8.8/Tie/Hash.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:53.087268 stat64("/usr/local/lib/perl/5.8.8/Tie/Hash.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:53.087282 stat64("/usr/local/share/perl/5.8.8/Tie/Hash.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:53.087295 stat64("/usr/local/share/perl/5.8.8/Tie/Hash.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:53.087310 stat64("/usr/lib/perl5/Tie/Hash.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:53.087322 stat64("/usr/lib/perl5/Tie/Hash.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:53.087335 stat64("/usr/share/perl5/Tie/Hash.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:53.087347 stat64("/usr/share/perl5/Tie/Hash.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:53.087361 stat64("/usr/lib/perl/5.8/Tie/Hash.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:53.087374 stat64("/usr/lib/perl/5.8/Tie/Hash.pm", 0xbf81bfdc) = -1 ENOENT (No such file or directory)
10184 20:03:53.087388 stat64("/usr/share/perl/5.8/Tie/Hash.pmc", 0xbf81c0cc) = -1 ENOENT (No such file or directory)
10184 20:03:53.087406 stat64("/usr/share/perl/5.8/Tie/Hash.pm", {st_mode=S_IFREG|0644, st_size=7304, ...}) = 0
10184 20:03:53.087428 open("/usr/share/perl/5.8/Tie/Hash.pm", O_RDONLY|O_LARGEFILE) = 8
10184 20:03:53.087443 ioctl(8, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf81bde8) = -1 ENOTTY (Inappropriate ioctl for device)
