12287 20:25:19.350137 open("/usr/lib/perl/5.8/IO/Handle.pm", O_RDONLY|O_LARGEFILE) = 6
12287 20:25:19.350152 ioctl(6, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf930ba8) = -1 ENOTTY (Inappropriate ioctl for device)
12287 20:25:19.350176 _llseek(6, 0, [0], SEEK_CUR) = 0
12287 20:25:19.350195 read(6, "package IO::Handle;\n\nuse 5.006_001;\nuse strict;\nour($VERSION, @EXPORT_OK, @ISA);\nuse Carp;\nuse Symbol;\nuse SelectSaver;\nuse IO ();\t# Load the XS module\n\nrequire Exporter;\n@ISA = qw(Exporter);\n\n$VERSION = \"1.25\";\n$VERSION = eval $VERSION;\n\n@EXPORT_OK = qw(\n    autoflush\n    output_field_separator\n    output_record_separator\n    input_record_separator\n    input_line_number\n    format_page_number\n    format_lines_per_page\n    format_lines_left\n    format_name\n    format_top_name\n    format_line_break_characters\n    format_formfeed\n    format_write\n\n    print\n    printf\n    getline\n    getlines\n\n    printflush\n    flush\n\n    SEEK_SET\n    SEEK_CUR\n    SEEK_END\n    _IOFBF\n    _IOLBF\n    _IONBF\n);\n\n################################################\n## Constructors, destructors.\n##\n\nsub new {\n    my $class = ref($_[0]) || $_[0] || \"IO::Handle\";\n    @_ == 1 or croak \"usage: new $class\";\n    my $io = gensym;\n    bless $io, $class;\n}\n\nsub new_from_fd {\n    my $class = ref($_[0]) || $_[0] || \"IO::Handle\";\n    @_ == 3 or croak \"usage: new_from_fd $class FD, MODE\";\n    my $io = gensym;\n    shift;\n    IO::Handle::fdopen($io, @_)\n\tor return undef;\n    bless $io, $class;\n}\n\n#\n# There is no need for DESTROY to do anything, because when the\n# last reference to an IO object is gone, Perl automatically\n# closes its associated files (if any).  However, to avoid any\n# attempts to autoload DESTROY, we here define it to do nothing.\n#\nsub DESTROY {}\n\n################################################\n## Open and close.\n##\n\nsub _open_mode_string {\n    my ($mode) = @_;\n    $mode =~ /^\\+?(<|>>?)$/\n      or $mode =~ s/^r(\\+?)$/$1</\n      or $mode =~ s/^w(\\+?)$/$1>/\n      or $mode =~ s/^a(\\+?)$/$1>>/\n      or croak \"IO::Handle: bad open mode: $mode\";\n    $mode;\n}\n\nsub fdopen {\n    @_ == 3 or croak \'usage: $io->fdopen(FD, MODE)\';\n    my ($io, $fd, $mode) = @_;\n    local(*GLOB);\n\n    if (ref($fd) && \"\".$fd =~ /GLOB\\(/o) {\n\t# It\'s a glob reference; Alias it as we cannot get name of anon GLOBs\n\tmy $n = qualify(*GLOB);\n\t*GLOB = *{*$fd};\n\t$fd =  $n;\n    } elsif ($fd =~ m#^\\d+$#) {\n\t# It\'s an FD number; prefix with \"=\".\n\t$fd = \"=$fd\";\n    }\n\n    open($io, _open_mode_string($mode) . \'&\' . $fd)\n\t? $io : undef;\n}\n\nsub close {\n    @_ == 1 or croak \'usage: $io->close()\';\n    my($io) = @_;\n\n    close($io);\n}\n\n################################################\n## Normal I/O functions.\n##\n\n# flock\n# select\n\nsub opened {\n    @_ == 1 or croak \'usage: $io->opened()\';\n    defined fileno($_[0]);\n}\n\nsub fileno {\n    @_ == 1 or croak \'usage: $io->fileno()\';\n    fileno($_[0]);\n}\n\nsub getc {\n    @_ == 1 or croak \'usage: $io->getc()\';\n    getc($_[0]);\n}\n\nsub eof {\n    @_ == 1 or croak \'usage: $io->eof()\';\n    eof($_[0]);\n}\n\nsub print {\n    @_ or croak \'usage: $io->print(ARGS)\';\n    my $this = shift;\n    print $this @_;\n}\n\nsub printf {\n    @_ >= 2 or croak \'usage: $io->printf(FMT,[ARGS])\';\n    my $this = shift;\n    printf $this @_;\n}\n\nsub getline {\n    @_ == 1 or croak \'usage: $io->getline()\';\n    my $this = shift;\n    return scalar <$this>;\n} \n\n*gets = \\&getline;  # deprecated\n\nsub getlines {\n    @_ == 1 or croak \'usage: $io->getlines()\';\n    wantarray or\n\tcroak \'Can\\\'t call $io->getlines in a scalar context, use $io->getline\';\n    my $this = shift;\n    return <$this>;\n}\n\nsub truncate {\n    @_ == 2 or croak \'usage: $io->truncate(LEN)\';\n    truncate($_[0], $_[1]);\n}\n\nsub read {\n    @_ == 3 || @_ == 4 or croak \'usage: $io->read(BUF, LEN [, OFFSET])\';\n    read($_[0], $_[1], $_[2], $_[3] || 0);\n}\n\nsub sysread {\n    @_ == 3 || @_ == 4 or croak \'usage: $io->sysread(BUF, LEN [, OFFSET])\';\n    sysread($_[0], $_[1], $_[2], $_[3] || 0);\n}\n\nsub write {\n    @_ >= 2 && @_ <= 4 or croak \'usage: $io->write(BUF [, LEN [, OFFSET]])\';\n    local($\\) = \"\";\n    $_[2] = length($_[1]) unless defined $_[2];\n    print { $_[0] } substr($_[1], $_[3] || 0, $_[2]);\n}\n\nsub syswrite {\n    @_ >= 2 && @_ <= 4 or croak \'usage: $io->syswrite(BUF [, LEN [, OFFSET]])\';\n    if (defined($_[2])) {\n\tsyswrite($_[0], $_[1], $_[2], $_[3] || 0);\n    } else {\n\tsyswrite($_[0], $_[1]);\n    }\n}\n\nsub stat {\n    @_ == 1 or croak \'u", 4096) = 4096
12287 20:25:19.350595 stat64("/etc/perl/Symbol.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.350632 stat64("/etc/perl/Symbol.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.350646 stat64("/usr/local/lib/perl/5.8.8/Symbol.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.350659 stat64("/usr/local/lib/perl/5.8.8/Symbol.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.350673 stat64("/usr/local/share/perl/5.8.8/Symbol.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.350686 stat64("/usr/local/share/perl/5.8.8/Symbol.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.350701 stat64("/usr/lib/perl5/Symbol.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.350713 stat64("/usr/lib/perl5/Symbol.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.350726 stat64("/usr/share/perl5/Symbol.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.350738 stat64("/usr/share/perl5/Symbol.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.350752 stat64("/usr/lib/perl/5.8/Symbol.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.350765 stat64("/usr/lib/perl/5.8/Symbol.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.350778 stat64("/usr/share/perl/5.8/Symbol.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.350791 stat64("/usr/share/perl/5.8/Symbol.pm", {st_mode=S_IFREG|0644, st_size=2099, ...}) = 0
12287 20:25:19.350813 open("/usr/share/perl/5.8/Symbol.pm", O_RDONLY|O_LARGEFILE) = 8
12287 20:25:19.350828 ioctl(8, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf9306f8) = -1 ENOTTY (Inappropriate ioctl for device)
12287 20:25:19.350840 _llseek(8, 0, [0], SEEK_CUR) = 0
12287 20:25:19.350858 read(8, "package Symbol;\n\nBEGIN { require 5.005; }\n\nrequire Exporter;\n@ISA = qw(Exporter);\n@EXPORT = qw(gensym ungensym qualify qualify_to_ref);\n@EXPORT_OK = qw(delete_package geniosym);\n\n$VERSION = \'1.06\';\n\nmy $genpkg = \"Symbol::\";\nmy $genseq = 0;\n\nmy %global = map {$_ => 1} qw(ARGV ARGVOUT ENV INC SIG STDERR STDIN STDOUT);\n\n#\n# Note that we never _copy_ the glob; we just make a ref to it.\n# If we did copy it, then SVf_FAKE would be set on the copy, and\n# glob-specific behaviors (e.g. C<*$ref = \\&func>) wouldn\'t work.\n#\nsub gensym () {\n    my $name = \"GEN\" . $genseq++;\n    my $ref = \\*{$genpkg . $name};\n    delete $$genpkg{$name};\n    $ref;\n}\n\nsub geniosym () {\n    my $sym = gensym();\n    # force the IO slot to be filled\n    select(select $sym);\n    *$sym{IO};\n}\n\nsub ungensym ($) {}\n\nsub qualify ($;$) {\n    my ($name) = @_;\n    if (!ref($name) && index($name, \'::\') == -1 && index($name, \"\'\") == -1) {\n\tmy $pkg;\n\t# Global names: special character, \"^xyz\", or other. \n\tif ($name =~ /^(([^a-z])|(\\^[a-z_]+))\\z/i || $global{$name}) {\n\t    # RGS 2001-11-05 : translate leading ^X to control-char\n\t    $name =~ s/^\\^([a-z_])/\'qq(\\c\'.$1.\')\'/eei;\n\t    $pkg = \"main\";\n\t}\n\telse {\n\t    $pkg = (@_ > 1) ? $_[1] : caller;\n\t}\n\t$name = $pkg . \"::\" . $name;\n    }\n    $name;\n}\n\nsub qualify_to_ref ($;$) {\n    return \\*{ qualify $_[0], @_ > 1 ? $_[1] : caller };\n}\n\n#\n# of Safe.pm lineage\n#\nsub delete_package ($) {\n    my $pkg = shift;\n\n    # expand to full symbol table name if needed\n\n    unless ($pkg =~ /^main::.*::$/) {\n        $pkg = \"main$pkg\"\tif\t$pkg =~ /^::/;\n        $pkg = \"main::$pkg\"\tunless\t$pkg =~ /^main::/;\n        $pkg .= \'::\'\t\tunless\t$pkg =~ /::$/;\n    }\n\n    my($stem, $leaf) = $pkg =~ m/(.*::)(\\w+::)$/;\n    my $stem_symtab = *{$stem}{HASH};\n    return unless defined $stem_symtab and exists $stem_symtab->{$leaf};\n\n    # free all the symbols in the package\n\n    my $leaf_symtab = *{$stem_symtab->{$leaf}}{HASH};\n    foreach my $name (keys %$leaf_symtab) {\n        undef *{$pkg . $name};\n    }\n\n    # delete the symbol table\n\n    %$leaf_symtab = ();\n    delete $stem_symtab->{$leaf};\n}\n\n1;\n", 4096) = 2099
12287 20:25:19.351288 read(8, "", 4096) = 0
12287 20:25:19.351305 close(8)          = 0
12287 20:25:19.351370 stat64("/etc/perl/SelectSaver.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.351387 stat64("/etc/perl/SelectSaver.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.351402 stat64("/usr/local/lib/perl/5.8.8/SelectSaver.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.351416 stat64("/usr/local/lib/perl/5.8.8/SelectSaver.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.351431 stat64("/usr/local/share/perl/5.8.8/SelectSaver.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.351444 stat64("/usr/local/share/perl/5.8.8/SelectSaver.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.351459 stat64("/usr/lib/perl5/SelectSaver.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.351471 stat64("/usr/lib/perl5/SelectSaver.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.351485 stat64("/usr/share/perl5/SelectSaver.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.351498 stat64("/usr/share/perl5/SelectSaver.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.351523 stat64("/usr/lib/perl/5.8/SelectSaver.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.351536 stat64("/usr/lib/perl/5.8/SelectSaver.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.351551 stat64("/usr/share/perl/5.8/SelectSaver.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.351564 stat64("/usr/share/perl/5.8/SelectSaver.pm", {st_mode=S_IFREG|0644, st_size=340, ...}) = 0
12287 20:25:19.351587 open("/usr/share/perl/5.8/SelectSaver.pm", O_RDONLY|O_LARGEFILE) = 8
12287 20:25:19.351602 ioctl(8, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf9306f8) = -1 ENOTTY (Inappropriate ioctl for device)
12287 20:25:19.351614 _llseek(8, 0, [0], SEEK_CUR) = 0
12287 20:25:19.351633 read(8, "package SelectSaver;\n\nour $VERSION = \'1.01\';\n\nrequire 5.000;\nuse Carp;\nuse Symbol;\n\nsub new {\n    @_ >= 1 && @_ <= 2 or croak \'usage: new SelectSaver [FILEHANDLE]\';\n    my $fh = select;\n    my $self = bless \\$fh, $_[0];\n    select qualify($_[1], caller) if @_ > 1;\n    $self;\n}\n\nsub DESTROY {\n    my $self = $_[0];\n    select $$self;\n}\n\n1;\n", 4096) = 340
12287 20:25:19.351761 brk(0x81d6000)    = 0x81d6000
12287 20:25:19.351793 read(8, "", 4096) = 0
12287 20:25:19.351805 close(8)          = 0
12287 20:25:19.352230 read(6, "sage: $io->stat()\';\n    stat($_[0]);\n}\n\n################################################\n## State modification functions.\n##\n\nsub autoflush {\n    my $old = new SelectSaver qualify($_[0], caller);\n    my $prev = $|;\n    $| = @_ > 1 ? $_[1] : 1;\n    $prev;\n}\n\nsub output_field_separator {\n    carp \"output_field_separator is not supported on a per-handle basis\"\n\tif ref($_[0]);\n    my $prev = $,;\n    $, = $_[1] if @_ > 1;\n    $prev;\n}\n\nsub output_record_separator {\n    carp \"output_record_separator is not supported on a per-handle basis\"\n\tif ref($_[0]);\n    my $prev = $\\;\n    $\\ = $_[1] if @_ > 1;\n    $prev;\n}\n\nsub input_record_separator {\n    carp \"input_record_separator is not supported on a per-handle basis\"\n\tif ref($_[0]);\n    my $prev = $/;\n    $/ = $_[1] if @_ > 1;\n    $prev;\n}\n\nsub input_line_number {\n    local $.;\n    () = tell qualify($_[0], caller) if ref($_[0]);\n    my $prev = $.;\n    $. = $_[1] if @_ > 1;\n    $prev;\n}\n\nsub format_page_number {\n    my $old;\n    $old = new SelectSaver qualify($_[0], caller) if ref($_[0]);\n    my $prev = $%;\n    $% = $_[1] if @_ > 1;\n    $prev;\n}\n\nsub format_lines_per_page {\n    my $old;\n    $old = new SelectSaver qualify($_[0], caller) if ref($_[0]);\n    my $prev = $=;\n    $= = $_[1] if @_ > 1;\n    $prev;\n}\n\nsub format_lines_left {\n    my $old;\n    $old = new SelectSaver qualify($_[0], caller) if ref($_[0]);\n    my $prev = $-;\n    $- = $_[1] if @_ > 1;\n    $prev;\n}\n\nsub format_name {\n    my $old;\n    $old = new SelectSaver qualify($_[0], caller) if ref($_[0]);\n    my $prev = $~;\n    $~ = qualify($_[1], caller) if @_ > 1;\n    $prev;\n}\n\nsub format_top_name {\n    my $old;\n    $old = new SelectSaver qualify($_[0], caller) if ref($_[0]);\n    my $prev = $^;\n    $^ = qualify($_[1], caller) if @_ > 1;\n    $prev;\n}\n\nsub format_line_break_characters {\n    carp \"format_line_break_characters is not supported on a per-handle basis\"\n\tif ref($_[0]);\n    my $prev = $:;\n    $: = $_[1] if @_ > 1;\n    $prev;\n}\n\nsub format_formfeed {\n    carp \"format_formfeed is not supported on a per-handle basis\"\n\tif ref($_[0]);\n    my $prev = $^L;\n    $^L = $_[1] if @_ > 1;\n    $prev;\n}\n\nsub formline {\n    my $io = shift;\n    my $picture = shift;\n    local($^A) = $^A;\n    local($\\) = \"\";\n    formline($picture, @_);\n    print $io $^A;\n}\n\nsub format_write {\n    @_ < 3 || croak \'usage: $io->write( [FORMAT_NAME] )\';\n    if (@_ == 2) {\n\tmy ($io, $fmt) = @_;\n\tmy $oldfmt = $io->format_name($fmt);\n\tCORE::write($io);\n\t$io->format_name($oldfmt);\n    } else {\n\tCORE::write($_[0]);\n    }\n}\n\n# XXX undocumented\nsub fcntl {\n    @_ == 3 || croak \'usage: $io->fcntl( OP, VALUE );\';\n    my ($io, $op) = @_;\n    return fcntl($io, $op, $_[2]);\n}\n\n# XXX undocumented\nsub ioctl {\n    @_ == 3 || croak \'usage: $io->ioctl( OP, VALUE );\';\n    my ($io, $op) = @_;\n    return ioctl($io, $op, $_[2]);\n}\n\n# this sub is for compatability with older releases of IO that used\n# a sub called constant to detemine if a constant existed -- GMB\n#\n# The SEEK_* and _IO?BF constants were the only constants at that time\n# any new code should just chech defined(&CONSTANT_NAME)\n\nsub constant {\n    no strict \'refs\';\n    my $name = shift;\n    (($name =~ /^(SEEK_(SET|CUR|END)|_IO[FLN]BF)$/) && defined &{$name})\n\t? &{$name}() : undef;\n}\n\n# so that flush.pl can be deprecated\n\nsub printflush {\n    my $io = shift;\n    my $old;\n    $old = new SelectSaver qualify($io, caller) if ref($io);\n    local $| = 1;\n    if(ref($io)) {\n        print $io @_;\n    }\n    else {\n\tprint @_;\n    }\n}\n\n1;\n", 4096) = 3496
12287 20:25:19.352726 read(6, "", 4096) = 0
12287 20:25:19.352745 close(6)          = 0
12287 20:25:19.352786 stat64("/etc/perl/IO/Seekable.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.352802 stat64("/etc/perl/IO/Seekable.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.352817 stat64("/usr/local/lib/perl/5.8.8/IO/Seekable.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.352831 stat64("/usr/local/lib/perl/5.8.8/IO/Seekable.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.352859 stat64("/usr/local/share/perl/5.8.8/IO/Seekable.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.352900 stat64("/usr/local/share/perl/5.8.8/IO/Seekable.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.352932 stat64("/usr/lib/perl5/IO/Seekable.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.352944 stat64("/usr/lib/perl5/IO/Seekable.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.352958 stat64("/usr/share/perl5/IO/Seekable.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.352971 stat64("/usr/share/perl5/IO/Seekable.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.352984 stat64("/usr/lib/perl/5.8/IO/Seekable.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.352997 stat64("/usr/lib/perl/5.8/IO/Seekable.pm", {st_mode=S_IFREG|0644, st_size=686, ...}) = 0
12287 20:25:19.353020 open("/usr/lib/perl/5.8/IO/Seekable.pm", O_RDONLY|O_LARGEFILE) = 6
12287 20:25:19.353035 ioctl(6, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf930ba8) = -1 ENOTTY (Inappropriate ioctl for device)
12287 20:25:19.353047 _llseek(6, 0, [0], SEEK_CUR) = 0
12287 20:25:19.353066 read(6, "#\n\npackage IO::Seekable;\n\nuse 5.006_001;\nuse Carp;\nuse strict;\nour($VERSION, @EXPORT, @ISA);\nuse IO::Handle ();\n# XXX we can\'t get these from IO::Handle or we\'ll get prototype\n# mismatch warnings on C<use POSIX; use IO::File;> :-(\nuse Fcntl qw(SEEK_SET SEEK_CUR SEEK_END);\nrequire Exporter;\n\n@EXPORT = qw(SEEK_SET SEEK_CUR SEEK_END);\n@ISA = qw(Exporter);\n\n$VERSION = \"1.10\";\n$VERSION = eval $VERSION;\n\nsub seek {\n    @_ == 3 or croak \'usage: $io->seek(POS, WHENCE)\';\n    seek($_[0], $_[1], $_[2]);\n}\n\nsub sysseek {\n    @_ == 3 or croak \'usage: $io->sysseek(POS, WHENCE)\';\n    sysseek($_[0], $_[1], $_[2]);\n}\n\nsub tell {\n    @_ == 1 or croak \'usage: $io->tell()\';\n    tell($_[0]);\n}\n\n1;\n", 4096) = 686
12287 20:25:19.353202 stat64("/etc/perl/Fcntl.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.353218 stat64("/etc/perl/Fcntl.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.353232 stat64("/usr/local/lib/perl/5.8.8/Fcntl.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.353245 stat64("/usr/local/lib/perl/5.8.8/Fcntl.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.353259 stat64("/usr/local/share/perl/5.8.8/Fcntl.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.353271 stat64("/usr/local/share/perl/5.8.8/Fcntl.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.353286 stat64("/usr/lib/perl5/Fcntl.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.353298 stat64("/usr/lib/perl5/Fcntl.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.353311 stat64("/usr/share/perl5/Fcntl.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.353323 stat64("/usr/share/perl5/Fcntl.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.353337 stat64("/usr/lib/perl/5.8/Fcntl.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.353359 stat64("/usr/lib/perl/5.8/Fcntl.pm", {st_mode=S_IFREG|0644, st_size=3458, ...}) = 0
12287 20:25:19.353381 open("/usr/lib/perl/5.8/Fcntl.pm", O_RDONLY|O_LARGEFILE) = 8
12287 20:25:19.353395 ioctl(8, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf9306f8) = -1 ENOTTY (Inappropriate ioctl for device)
12287 20:25:19.353407 _llseek(8, 0, [0], SEEK_CUR) = 0
12287 20:25:19.353426 read(8, "package Fcntl;\n\nour($VERSION, @ISA, @EXPORT, @EXPORT_OK, %EXPORT_TAGS, $AUTOLOAD);\n\nrequire Exporter;\nuse XSLoader ();\n@ISA = qw(Exporter);\n$VERSION = \"1.05\";\n# Items to export into callers namespace by default\n# (move infrequently used names to @EXPORT_OK below)\n@EXPORT =\n  qw(\n\tFD_CLOEXEC\n\tF_ALLOCSP\n\tF_ALLOCSP64\n\tF_COMPAT\n\tF_DUP2FD\n\tF_DUPFD\n\tF_EXLCK\n\tF_FREESP\n\tF_FREESP64\n\tF_FSYNC\n\tF_FSYNC64\n\tF_GETFD\n\tF_GETFL\n\tF_GETLK\n\tF_GETLK64\n\tF_GETOWN\n\tF_NODNY\n\tF_POSIX\n\tF_RDACC\n\tF_RDDNY\n\tF_RDLCK\n\tF_RWACC\n\tF_RWDNY\n\tF_SETFD\n\tF_SETFL\n\tF_SETLK\n\tF_SETLK64\n\tF_SETLKW\n\tF_SETLKW64\n\tF_SETOWN\n\tF_SHARE\n\tF_SHLCK\n\tF_UNLCK\n\tF_UNSHARE\n\tF_WRACC\n\tF_WRDNY\n\tF_WRLCK\n\tO_ACCMODE\n\tO_ALIAS\n\tO_APPEND\n\tO_ASYNC\n\tO_BINARY\n\tO_CREAT\n\tO_DEFER\n\tO_DIRECT\n\tO_DIRECTORY\n\tO_DSYNC\n\tO_EXCL\n\tO_EXLOCK\n\tO_LARGEFILE\n\tO_NDELAY\n\tO_NOCTTY\n\tO_NOFOLLOW\n\tO_NOINHERIT\n\tO_NONBLOCK\n\tO_RANDOM\n\tO_RAW\n\tO_RDONLY\n\tO_RDWR\n\tO_RSRC\n\tO_RSYNC\n\tO_SEQUENTIAL\n\tO_SHLOCK\n\tO_SYNC\n\tO_TEMPORARY\n\tO_TEXT\n\tO_TRUNC\n\tO_WRONLY\n     );\n\n# Other items we are prepared to export if requested\n@EXPORT_OK = qw(\n\tDN_ACCESS\n\tDN_ATTRIB\n\tDN_CREATE\n\tDN_DELETE\n\tDN_MODIFY\n\tDN_MULTISHOT\n\tDN_RENAME\n\tFAPPEND\n\tFASYNC\n\tFCREAT\n\tFDEFER\n\tFDSYNC\n\tFEXCL\n\tFLARGEFILE\n\tFNDELAY\n\tFNONBLOCK\n\tFRSYNC\n\tFSYNC\n\tFTRUNC\n\tF_GETLEASE\n\tF_GETSIG\n\tF_NOTIFY\n\tF_SETLEASE\n\tF_SETSIG\n\tLOCK_EX\n\tLOCK_MAND\n\tLOCK_NB\n\tLOCK_READ\n\tLOCK_RW\n\tLOCK_SH\n\tLOCK_UN\n\tLOCK_WRITE\n\tO_IGNORE_CTTY\n\tO_NOATIME\n\tO_NOLINK\n\tO_NOTRANS\n\tSEEK_CUR\n\tSEEK_END\n\tSEEK_SET\n\tS_IFSOCK S_IFBLK S_IFCHR S_IFIFO S_IFWHT S_ENFMT\n\tS_IREAD S_IWRITE S_IEXEC\n\tS_IRGRP S_IWGRP S_IXGRP S_IRWXG\n\tS_IROTH S_IWOTH S_IXOTH S_IRWXO\n\tS_IRUSR S_IWUSR S_IXUSR S_IRWXU\n\tS_ISUID S_ISGID S_ISVTX S_ISTXT\n\t_S_IFMT S_IFREG S_IFDIR S_IFLNK\n\t&S_ISREG &S_ISDIR &S_ISLNK &S_ISSOCK &S_ISBLK &S_ISCHR &S_ISFIFO\n\t&S_ISWHT &S_ISENFMT &S_IFMT &S_IMODE\n);\n# Named groups of exports\n%EXPORT_TAGS = (\n    \'flock\'   => [qw(LOCK_SH LOCK_EX LOCK_NB LOCK_UN)],\n    \'Fcompat\' => [qw(FAPPEND FASYNC FCREAT FDEFER FDSYNC FEXCL FLARGEFILE\n\t\t     FNDELAY FNONBLOCK FRSYNC FSYNC FTRUNC)],\n    \'seek\'    => [qw(SEEK_SET SEEK_CUR SEEK_END)],\n    \'mode\'    => [qw(S_ISUID S_ISGID S_ISVTX S_ISTXT\n\t\t     _S_IFMT S_IFREG S_IFDIR S_IFLNK\n\t\t     S_IFSOCK S_IFBLK S_IFCHR S_IFIFO S_IFWHT S_ENFMT\n\t\t     S_IRUSR S_IWUSR S_IXUSR S_IRWXU\n\t\t     S_IRGRP S_IWGRP S_IXGRP S_IRWXG\n\t\t     S_IROTH S_IWOTH S_IXOTH S_IRWXO\n\t\t     S_IREAD S_IWRITE S_IEXEC\n\t\t     S_ISREG S_ISDIR S_ISLNK S_ISSOCK\n\t\t     S_ISBLK S_ISCHR S_ISFIFO\n\t\t     S_ISWHT S_ISENFMT\t\t\n\t\t     S_IFMT S_IMODE\n                  )],\n);\n\nsub S_IFMT  { @_ ? ( $_[0] & _S_IFMT() ) : _S_IFMT()  }\nsub S_IMODE { $_[0] & 07777 }\n\nsub S_ISREG    { ( $_[0] & _S_IFMT() ) == S_IFREG()   }\nsub S_ISDIR    { ( $_[0] & _S_IFMT() ) == S_IFDIR()   }\nsub S_ISLNK    { ( $_[0] & _S_IFMT() ) == S_IFLNK()   }\nsub S_ISSOCK   { ( $_[0] & _S_IFMT() ) == S_IFSOCK()  }\nsub S_ISBLK    { ( $_[0] & _S_IFMT() ) == S_IFBLK()   }\nsub S_ISCHR    { ( $_[0] & _S_IFMT() ) == S_IFCHR()   }\nsub S_ISFIFO   { ( $_[0] & _S_IFMT() ) == S_IFIFO()   }\nsub S_ISWHT    { ( $_[0] & _S_IFMT() ) == S_IFWHT()   }\nsub S_ISENFMT  { ( $_[0] & _S_IFMT() ) == S_IFENFMT() }\n\nsub AUTOLOAD {\n    (my $constname = $AUTOLOAD) =~ s/.*:://;\n    die \"&Fcntl::constant not defined\" if $constname eq \'constant\';\n    my ($error, $val) = constant($constname);\n    if ($error) {\n        my (undef,$file,$line) = caller;\n        die \"$error at $file line $line.\\n\";\n    }\n    *$AUTOLOAD = sub { $val };\n    goto &$AUTOLOAD;\n}\n\nXSLoader::load \'Fcntl\', $VERSION;\n\n1;\n", 4096) = 3458
12287 20:25:19.353777 brk(0x81f7000)    = 0x81f7000
12287 20:25:19.353976 read(8, "", 4096) = 0
12287 20:25:19.353992 close(8)          = 0
12287 20:25:19.354063 stat64("/usr/lib/perl/5.8/auto/Fcntl/Fcntl.so", {st_mode=S_IFREG|0644, st_size=12412, ...}) = 0
12287 20:25:19.354088 stat64("/usr/lib/perl/5.8/auto/Fcntl/Fcntl.bs", {st_mode=S_IFREG|0644, st_size=0, ...}) = 0
12287 20:25:19.354116 open("/usr/lib/perl/5.8/auto/Fcntl/Fcntl.so", O_RDONLY) = 8
12287 20:25:19.354131 read(8, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0 \10\0\0004\0\0\0\274,\0\0\0\0\0\0004\0 \0\4\0(\0\30\0\27\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\274*\0\0\274*\0\0\5\0\0\0\0\20\0\0\1\0\0\0\274*\0\0\274:\0\0\274:\0\0T\1\0\0X\1\0\0\6\0\0\0\0\20\0\0\2\0\0\0\320*\0\0\320:\0\0\320:\0\0\310\0\0\0\310\0\0\0\6\0\0\0\4\0\0\0Q\345td\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\4\0\0\0\21\0\0\0\36\0\0\0\0\0\0\0\25\0\0\0\32\0\0\0\24\0\0\0\5\0\0\0\t\0\0\0\0\0\0\0\23\0\0\0\21\0\0\0\34\0\0\0\4\0\0\0\26\0\0\0\0\0\0\0\30\0\0\0\17\0\0\0\27\0\0\0\r\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\1\0\0\0\0\0\0\0\3\0\0\0\2\0\0\0\0\0\0\0\0\0\0\0\v\0\0\0\6\0\0\0\35\0\0\0\7\0\0\0\0\0\0\0\22\0\0\0\31\0\0\0\33\0\0\0\20\0\0\0\16\0\0\0\n\0\0\0\0\0\0\0\f\0\0\0\10\0\0\0\0\0\0\0\3\0\0\0\27\0\0\0\2\0\0\0\6\0\0\0\210\0 \1\0\304H\t\27\0\0\0\32\0\0\0\35\0\0\0\356TU\220\272\343\222|CE\325\354.6bx\330qX\34\271\215\361\16\353\323\357\16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\353\0\0\0\0\0\0\0\0\0\0\0\20\0\0\0j\1\0\0\0\0\0\0\0\0\0\0\20\0\0\0\337\0\0\0\0\0\0\0\0\0\0\0\20\0\0\0u\0\0\0\0\0\0\0", 512) = 512
12287 20:25:19.354222 fstat64(8, {st_mode=S_IFREG|0644, st_size=12412, ...}) = 0
12287 20:25:19.354241 mmap2(NULL, 15380, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 8, 0) = 0xb7d9b000
12287 20:25:19.354254 mmap2(0xb7d9e000, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 8, 0x2) = 0xb7d9e000
12287 20:25:19.354269 close(8)          = 0
12287 20:25:19.354484 read(6, "", 4096) = 0
12287 20:25:19.354500 close(6)          = 0
12287 20:25:19.354532 stat64("/etc/perl/IO/File.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.354552 stat64("/etc/perl/IO/File.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.354567 stat64("/usr/local/lib/perl/5.8.8/IO/File.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.354590 stat64("/usr/local/lib/perl/5.8.8/IO/File.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.354605 stat64("/usr/local/share/perl/5.8.8/IO/File.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.354617 stat64("/usr/local/share/perl/5.8.8/IO/File.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.354632 stat64("/usr/lib/perl5/IO/File.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.354644 stat64("/usr/lib/perl5/IO/File.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.354657 stat64("/usr/share/perl5/IO/File.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.354670 stat64("/usr/share/perl5/IO/File.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.354683 stat64("/usr/lib/perl/5.8/IO/File.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.354696 stat64("/usr/lib/perl/5.8/IO/File.pm", {st_mode=S_IFREG|0644, st_size=1784, ...}) = 0
12287 20:25:19.354718 open("/usr/lib/perl/5.8/IO/File.pm", O_RDONLY|O_LARGEFILE) = 6
12287 20:25:19.354733 ioctl(6, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf930ba8) = -1 ENOTTY (Inappropriate ioctl for device)
12287 20:25:19.354745 _llseek(6, 0, [0], SEEK_CUR) = 0
12287 20:25:19.354763 read(6, "#\n\npackage IO::File;\n\nuse 5.006_001;\nuse strict;\nour($VERSION, @EXPORT, @EXPORT_OK, @ISA);\nuse Carp;\nuse Symbol;\nuse SelectSaver;\nuse IO::Seekable;\nuse File::Spec;\n\nrequire Exporter;\n\n@ISA = qw(IO::Handle IO::Seekable Exporter);\n\n$VERSION = \"1.13\";\n\n@EXPORT = @IO::Seekable::EXPORT;\n\neval {\n    # Make all Fcntl O_XXX constants available for importing\n    require Fcntl;\n    my @O = grep /^O_/, @Fcntl::EXPORT;\n    Fcntl->import(@O);  # first we import what we want to export\n    push(@EXPORT, @O);\n};\n\n################################################\n## Constructor\n##\n\nsub new {\n    my $type = shift;\n    my $class = ref($type) || $type || \"IO::File\";\n    @_ >= 0 && @_ <= 3\n\tor croak \"usage: new $class [FILENAME [,MODE [,PERMS]]]\";\n    my $fh = $class->SUPER::new();\n    if (@_) {\n\t$fh->open(@_)\n\t    or return undef;\n    }\n    $fh;\n}\n\n################################################\n## Open\n##\n\nsub open {\n    @_ >= 2 && @_ <= 4 or croak \'usage: $fh->open(FILENAME [,MODE [,PERMS]])\';\n    my ($fh, $file) = @_;\n    if (@_ > 2) {\n\tmy ($mode, $perms) = @_[2, 3];\n\tif ($mode =~ /^\\d+$/) {\n\t    defined $perms or $perms = 0666;\n\t    return sysopen($fh, $file, $mode, $perms);\n\t} elsif ($mode =~ /:/) {\n\t    return open($fh, $mode, $file) if @_ == 3;\n\t    croak \'usage: $fh->open(FILENAME, IOLAYERS)\';\n\t}\n\tif (defined($file) && length($file)\n\t    && ! File::Spec->file_name_is_absolute($file))\n\t{\n\t    $file = File::Spec->rel2abs($file);\n\t}\n\t$file = IO::Handle::_open_mode_string($mode) . \" $file\\0\";\n    }\n    open($fh, $file);\n}\n\n################################################\n## Binmode\n##\n\nsub binmode {\n    ( @_ == 1 or @_ == 2 ) or croak \'usage $fh->binmode([LAYER])\';\n\n    my($fh, $layer) = @_;\n\n    return binmode $$fh unless $layer;\n    return binmode $$fh, $layer;\n}\n\n1;\n", 4096) = 1784
12287 20:25:19.355019 stat64("/etc/perl/File/Spec.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.358383 stat64("/etc/perl/File/Spec.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.358383 stat64("/usr/local/lib/perl/5.8.8/File/Spec.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.358383 stat64("/usr/local/lib/perl/5.8.8/File/Spec.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.358384 stat64("/usr/local/share/perl/5.8.8/File/Spec.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.358384 stat64("/usr/local/share/perl/5.8.8/File/Spec.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.358384 stat64("/usr/lib/perl5/File/Spec.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.358384 stat64("/usr/lib/perl5/File/Spec.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.358384 stat64("/usr/share/perl5/File/Spec.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.358397 stat64("/usr/share/perl5/File/Spec.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.358411 stat64("/usr/lib/perl/5.8/File/Spec.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.358425 stat64("/usr/lib/perl/5.8/File/Spec.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.358439 stat64("/usr/share/perl/5.8/File/Spec.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.358452 stat64("/usr/share/perl/5.8/File/Spec.pm", {st_mode=S_IFREG|0644, st_size=595, ...}) = 0
12287 20:25:19.358474 open("/usr/share/perl/5.8/File/Spec.pm", O_RDONLY|O_LARGEFILE) = 8
12287 20:25:19.358490 ioctl(8, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf9306f8) = -1 ENOTTY (Inappropriate ioctl for device)
12287 20:25:19.358502 _llseek(8, 0, [0], SEEK_CUR) = 0
12287 20:25:19.358520 read(8, "package File::Spec;\n\nuse strict;\nuse vars qw(@ISA $VERSION);\n\n$VERSION = \'3.12\';\n$VERSION = eval $VERSION;\n\nmy %module = (MacOS   => \'Mac\',\n\t      MSWin32 => \'Win32\',\n\t      os2     => \'OS2\',\n\t      VMS     => \'VMS\',\n\t      epoc    => \'Epoc\',\n\t      NetWare => \'Win32\', # Yes, File::Spec::Win32 works on NetWare.\n\t      symbian => \'Win32\', # Yes, File::Spec::Win32 works on symbian.\n\t      dos     => \'OS2\',   # Yes, File::Spec::OS2 works on DJGPP.\n\t      cygwin  => \'Cygwin\');\n\nmy $module = $module{$^O} || \'Unix\';\n\nrequire \"File/Spec/$module.pm\";\n@ISA = (\"File::Spec::$module\");\n\n1;\n\n__END__\n\n", 4096) = 595
12287 20:25:19.358600 stat64("/etc/perl/vars.pmc", 0xbf93052c) = -1 ENOENT (No such file or directory)
12287 20:25:19.358614 stat64("/etc/perl/vars.pm", 0xbf93043c) = -1 ENOENT (No such file or directory)
12287 20:25:19.358627 stat64("/usr/local/lib/perl/5.8.8/vars.pmc", 0xbf93052c) = -1 ENOENT (No such file or directory)
12287 20:25:19.358640 stat64("/usr/local/lib/perl/5.8.8/vars.pm", 0xbf93043c) = -1 ENOENT (No such file or directory)
12287 20:25:19.358654 stat64("/usr/local/share/perl/5.8.8/vars.pmc", 0xbf93052c) = -1 ENOENT (No such file or directory)
12287 20:25:19.358667 stat64("/usr/local/share/perl/5.8.8/vars.pm", 0xbf93043c) = -1 ENOENT (No such file or directory)
12287 20:25:19.358682 stat64("/usr/lib/perl5/vars.pmc", 0xbf93052c) = -1 ENOENT (No such file or directory)
12287 20:25:19.358705 stat64("/usr/lib/perl5/vars.pm", 0xbf93043c) = -1 ENOENT (No such file or directory)
12287 20:25:19.358719 stat64("/usr/share/perl5/vars.pmc", 0xbf93052c) = -1 ENOENT (No such file or directory)
12287 20:25:19.358731 stat64("/usr/share/perl5/vars.pm", 0xbf93043c) = -1 ENOENT (No such file or directory)
12287 20:25:19.358745 stat64("/usr/lib/perl/5.8/vars.pmc", 0xbf93052c) = -1 ENOENT (No such file or directory)
12287 20:25:19.358757 stat64("/usr/lib/perl/5.8/vars.pm", 0xbf93043c) = -1 ENOENT (No such file or directory)
12287 20:25:19.358771 stat64("/usr/share/perl/5.8/vars.pmc", 0xbf93052c) = -1 ENOENT (No such file or directory)
12287 20:25:19.358783 stat64("/usr/share/perl/5.8/vars.pm", {st_mode=S_IFREG|0644, st_size=1149, ...}) = 0
12287 20:25:19.358804 open("/usr/share/perl/5.8/vars.pm", O_RDONLY|O_LARGEFILE) = 10
12287 20:25:19.358819 ioctl(10, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf930248) = -1 ENOTTY (Inappropriate ioctl for device)
12287 20:25:19.358830 _llseek(10, 0, [0], SEEK_CUR) = 0
12287 20:25:19.358848 read(10, "package vars;\n\nuse 5.006;\n\nour $VERSION = \'1.01\';\n\nuse warnings::register;\nuse strict qw(vars subs);\n\nsub import {\n    my $callpack = caller;\n    my ($pack, @imports) = @_;\n    my ($sym, $ch);\n    foreach (@imports) {\n        if (($ch, $sym) = /^([\\$\\@\\%\\*\\&])(.+)/) {\n\t    if ($sym =~ /\\W/) {\n\t\t# time for a more-detailed check-up\n\t\tif ($sym =~ /^\\w+[[{].*[]}]$/) {\n\t\t    require Carp;\n\t\t    Carp::croak(\"Can\'t declare individual elements of hash or array\");\n\t\t} elsif (warnings::enabled() and length($sym) == 1 and $sym !~ tr/a-zA-Z//) {\n\t\t    warnings::warn(\"No need to declare built-in vars\");\n\t\t} elsif  (($^H &= strict::bits(\'vars\'))) {\n\t\t    require Carp;\n\t\t    Carp::croak(\"\'$_\' is not a valid variable name under strict vars\");\n\t\t}\n\t    }\n\t    $sym = \"${callpack}::$sym\" unless $sym =~ /::/;\n\t    *$sym =\n\t\t(  $ch eq \"\\$\" ? \\$$sym\n\t\t : $ch eq \"\\@\" ? \\@$sym\n\t\t : $ch eq \"\\%\" ? \\%$sym\n\t\t : $ch eq \"\\*\" ? \\*$sym\n\t\t : $ch eq \"\\&\" ? \\&$sym \n\t\t : do {\n\t\t     require Carp;\n\t\t     Carp::croak(\"\'$_\' is not a valid variable name\");\n\t\t });\n\t} else {\n\t    require Carp;\n\t    Carp::croak(\"\'$_\' is not a valid variable name\");\n\t}\n    }\n};\n\n1;\n__END__\n\n", 4096) = 1149
12287 20:25:19.358980 stat64("/etc/perl/warnings/register.pmc", 0xbf93007c) = -1 ENOENT (No such file or directory)
12287 20:25:19.358995 stat64("/etc/perl/warnings/register.pm", 0xbf92ff8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.359008 stat64("/usr/local/lib/perl/5.8.8/warnings/register.pmc", 0xbf93007c) = -1 ENOENT (No such file or directory)
12287 20:25:19.359021 stat64("/usr/local/lib/perl/5.8.8/warnings/register.pm", 0xbf92ff8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.359036 stat64("/usr/local/share/perl/5.8.8/warnings/register.pmc", 0xbf93007c) = -1 ENOENT (No such file or directory)
12287 20:25:19.359049 stat64("/usr/local/share/perl/5.8.8/warnings/register.pm", 0xbf92ff8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.359063 stat64("/usr/lib/perl5/warnings/register.pmc", 0xbf93007c) = -1 ENOENT (No such file or directory)
12287 20:25:19.359076 stat64("/usr/lib/perl5/warnings/register.pm", 0xbf92ff8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.359089 stat64("/usr/share/perl5/warnings/register.pmc", 0xbf93007c) = -1 ENOENT (No such file or directory)
12287 20:25:19.359102 stat64("/usr/share/perl5/warnings/register.pm", 0xbf92ff8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.359115 stat64("/usr/lib/perl/5.8/warnings/register.pmc", 0xbf93007c) = -1 ENOENT (No such file or directory)
12287 20:25:19.359128 stat64("/usr/lib/perl/5.8/warnings/register.pm", 0xbf92ff8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.359142 stat64("/usr/share/perl/5.8/warnings/register.pmc", 0xbf93007c) = -1 ENOENT (No such file or directory)
12287 20:25:19.359156 stat64("/usr/share/perl/5.8/warnings/register.pm", {st_mode=S_IFREG|0644, st_size=732, ...}) = 0
12287 20:25:19.359177 open("/usr/share/perl/5.8/warnings/register.pm", O_RDONLY|O_LARGEFILE) = 11
12287 20:25:19.359220 ioctl(11, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf92fd98) = -1 ENOTTY (Inappropriate ioctl for device)
12287 20:25:19.359231 _llseek(11, 0, [0], SEEK_CUR) = 0
12287 20:25:19.359267 read(11, "package warnings::register;\n\nour $VERSION = \'1.01\';\n\nrequire warnings;\n\nsub mkMask\n{\n    my ($bit) = @_;\n    my $mask = \"\";\n\n    vec($mask, $bit, 1) = 1;\n    return $mask;\n}\n\nsub import\n{\n    shift;\n    my $package = (caller(0))[0];\n    if (! defined $warnings::Bits{$package}) {\n        $warnings::Bits{$package}     = mkMask($warnings::LAST_BIT);\n        vec($warnings::Bits{\'all\'}, $warnings::LAST_BIT, 1) = 1;\n        $warnings::Offsets{$package}  = $warnings::LAST_BIT ++;\n\tforeach my $k (keys %warnings::Bits) {\n\t    vec($warnings::Bits{$k}, $warnings::LAST_BIT, 1) = 0;\n\t}\n        $warnings::DeadBits{$package} = mkMask($warnings::LAST_BIT);\n        vec($warnings::DeadBits{\'all\'}, $warnings::LAST_BIT++, 1) = 1;\n    }\n}\n\n1;\n", 4096) = 732
12287 20:25:19.359411 read(11, "", 4096) = 0
12287 20:25:19.359424 close(11)         = 0
12287 20:25:19.359616 _llseek(10, 1148, [1148], SEEK_SET) = 0
12287 20:25:19.359635 _llseek(10, 0, [1148], SEEK_CUR) = 0
12287 20:25:19.359645 close(10)         = 0
12287 20:25:19.359794 _llseek(8, 594, [594], SEEK_SET) = 0
12287 20:25:19.359823 _llseek(8, 0, [594], SEEK_CUR) = 0
12287 20:25:19.359833 close(8)          = 0
12287 20:25:19.359866 stat64("/etc/perl/File/Spec/Unix.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.359881 stat64("/etc/perl/File/Spec/Unix.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.359895 stat64("/usr/local/lib/perl/5.8.8/File/Spec/Unix.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.359908 stat64("/usr/local/lib/perl/5.8.8/File/Spec/Unix.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.359923 stat64("/usr/local/share/perl/5.8.8/File/Spec/Unix.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.359936 stat64("/usr/local/share/perl/5.8.8/File/Spec/Unix.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.359950 stat64("/usr/lib/perl5/File/Spec/Unix.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.359962 stat64("/usr/lib/perl5/File/Spec/Unix.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.359976 stat64("/usr/share/perl5/File/Spec/Unix.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.359989 stat64("/usr/share/perl5/File/Spec/Unix.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.360002 stat64("/usr/lib/perl/5.8/File/Spec/Unix.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.360016 stat64("/usr/lib/perl/5.8/File/Spec/Unix.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.360051 stat64("/usr/share/perl/5.8/File/Spec/Unix.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.360064 stat64("/usr/share/perl/5.8/File/Spec/Unix.pm", {st_mode=S_IFREG|0644, st_size=7038, ...}) = 0
12287 20:25:19.360086 open("/usr/share/perl/5.8/File/Spec/Unix.pm", O_RDONLY|O_LARGEFILE) = 8
12287 20:25:19.360101 ioctl(8, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf9306f8) = -1 ENOTTY (Inappropriate ioctl for device)
12287 20:25:19.360112 _llseek(8, 0, [0], SEEK_CUR) = 0
12287 20:25:19.360130 read(8, "package File::Spec::Unix;\n\nuse strict;\nuse vars qw($VERSION);\n\n$VERSION = \'1.5\';\n\nsub canonpath {\n    my ($self,$path) = @_;\n    \n    # Handle POSIX-style node names beginning with double slash (qnx, nto)\n    # Handle network path names beginning with double slash (cygwin)\n    # (POSIX says: \"a pathname that begins with two successive slashes\n    # may be interpreted in an implementation-defined manner, although\n    # more than two leading slashes shall be treated as a single slash.\")\n    my $node = \'\';\n    if ( $^O =~ m/^(?:qnx|nto|cygwin)$/ && $path =~ s:^(//[^/]+)(/|\\z):/:s ) {\n      $node = $1;\n    }\n    # This used to be\n    # $path =~ s|/+|/|g unless($^O eq \'cygwin\');\n    # but that made tests 29, 30, 35, 46, and 213 (as of #13272) to fail\n    # (Mainly because trailing \"\" directories didn\'t get stripped).\n    # Why would cygwin avoid collapsing multiple slashes into one? --jhi\n    $path =~ s|/+|/|g;                             # xx////xx  -> xx/xx\n    $path =~ s@(/\\.)+(/|\\Z(?!\\n))@/@g;             # xx/././xx -> xx/xx\n    $path =~ s|^(\\./)+||s unless $path eq \"./\";    # ./xx      -> xx\n    $path =~ s|^/(\\.\\./)+|/|;                      # /../../xx -> xx\n    $path =~ s|^/\\.\\.$|/|;                         # /..       -> /\n    $path =~ s|/\\Z(?!\\n)|| unless $path eq \"/\";          # xx/       -> xx\n    return \"$node$path\";\n}\n\nsub catdir {\n    my $self = shift;\n\n    $self->canonpath(join(\'/\', @_, \'\')); # \'\' because need a trailing \'/\'\n}\n\nsub catfile {\n    my $self = shift;\n    my $file = $self->canonpath(pop @_);\n    return $file unless @_;\n    my $dir = $self->catdir(@_);\n    $dir .= \"/\" unless substr($dir,-1) eq \"/\";\n    return $dir.$file;\n}\n\nsub curdir () { \'.\' }\n\nsub devnull () { \'/dev/null\' }\n\nsub rootdir () { \'/\' }\n\nmy $tmpdir;\nsub _tmpdir {\n    return $tmpdir if defined $tmpdir;\n    my $self = shift;\n    my @dirlist = @_;\n    {\n\tno strict \'refs\';\n\tif (${\"\\cTAINT\"}) { # Check for taint mode on perl >= 5.8.0\n            require Scalar::Util;\n\t    @dirlist = grep { ! Scalar::Util::tainted($_) } @dirlist;\n\t}\n    }\n    foreach (@dirlist) {\n\tnext unless defined && -d && -w _;\n\t$tmpdir = $_;\n\tlast;\n    }\n    $tmpdir = $self->curdir unless defined $tmpdir;\n    $tmpdir = defined $tmpdir && $self->canonpath($tmpdir);\n    return $tmpdir;\n}\n\nsub tmpdir {\n    return $tmpdir if defined $tmpdir;\n    $tmpdir = $_[0]->_tmpdir( $ENV{TMPDIR}, \"/tmp\" );\n}\n\nsub updir () { \'..\' }\n\nsub no_upwards {\n    my $self = shift;\n    return grep(!/^\\.{1,2}\\Z(?!\\n)/s, @_);\n}\n\nsub case_tolerant () { 0 }\n\nsub file_name_is_absolute {\n    my ($self,$file) = @_;\n    return scalar($file =~ m:^/:s);\n}\n\nsub path {\n    return () unless exists $ENV{PATH};\n    my @path = split(\':\', $ENV{PATH});\n    foreach (@path) { $_ = \'.\' if $_ eq \'\' }\n    return @path;\n}\n\nsub join {\n    my $self = shift;\n    return $self->catfile(@_);\n}\n\nsub splitpath {\n    my ($self,$path, $nofile) = @_;\n\n    my ($volume,$directory,$file) = (\'\',\'\',\'\');\n\n    if ( $nofile ) {\n        $directory = $path;\n    }\n    else {\n        $path =~ m|^ ( (?: .* / (?: \\.\\.?\\Z(?!\\n) )? )? ) ([^/]*) |xs;\n        $directory = $1;\n        $file      = $2;\n    }\n\n    return ($volume,$directory,$file);\n}\n\nsub splitdir {\n    return split m|/|, $_[1], -1;  # Preserve trailing fields\n}\n\nsub catpath {\n    my ($self,$volume,$directory,$file) = @_;\n\n    if ( $directory ne \'\'                && \n         $file ne \'\'                     && \n         substr( $directory, -1 ) ne \'/\' && \n         substr( $file, 0, 1 ) ne \'/\' \n    ) {\n        $directory .= \"/$file\" ;\n    }\n    else {\n        $directory .= $file ;\n    }\n\n    return $directory ;\n}\n\nsub abs2rel {\n    my($self,$path,$base) = @_;\n\n    # Figure out the effective $base and clean it up.\n    if ( !defined( $base ) || $base eq \'\' ) {\n        $base = $self->_cwd();\n    }\n    elsif ( ! $self->file_name_is_absolute( $base ) ) {\n\tif ( ! $self->file_name_is_absolute( $path ) ) {\n\t    # optimisation where both paths are relative: save 2 x cwd\n\t    $base = $self->canonpath( \"/$base\" );\n\t    $path = \"/$path\";\n\t}\n\telse {\n\t    $base = $self->rel2abs( $base ) ;\n\t}\n    }\n  ", 4096) = 4096
12287 20:25:19.360869 brk(0x8218000)    = 0x8218000
12287 20:25:19.360999 read(8, "  else {\n        $base = $self->canonpath( $base ) ;\n    }\n\n    # Clean up $path\n    if ( ! $self->file_name_is_absolute( $path ) ) {\n        $path = $self->rel2abs( $path ) ;\n    }\n    else {\n        $path = $self->canonpath( $path ) ;\n    }\n\n    # Now, remove all leading components that are the same\n    my @pathchunks = $self->splitdir( $path);\n    my @basechunks = $self->splitdir( $base);\n\n    while (@pathchunks && @basechunks && $pathchunks[0] eq $basechunks[0]) {\n        shift @pathchunks ;\n        shift @basechunks ;\n    }\n\n    $path = CORE::join( \'/\', @pathchunks );\n    $base = CORE::join( \'/\', @basechunks );\n\n    # $base now contains the directories the resulting relative path \n    # must ascend out of before it can descend to $path_directory.  So, \n    # replace all names with $parentDir\n    $base =~ s|[^/]+|..|g ;\n\n    # Glue the two together, using a separator if necessary, and preventing an\n    # empty result.\n    if ( $path ne \'\' && $base ne \'\' ) {\n        $path = \"$base/$path\" ;\n    } else {\n        $path = \"$base$path\" ;\n    }\n\n    return $self->canonpath( $path ) ;\n}\n\nsub rel2abs {\n    my ($self,$path,$base ) = @_;\n\n    # Clean up $path\n    if ( ! $self->file_name_is_absolute( $path ) ) {\n        # Figure out the effective $base and clean it up.\n        if ( !defined( $base ) || $base eq \'\' ) {\n\t    $base = $self->_cwd();\n        }\n        elsif ( ! $self->file_name_is_absolute( $base ) ) {\n            $base = $self->rel2abs( $base ) ;\n        }\n        else {\n            $base = $self->canonpath( $base ) ;\n        }\n\n        # Glom them together\n        $path = $self->catdir( $base, $path ) ;\n    }\n\n    return $self->canonpath( $path ) ;\n}\n\n# Internal routine to File::Spec, no point in making this public since\n# it is the standard Cwd interface.  Most of the platform-specific\n# File::Spec subclasses use this.\nsub _cwd {\n    require Cwd;\n    Cwd::cwd();\n}\n\n# Internal method to reduce xx\\..\\yy -> yy\nsub _collapse {\n    my($fs, $path) = @_;\n\n    my $updir  = $fs->updir;\n    my $curdir = $fs->curdir;\n\n    my($vol, $dirs, $file) = $fs->splitpath($path);\n    my @dirs = $fs->splitdir($dirs);\n\n    my @collapsed;\n    foreach my $dir (@dirs) {\n        if( $dir eq $updir              and   # if we have an updir\n            @collapsed                  and   # and something to collapse\n            length $collapsed[-1]       and   # and its not the rootdir\n            $collapsed[-1] ne $updir    and   # nor another updir\n            $collapsed[-1] ne $curdir         # nor the curdir\n          ) \n        {                                     # then\n            pop @collapsed;                   # collapse\n        }\n        else {                                # else\n            push @collapsed, $dir;            # just hang onto it\n        }\n    }\n\n    return $fs->catpath($vol,\n                        $fs->catdir(@collapsed),\n                        $file\n                       );\n}\n\n1;\n", 4096) = 2942
12287 20:25:19.361435 read(8, "", 4096) = 0
12287 20:25:19.361450 close(8)          = 0
12287 20:25:19.361637 read(6, "", 4096) = 0
12287 20:25:19.361651 close(6)          = 0
12287 20:25:19.361859 stat64("/etc/perl/IO/Pipe.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.361876 stat64("/etc/perl/IO/Pipe.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.361891 stat64("/usr/local/lib/perl/5.8.8/IO/Pipe.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.361903 stat64("/usr/local/lib/perl/5.8.8/IO/Pipe.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.361918 stat64("/usr/local/share/perl/5.8.8/IO/Pipe.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.361930 stat64("/usr/local/share/perl/5.8.8/IO/Pipe.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.361944 stat64("/usr/lib/perl5/IO/Pipe.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.361956 stat64("/usr/lib/perl5/IO/Pipe.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.361969 stat64("/usr/share/perl5/IO/Pipe.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.361981 stat64("/usr/share/perl5/IO/Pipe.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.361993 stat64("/usr/lib/perl/5.8/IO/Pipe.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.362006 stat64("/usr/lib/perl/5.8/IO/Pipe.pm", {st_mode=S_IFREG|0644, st_size=3426, ...}) = 0
12287 20:25:19.362028 open("/usr/lib/perl/5.8/IO/Pipe.pm", O_RDONLY|O_LARGEFILE) = 6
12287 20:25:19.362043 ioctl(6, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf930ba8) = -1 ENOTTY (Inappropriate ioctl for device)
12287 20:25:19.362054 _llseek(6, 0, [0], SEEK_CUR) = 0
12287 20:25:19.362075 read(6, "# IO::Pipe.pm\n#\n# Copyright (c) 1996-8 Graham Barr <gbarr@pobox.com>. All rights reserved.\n# This program is free software; you can redistribute it and/or\n# modify it under the same terms as Perl itself.\n\npackage IO::Pipe;\n\nuse 5.006_001;\n\nuse IO::Handle;\nuse strict;\nour($VERSION);\nuse Carp;\nuse Symbol;\n\n$VERSION = \"1.13\";\n\nsub new {\n    my $type = shift;\n    my $class = ref($type) || $type || \"IO::Pipe\";\n    @_ == 0 || @_ == 2 or croak \"usage: new $class [READFH, WRITEFH]\";\n\n    my $me = bless gensym(), $class;\n\n    my($readfh,$writefh) = @_ ? @_ : $me->handles;\n\n    pipe($readfh, $writefh)\n\tor return undef;\n\n    @{*$me} = ($readfh, $writefh);\n\n    $me;\n}\n\nsub handles {\n    @_ == 1 or croak \'usage: $pipe->handles()\';\n    (IO::Pipe::End->new(), IO::Pipe::End->new());\n}\n\nmy $do_spawn = $^O eq \'os2\' || $^O eq \'MSWin32\';\n\nsub _doit {\n    my $me = shift;\n    my $rw = shift;\n\n    my $pid = $do_spawn ? 0 : fork();\n\n    if($pid) { # Parent\n        return $pid;\n    }\n    elsif(defined $pid) { # Child or spawn\n        my $fh;\n        my $io = $rw ? \\*STDIN : \\*STDOUT;\n        my ($mode, $save) = $rw ? \"r\" : \"w\";\n        if ($do_spawn) {\n          require Fcntl;\n          $save = IO::Handle->new_from_fd($io, $mode);\n\t  my $handle = shift;\n          # Close in child:\n\t  unless ($^O eq \'MSWin32\') {\n            fcntl($handle, Fcntl::F_SETFD(), 1) or croak \"fcntl: $!\";\n\t  }\n          $fh = $rw ? ${*$me}[0] : ${*$me}[1];\n        } else {\n          shift;\n          $fh = $rw ? $me->reader() : $me->writer(); # close the other end\n        }\n        bless $io, \"IO::Handle\";\n        $io->fdopen($fh, $mode);\n\t$fh->close;\n\n        if ($do_spawn) {\n          $pid = eval { system 1, @_ }; # 1 == P_NOWAIT\n          my $err = $!;\n    \n          $io->fdopen($save, $mode);\n          $save->close or croak \"Cannot close $!\";\n          croak \"IO::Pipe: Cannot spawn-NOWAIT: $err\" if not $pid or $pid < 0;\n          return $pid;\n        } else {\n          exec @_ or\n            croak \"IO::Pipe: Cannot exec: $!\";\n        }\n    }\n    else {\n        croak \"IO::Pipe: Cannot fork: $!\";\n    }\n\n    # NOT Reached\n}\n\nsub reader {\n    @_ >= 1 or croak \'usage: $pipe->reader( [SUB_COMMAND_ARGS] )\';\n    my $me = shift;\n\n    return undef\n\tunless(ref($me) || ref($me = $me->new));\n\n    my $fh  = ${*$me}[0];\n    my $pid;\n    $pid = $me->_doit(0, $fh, @_)\n        if(@_);\n\n    close ${*$me}[1];\n    bless $me, ref($fh);\n    *$me = *$fh;          # Alias self to handle\n    $me->fdopen($fh->fileno,\"r\")\n\tunless defined($me->fileno);\n    bless $fh;                  # Really wan\'t un-bless here\n    ${*$me}{\'io_pipe_pid\'} = $pid\n        if defined $pid;\n\n    $me;\n}\n\nsub writer {\n    @_ >= 1 or croak \'usage: $pipe->writer( [SUB_COMMAND_ARGS] )\';\n    my $me = shift;\n\n    return undef\n\tunless(ref($me) || ref($me = $me->new));\n\n    my $fh  = ${*$me}[1];\n    my $pid;\n    $pid = $me->_doit(1, $fh, @_)\n        if(@_);\n\n    close ${*$me}[0];\n    bless $me, ref($fh);\n    *$me = *$fh;          # Alias self to handle\n    $me->fdopen($fh->fileno,\"w\")\n\tunless defined($me->fileno);\n    bless $fh;                  # Really wan\'t un-bless here\n    ${*$me}{\'io_pipe_pid\'} = $pid\n        if defined $pid;\n\n    $me;\n}\n\npackage IO::Pipe::End;\n\nour(@ISA);\n\n@ISA = qw(IO::Handle);\n\nsub close {\n    my $fh = shift;\n    my $r = $fh->SUPER::close(@_);\n\n    waitpid(${*$fh}{\'io_pipe_pid\'},0)\n\tif(defined ${*$fh}{\'io_pipe_pid\'});\n\n    $r;\n}\n\n1;\n\n__END__\n\n", 4096) = 3426
12287 20:25:19.362670 _llseek(6, 3425, [3425], SEEK_SET) = 0
12287 20:25:19.362670 _llseek(6, 0, [3425], SEEK_CUR) = 0
12287 20:25:19.362670 close(6)          = 0
12287 20:25:19.362671 stat64("/etc/perl/IO/Socket.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.362671 stat64("/etc/perl/IO/Socket.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.362671 stat64("/usr/local/lib/perl/5.8.8/IO/Socket.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.362671 stat64("/usr/local/lib/perl/5.8.8/IO/Socket.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.362681 stat64("/usr/local/share/perl/5.8.8/IO/Socket.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.362694 stat64("/usr/local/share/perl/5.8.8/IO/Socket.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.362709 stat64("/usr/lib/perl5/IO/Socket.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.362720 stat64("/usr/lib/perl5/IO/Socket.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.362738 stat64("/usr/share/perl5/IO/Socket.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.362750 stat64("/usr/share/perl5/IO/Socket.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.362766 stat64("/usr/lib/perl/5.8/IO/Socket.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.362779 stat64("/usr/lib/perl/5.8/IO/Socket.pm", {st_mode=S_IFREG|0644, st_size=6699, ...}) = 0
12287 20:25:19.362819 open("/usr/lib/perl/5.8/IO/Socket.pm", O_RDONLY|O_LARGEFILE) = 6
12287 20:25:19.362882 ioctl(6, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf930ba8) = -1 ENOTTY (Inappropriate ioctl for device)
12287 20:25:19.362908 _llseek(6, 0, [0], SEEK_CUR) = 0
12287 20:25:19.362927 read(6, "# IO::Socket.pm\n#\n# Copyright (c) 1997-8 Graham Barr <gbarr@pobox.com>. All rights reserved.\n# This program is free software; you can redistribute it and/or\n# modify it under the same terms as Perl itself.\n\npackage IO::Socket;\n\nrequire 5.006;\n\nuse IO::Handle;\nuse Socket 1.3;\nuse Carp;\nuse strict;\nour(@ISA, $VERSION, @EXPORT_OK);\nuse Exporter;\nuse Errno;\n\n# legacy\n\nrequire IO::Socket::INET;\nrequire IO::Socket::UNIX if ($^O ne \'epoc\' && $^O ne \'symbian\');\n\n@ISA = qw(IO::Handle);\n\n$VERSION = \"1.29\";\n\n@EXPORT_OK = qw(sockatmark);\n\nsub import {\n    my $pkg = shift;\n    if (@_ && $_[0] eq \'sockatmark\') { # not very extensible but for now, fast\n\tExporter::export_to_level(\'IO::Socket\', 1, $pkg, \'sockatmark\');\n    } else {\n\tmy $callpkg = caller;\n\tExporter::export \'Socket\', $callpkg, @_;\n    }\n}\n\nsub new {\n    my($class,%arg) = @_;\n    my $sock = $class->SUPER::new();\n\n    $sock->autoflush(1);\n\n    ${*$sock}{\'io_socket_timeout\'} = delete $arg{Timeout};\n\n    return scalar(%arg) ? $sock->configure(\\%arg)\n\t\t\t: $sock;\n}\n\nmy @domain2pkg;\n\nsub register_domain {\n    my($p,$d) = @_;\n    $domain2pkg[$d] = $p;\n}\n\nsub configure {\n    my($sock,$arg) = @_;\n    my $domain = delete $arg->{Domain};\n\n    croak \'IO::Socket: Cannot configure a generic socket\'\n\tunless defined $domain;\n\n    croak \"IO::Socket: Unsupported socket domain\"\n\tunless defined $domain2pkg[$domain];\n\n    croak \"IO::Socket: Cannot configure socket in domain \'$domain\'\"\n\tunless ref($sock) eq \"IO::Socket\";\n\n    bless($sock, $domain2pkg[$domain]);\n    $sock->configure($arg);\n}\n\nsub socket {\n    @_ == 4 or croak \'usage: $sock->socket(DOMAIN, TYPE, PROTOCOL)\';\n    my($sock,$domain,$type,$protocol) = @_;\n\n    socket($sock,$domain,$type,$protocol) or\n    \treturn undef;\n\n    ${*$sock}{\'io_socket_domain\'} = $domain;\n    ${*$sock}{\'io_socket_type\'}   = $type;\n    ${*$sock}{\'io_socket_proto\'}  = $protocol;\n\n    $sock;\n}\n\nsub socketpair {\n    @_ == 4 || croak \'usage: IO::Socket->socketpair(DOMAIN, TYPE, PROTOCOL)\';\n    my($class,$domain,$type,$protocol) = @_;\n    my $sock1 = $class->new();\n    my $sock2 = $class->new();\n\n    socketpair($sock1,$sock2,$domain,$type,$protocol) or\n    \treturn ();\n\n    ${*$sock1}{\'io_socket_type\'}  = ${*$sock2}{\'io_socket_type\'}  = $type;\n    ${*$sock1}{\'io_socket_proto\'} = ${*$sock2}{\'io_socket_proto\'} = $protocol;\n\n    ($sock1,$sock2);\n}\n\nsub connect {\n    @_ == 2 or croak \'usage: $sock->connect(NAME)\';\n    my $sock = shift;\n    my $addr = shift;\n    my $timeout = ${*$sock}{\'io_socket_timeout\'};\n    my $err;\n    my $blocking;\n\n    $blocking = $sock->blocking(0) if $timeout;\n    if (!connect($sock, $addr)) {\n\tif (defined $timeout && $!{EINPROGRESS}) {\n\t    require IO::Select;\n\n\t    my $sel = new IO::Select $sock;\n\n\t    if (!$sel->can_write($timeout)) {\n\t\t$err = $! || (exists &Errno::ETIMEDOUT ? &Errno::ETIMEDOUT : 1);\n\t\t$@ = \"connect: timeout\";\n\t    }\n\t    elsif (!connect($sock,$addr) && not $!{EISCONN}) {\n\t\t# Some systems refuse to re-connect() to\n\t\t# an already open socket and set errno to EISCONN.\n\t\t$err = $!;\n\t\t$@ = \"connect: $!\";\n\t    }\n\t}\n        elsif ($blocking || !$!{EINPROGRESS})  {\n\t    $err = $!;\n\t    $@ = \"connect: $!\";\n\t}\n    }\n\n    $sock->blocking(1) if $blocking;\n\n    $! = $err if $err;\n\n    $err ? undef : $sock;\n}\n\nsub bind {\n    @_ == 2 or croak \'usage: $sock->bind(NAME)\';\n    my $sock = shift;\n    my $addr = shift;\n\n    return bind($sock, $addr) ? $sock\n\t\t\t      : undef;\n}\n\nsub listen {\n    @_ >= 1 && @_ <= 2 or croak \'usage: $sock->listen([QUEUE])\';\n    my($sock,$queue) = @_;\n    $queue = 5\n\tunless $queue && $queue > 0;\n\n    return listen($sock, $queue) ? $sock\n\t\t\t\t : undef;\n}\n\nsub accept {\n    @_ == 1 || @_ == 2 or croak \'usage $sock->accept([PKG])\';\n    my $sock = shift;\n    my $pkg = shift || $sock;\n    my $timeout = ${*$sock}{\'io_socket_timeout\'};\n    my $new = $pkg->new(Timeout => $timeout);\n    my $peer = undef;\n\n    if(defined $timeout) {\n\trequire IO::Select;\n\n\tmy $sel = new IO::Select $sock;\n\n\tunless ($sel->can_read($timeout)) {\n\t    $@ = \'accept: timeout\';\n\t    $! = (exists &Errno::ETIMEDOUT ? &Errno::ETIMEDOUT : 1);\n\t    return;\n\t}\n", 4096) = 4096
12287 20:25:19.363390 stat64("/etc/perl/Socket.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.363406 stat64("/etc/perl/Socket.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.363419 stat64("/usr/local/lib/perl/5.8.8/Socket.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.363432 stat64("/usr/local/lib/perl/5.8.8/Socket.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.363446 stat64("/usr/local/share/perl/5.8.8/Socket.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.363458 stat64("/usr/local/share/perl/5.8.8/Socket.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.363472 stat64("/usr/lib/perl5/Socket.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.363484 stat64("/usr/lib/perl5/Socket.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.363497 stat64("/usr/share/perl5/Socket.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.363509 stat64("/usr/share/perl5/Socket.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.363522 stat64("/usr/lib/perl/5.8/Socket.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.363534 stat64("/usr/lib/perl/5.8/Socket.pm", {st_mode=S_IFREG|0644, st_size=3514, ...}) = 0
12287 20:25:19.363555 open("/usr/lib/perl/5.8/Socket.pm", O_RDONLY|O_LARGEFILE) = 8
12287 20:25:19.363570 ioctl(8, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf9306f8) = -1 ENOTTY (Inappropriate ioctl for device)
12287 20:25:19.363582 _llseek(8, 0, [0], SEEK_CUR) = 0
12287 20:25:19.363600 read(8, "package Socket;\n\nour($VERSION, @ISA, @EXPORT, @EXPORT_OK, %EXPORT_TAGS);\n$VERSION = \"1.78\";\n\nuse Carp;\nuse warnings::register;\n\nrequire Exporter;\nuse XSLoader ();\n@ISA = qw(Exporter);\n@EXPORT = qw(\n\tinet_aton inet_ntoa\n\tsockaddr_family\n\tpack_sockaddr_in unpack_sockaddr_in\n\tpack_sockaddr_un unpack_sockaddr_un\n\tsockaddr_in sockaddr_un\n\tINADDR_ANY INADDR_BROADCAST INADDR_LOOPBACK INADDR_NONE\n\tAF_802\n\tAF_AAL\n\tAF_APPLETALK\n\tAF_CCITT\n\tAF_CHAOS\n\tAF_CTF\n\tAF_DATAKIT\n\tAF_DECnet\n\tAF_DLI\n\tAF_ECMA\n\tAF_GOSIP\n\tAF_HYLINK\n\tAF_IMPLINK\n\tAF_INET\n\tAF_INET6\n\tAF_ISO\n\tAF_KEY\n\tAF_LAST\n\tAF_LAT\n\tAF_LINK\n\tAF_MAX\n\tAF_NBS\n\tAF_NIT\n\tAF_NS\n\tAF_OSI\n\tAF_OSINET\n\tAF_PUP\n\tAF_ROUTE\n\tAF_SNA\n\tAF_UNIX\n\tAF_UNSPEC\n\tAF_USER\n\tAF_WAN\n\tAF_X25\n\tIOV_MAX\n\tMSG_BCAST\n\tMSG_BTAG\n\tMSG_CTLFLAGS\n\tMSG_CTLIGNORE\n\tMSG_CTRUNC\n\tMSG_DONTROUTE\n\tMSG_DONTWAIT\n\tMSG_EOF\n\tMSG_EOR\n\tMSG_ERRQUEUE\n\tMSG_ETAG\n\tMSG_FIN\n\tMSG_MAXIOVLEN\n\tMSG_MCAST\n\tMSG_NOSIGNAL\n\tMSG_OOB\n\tMSG_PEEK\n\tMSG_PROXY\n\tMSG_RST\n\tMSG_SYN\n\tMSG_TRUNC\n\tMSG_URG\n\tMSG_WAITALL\n\tMSG_WIRE\n\tPF_802\n\tPF_AAL\n\tPF_APPLETALK\n\tPF_CCITT\n\tPF_CHAOS\n\tPF_CTF\n\tPF_DATAKIT\n\tPF_DECnet\n\tPF_DLI\n\tPF_ECMA\n\tPF_GOSIP\n\tPF_HYLINK\n\tPF_IMPLINK\n\tPF_INET\n\tPF_INET6\n\tPF_ISO\n\tPF_KEY\n\tPF_LAST\n\tPF_LAT\n\tPF_LINK\n\tPF_MAX\n\tPF_NBS\n\tPF_NIT\n\tPF_NS\n\tPF_OSI\n\tPF_OSINET\n\tPF_PUP\n\tPF_ROUTE\n\tPF_SNA\n\tPF_UNIX\n\tPF_UNSPEC\n\tPF_USER\n\tPF_WAN\n\tPF_X25\n\tSCM_CONNECT\n\tSCM_CREDENTIALS\n\tSCM_CREDS\n\tSCM_RIGHTS\n\tSCM_TIMESTAMP\n\tSHUT_RD\n\tSHUT_RDWR\n\tSHUT_WR\n\tSOCK_DGRAM\n\tSOCK_RAW\n\tSOCK_RDM\n\tSOCK_SEQPACKET\n\tSOCK_STREAM\n\tSOL_SOCKET\n\tSOMAXCONN\n\tSO_ACCEPTCONN\n\tSO_ATTACH_FILTER\n\tSO_BACKLOG\n\tSO_BROADCAST\n\tSO_CHAMELEON\n\tSO_DEBUG\n\tSO_DETACH_FILTER\n\tSO_DGRAM_ERRIND\n\tSO_DONTLINGER\n\tSO_DONTROUTE\n\tSO_ERROR\n\tSO_FAMILY\n\tSO_KEEPALIVE\n\tSO_LINGER\n\tSO_OOBINLINE\n\tSO_PASSCRED\n\tSO_PASSIFNAME\n\tSO_PEERCRED\n\tSO_PROTOCOL\n\tSO_PROTOTYPE\n\tSO_RCVBUF\n\tSO_RCVLOWAT\n\tSO_RCVTIMEO\n\tSO_REUSEADDR\n\tSO_REUSEPORT\n\tSO_SECURITY_AUTHENTICATION\n\tSO_SECURITY_ENCRYPTION_NETWORK\n\tSO_SECURITY_ENCRYPTION_TRANSPORT\n\tSO_SNDBUF\n\tSO_SNDLOWAT\n\tSO_SNDTIMEO\n\tSO_STATE\n\tSO_TYPE\n\tSO_USELOOPBACK\n\tSO_XOPEN\n\tSO_XSE\n\tUIO_MAXIOV\n);\n\n@EXPORT_OK = qw(CR LF CRLF $CR $LF $CRLF\n\n\t       IPPROTO_TCP\n\t       TCP_KEEPALIVE\n\t       TCP_MAXRT\n\t       TCP_MAXSEG\n\t       TCP_NODELAY\n\t       TCP_STDURG);\n\n%EXPORT_TAGS = (\n    crlf    => [qw(CR LF CRLF $CR $LF $CRLF)],\n    all     => [@EXPORT, @EXPORT_OK],\n);\n\nBEGIN {\n    sub CR   () {\"\\015\"}\n    sub LF   () {\"\\012\"}\n    sub CRLF () {\"\\015\\012\"}\n}\n\n*CR   = \\CR();\n*LF   = \\LF();\n*CRLF = \\CRLF();\n\nsub sockaddr_in {\n    if (@_ == 6 && !wantarray) { # perl5.001m compat; use this && die\n\tmy($af, $port, @quad) = @_;\n\twarnings::warn \"6-ARG sockaddr_in call is deprecated\" \n\t    if warnings::enabled();\n\tpack_sockaddr_in($port, inet_aton(join(\'.\', @quad)));\n    } elsif (wantarray) {\n\tcroak \"usage:   (port,iaddr) = sockaddr_in(sin_sv)\" unless @_ == 1;\n        unpack_sockaddr_in(@_);\n    } else {\n\tcroak \"usage:   sin_sv = sockaddr_in(port,iaddr))\" unless @_ == 2;\n        pack_sockaddr_in(@_);\n    }\n}\n\nsub sockaddr_un {\n    if (wantarray) {\n\tcroak \"usage:   (filename) = sockaddr_un(sun_sv)\" unless @_ == 1;\n        unpack_sockaddr_un(@_);\n    } else {\n\tcroak \"usage:   sun_sv = sockaddr_un(filename)\" unless @_ == 1;\n        pack_sockaddr_un(@_);\n    }\n}\n\nsub AUTOLOAD {\n    my($constname);\n    ($constname = $AUTOLOAD) =~ s/.*:://;\n    croak \"&Socket::constant not defined\" if $constname eq \'constant\';\n    my ($error, $val) = constant($constname);\n    if ($error) {\n\tcroak $error;\n    }\n    *$AUTOLOAD = sub { $val };\n    goto &$AUTOLOAD;\n}\n\nXSLoader::load \'Socket\', $VERSION;\n\n1;\n", 4096) = 3514
12287 20:25:19.364113 brk(0x8239000)    = 0x8239000
12287 20:25:19.364361 read(8, "", 4096) = 0
12287 20:25:19.364378 close(8)          = 0
12287 20:25:19.364513 stat64("/usr/lib/perl/5.8/auto/Socket/Socket.so", {st_mode=S_IFREG|0644, st_size=19676, ...}) = 0
12287 20:25:19.364538 stat64("/usr/lib/perl/5.8/auto/Socket/Socket.bs", {st_mode=S_IFREG|0644, st_size=0, ...}) = 0
12287 20:25:19.364566 open("/usr/lib/perl/5.8/auto/Socket/Socket.so", O_RDONLY) = 8
12287 20:25:19.364580 read(8, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0\360\16\0\0004\0\0\0\34I\0\0\0\0\0\0004\0 \0\4\0(\0\30\0\27\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\264F\0\0\264F\0\0\5\0\0\0\0\20\0\0\1\0\0\0\264F\0\0\264V\0\0\264V\0\0\274\1\0\0\300\1\0\0\6\0\0\0\0\20\0\0\2\0\0\0\310F\0\0\310V\0\0\310V\0\0\310\0\0\0\310\0\0\0\6\0\0\0\4\0\0\0Q\345td\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\4\0\0\0%\0\0\0008\0\0\0\0\0\0\0\10\0\0\0\22\0\0\0\35\0\0\0\0\0\0\0)\0\0\0\0\0\0\0\0\0\0\0\7\0\0\0\37\0\0\0\0\0\0\0\0\0\0\0007\0\0\0$\0\0\0-\0\0\0(\0\0\0\36\0\0\0\n\0\0\0,\0\0\0001\0\0\0 \0\0\0\0\0\0\0000\0\0\0\0\0\0\0005\0\0\0!\0\0\0\0\0\0\0\30\0\0\0002\0\0\0\27\0\0\0\'\0\0\0+\0\0\0\f\0\0\0\0\0\0\0.\0\0\0/\0\0\0&\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0*\0\0\0\0\0\0\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\4\0\0\0\17\0\0\0\0\0\0\0\6\0\0\0\20\0\0\0\0\0\0\0\21\0\0\0\24\0\0\0\26\0\0\0\0\0\0\0\23\0\0\0\0\0\0\0\25\0\0\0\0\0\0\0\0\0\0\0\r\0\0\0\0\0\0\0\31\0\0\0003\0\0\0\0\0\0\0\34\0\0\0\0\0\0\0\0\0\0\0%\0\0\0#\0\0\0\5\0\0\0004\0\0\0\0\0\0\0\33\0\0\0", 512) = 512
12287 20:25:19.364673 fstat64(8, {st_mode=S_IFREG|0644, st_size=19676, ...}) = 0
12287 20:25:19.364692 mmap2(NULL, 22644, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 8, 0) = 0xb7d95000
12287 20:25:19.364705 mmap2(0xb7d9a000, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 8, 0x4) = 0xb7d9a000
12287 20:25:19.364721 close(8)          = 0
12287 20:25:19.365301 brk(0x825a000)    = 0x825a000
12287 20:25:19.365505 stat64("/etc/perl/Errno.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.365522 stat64("/etc/perl/Errno.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.365536 stat64("/usr/local/lib/perl/5.8.8/Errno.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.365549 stat64("/usr/local/lib/perl/5.8.8/Errno.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.365563 stat64("/usr/local/share/perl/5.8.8/Errno.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.365575 stat64("/usr/local/share/perl/5.8.8/Errno.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.365589 stat64("/usr/lib/perl5/Errno.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.365601 stat64("/usr/lib/perl5/Errno.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.365614 stat64("/usr/share/perl5/Errno.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.365626 stat64("/usr/share/perl5/Errno.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.365639 stat64("/usr/lib/perl/5.8/Errno.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.365652 stat64("/usr/lib/perl/5.8/Errno.pm", {st_mode=S_IFREG|0644, st_size=5967, ...}) = 0
12287 20:25:19.365673 open("/usr/lib/perl/5.8/Errno.pm", O_RDONLY|O_LARGEFILE) = 8
12287 20:25:19.365687 ioctl(8, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf9306f8) = -1 ENOTTY (Inappropriate ioctl for device)
12287 20:25:19.365698 _llseek(8, 0, [0], SEEK_CUR) = 0
12287 20:25:19.365718 read(8, "#\n# This file is auto-generated. ***ANY*** changes here will be lost\n#\n\npackage Errno;\nour (@EXPORT_OK,%EXPORT_TAGS,@ISA,$VERSION,%errno,$AUTOLOAD);\nuse Exporter ();\nuse strict;\n\n$VERSION = \"1.09_01\";\n$VERSION = eval $VERSION;\n@ISA = qw(Exporter);\n\n@EXPORT_OK = qw(EBADR ENOMSG ENOTSUP ESTRPIPE EADDRINUSE EL3HLT EBADF\n\tENOTBLK ENAVAIL ECHRNG ENOTNAM ELNRNG ENOKEY EXDEV EBADE EBADSLT\n\tECONNREFUSED ENOSTR ENONET EOVERFLOW EISCONN EFBIG EKEYREVOKED\n\tECONNRESET EWOULDBLOCK ELIBMAX EREMOTEIO ENOPKG ELIBSCN EDESTADDRREQ\n\tENOTSOCK EIO EMEDIUMTYPE EINPROGRESS ERANGE EAFNOSUPPORT EADDRNOTAVAIL\n\tEINTR EREMOTE EILSEQ ENOMEM EPIPE ENETUNREACH ENODATA EUSERS\n\tEOPNOTSUPP EPROTO EISNAM ESPIPE EALREADY ENAMETOOLONG ENOEXEC EISDIR\n\tEBADRQC EEXIST EDOTDOT ELIBBAD EOWNERDEAD ESRCH EFAULT EXFULL\n\tEDEADLOCK EAGAIN ENOPROTOOPT ENETDOWN EPROTOTYPE EL2NSYNC ENETRESET\n\tEUCLEAN EADV EROFS ESHUTDOWN EMULTIHOP EPROTONOSUPPORT ENFILE ENOLCK\n\tECONNABORTED ECANCELED EDEADLK ESRMNT ENOLINK ETIME ENOTDIR EINVAL\n\tENOTTY ENOANO ELOOP ENOENT EPFNOSUPPORT EBADMSG ENOMEDIUM EL2HLT EDOM\n\tEBFONT EKEYEXPIRED EMSGSIZE ENOCSI EL3RST ENOSPC EIDRM ENOBUFS ENOSYS\n\tEHOSTDOWN EBADFD ENOSR ENOTCONN ESTALE EDQUOT EKEYREJECTED EMFILE\n\tENOTRECOVERABLE EACCES EBUSY E2BIG EPERM ELIBEXEC ETOOMANYREFS ELIBACC\n\tENOTUNIQ ECOMM ERESTART ESOCKTNOSUPPORT EUNATCH ETIMEDOUT ENXIO ENODEV\n\tETXTBSY EMLINK ECHILD EHOSTUNREACH EREMCHG ENOTEMPTY);\n\t\n%EXPORT_TAGS = (\n    POSIX => [qw(\n\tE2BIG EACCES EADDRINUSE EADDRNOTAVAIL EAFNOSUPPORT EAGAIN EALREADY\n\tEBADF EBUSY ECHILD ECONNABORTED ECONNREFUSED ECONNRESET EDEADLK\n\tEDESTADDRREQ EDOM EDQUOT EEXIST EFAULT EFBIG EHOSTDOWN EHOSTUNREACH\n\tEINPROGRESS EINTR EINVAL EIO EISCONN EISDIR ELOOP EMFILE EMLINK\n\tEMSGSIZE ENAMETOOLONG ENETDOWN ENETRESET ENETUNREACH ENFILE ENOBUFS\n\tENODEV ENOENT ENOEXEC ENOLCK ENOMEM ENOPROTOOPT ENOSPC ENOSYS ENOTBLK\n\tENOTCONN ENOTDIR ENOTEMPTY ENOTSOCK ENOTTY ENXIO EOPNOTSUPP EPERM\n\tEPFNOSUPPORT EPIPE EPROTONOSUPPORT EPROTOTYPE ERANGE EREMOTE ERESTART\n\tEROFS ESHUTDOWN ESOCKTNOSUPPORT ESPIPE ESRCH ESTALE ETIMEDOUT\n\tETOOMANYREFS ETXTBSY EUSERS EWOULDBLOCK EXDEV\n    )]\n);\n\nsub EPERM () { 1 }\nsub ENOENT () { 2 }\nsub ESRCH () { 3 }\nsub EINTR () { 4 }\nsub EIO () { 5 }\nsub ENXIO () { 6 }\nsub E2BIG () { 7 }\nsub ENOEXEC () { 8 }\nsub EBADF () { 9 }\nsub ECHILD () { 10 }\nsub EWOULDBLOCK () { 11 }\nsub EAGAIN () { 11 }\nsub ENOMEM () { 12 }\nsub EACCES () { 13 }\nsub EFAULT () { 14 }\nsub ENOTBLK () { 15 }\nsub EBUSY () { 16 }\nsub EEXIST () { 17 }\nsub EXDEV () { 18 }\nsub ENODEV () { 19 }\nsub ENOTDIR () { 20 }\nsub EISDIR () { 21 }\nsub EINVAL () { 22 }\nsub ENFILE () { 23 }\nsub EMFILE () { 24 }\nsub ENOTTY () { 25 }\nsub ETXTBSY () { 26 }\nsub EFBIG () { 27 }\nsub ENOSPC () { 28 }\nsub ESPIPE () { 29 }\nsub EROFS () { 30 }\nsub EMLINK () { 31 }\nsub EPIPE () { 32 }\nsub EDOM () { 33 }\nsub ERANGE () { 34 }\nsub EDEADLOCK () { 35 }\nsub EDEADLK () { 35 }\nsub ENAMETOOLONG () { 36 }\nsub ENOLCK () { 37 }\nsub ENOSYS () { 38 }\nsub ENOTEMPTY () { 39 }\nsub ELOOP () { 40 }\nsub ENOMSG () { 42 }\nsub EIDRM () { 43 }\nsub ECHRNG () { 44 }\nsub EL2NSYNC () { 45 }\nsub EL3HLT () { 46 }\nsub EL3RST () { 47 }\nsub ELNRNG () { 48 }\nsub EUNATCH () { 49 }\nsub ENOCSI () { 50 }\nsub EL2HLT () { 51 }\nsub EBADE () { 52 }\nsub EBADR () { 53 }\nsub EXFULL () { 54 }\nsub ENOANO () { 55 }\nsub EBADRQC () { 56 }\nsub EBADSLT () { 57 }\nsub EBFONT () { 59 }\nsub ENOSTR () { 60 }\nsub ENODATA () { 61 }\nsub ETIME () { 62 }\nsub ENOSR () { 63 }\nsub ENONET () { 64 }\nsub ENOPKG () { 65 }\nsub EREMOTE () { 66 }\nsub ENOLINK () { 67 }\nsub EADV () { 68 }\nsub ESRMNT () { 69 }\nsub ECOMM () { 70 }\nsub EPROTO () { 71 }\nsub EMULTIHOP () { 72 }\nsub EDOTDOT () { 73 }\nsub EBADMSG () { 74 }\nsub EOVERFLOW () { 75 }\nsub ENOTUNIQ () { 76 }\nsub EBADFD () { 77 }\nsub EREMCHG () { 78 }\nsub ELIBACC () { 79 }\nsub ELIBBAD () { 80 }\nsub ELIBSCN () { 81 }\nsub ELIBMAX () { 82 }\nsub ELIBEXEC () { 83 }\nsub EILSEQ () { 84 }\nsub ERESTART () { 85 }\nsub ESTRPIPE () { 86 }\nsub EUSERS () { 87 }\nsub ENOTSOCK () { 88 }\nsub EDESTADDRREQ () { 89 }\nsub EMSGSIZE () { 90 }\nsub EPROTOTYPE () { 91 }\nsub ENOPROTOOPT () { 92 }\nsub EPROTONOSUPPORT () ", 4096) = 4096
12287 20:25:19.366612 read(8, "{ 93 }\nsub ESOCKTNOSUPPORT () { 94 }\nsub ENOTSUP () { 95 }\nsub EOPNOTSUPP () { 95 }\nsub EPFNOSUPPORT () { 96 }\nsub EAFNOSUPPORT () { 97 }\nsub EADDRINUSE () { 98 }\nsub EADDRNOTAVAIL () { 99 }\nsub ENETDOWN () { 100 }\nsub ENETUNREACH () { 101 }\nsub ENETRESET () { 102 }\nsub ECONNABORTED () { 103 }\nsub ECONNRESET () { 104 }\nsub ENOBUFS () { 105 }\nsub EISCONN () { 106 }\nsub ENOTCONN () { 107 }\nsub ESHUTDOWN () { 108 }\nsub ETOOMANYREFS () { 109 }\nsub ETIMEDOUT () { 110 }\nsub ECONNREFUSED () { 111 }\nsub EHOSTDOWN () { 112 }\nsub EHOSTUNREACH () { 113 }\nsub EALREADY () { 114 }\nsub EINPROGRESS () { 115 }\nsub ESTALE () { 116 }\nsub EUCLEAN () { 117 }\nsub ENOTNAM () { 118 }\nsub ENAVAIL () { 119 }\nsub EISNAM () { 120 }\nsub EREMOTEIO () { 121 }\nsub EDQUOT () { 122 }\nsub ENOMEDIUM () { 123 }\nsub EMEDIUMTYPE () { 124 }\nsub ECANCELED () { 125 }\nsub ENOKEY () { 126 }\nsub EKEYEXPIRED () { 127 }\nsub EKEYREVOKED () { 128 }\nsub EKEYREJECTED () { 129 }\nsub EOWNERDEAD () { 130 }\nsub ENOTRECOVERABLE () { 131 }\n\nsub TIEHASH { bless [] }\n\nsub FETCH {\n    my ($self, $errname) = @_;\n    my $proto = prototype(\"Errno::$errname\");\n    my $errno = \"\";\n    if (defined($proto) && $proto eq \"\") {\n\tno strict \'refs\';\n\t$errno = &$errname;\n        $errno = 0 unless $! == $errno;\n    }\n    return $errno;\n}\n\nsub STORE {\n    require Carp;\n    Carp::confess(\"ERRNO hash is read only!\");\n}\n\n*CLEAR = \\&STORE;\n*DELETE = \\&STORE;\n\nsub NEXTKEY {\n    my($k,$v);\n    while(($k,$v) = each %Errno::) {\n\tmy $proto = prototype(\"Errno::$k\");\n\tlast if (defined($proto) && $proto eq \"\");\n    }\n    $k\n}\n\nsub FIRSTKEY {\n    my $s = scalar keys %Errno::;\t# initialize iterator\n    goto &NEXTKEY;\n}\n\nsub EXISTS {\n    my ($self, $errname) = @_;\n    my $r = ref $errname;\n    my $proto = !$r || $r eq \'CODE\' ? prototype($errname) : undef;\n    defined($proto) && $proto eq \"\";\n}\n\ntie %!, __PACKAGE__;\n\n1;\n__END__\n\n", 4096) = 1871
12287 20:25:19.549649 _llseek(8, 5966, [5966], SEEK_SET) = 0
12287 20:25:19.549672 _llseek(8, 0, [5966], SEEK_CUR) = 0
12287 20:25:19.549683 close(8)          = 0
12287 20:25:19.550058 brk(0x827b000)    = 0x827b000
12287 20:25:19.550191 read(6, "    }\n\n    $peer = accept($new,$sock)\n\tor return;\n\n    return wantarray ? ($new, $peer)\n    \t      \t     : $new;\n}\n\nsub sockname {\n    @_ == 1 or croak \'usage: $sock->sockname()\';\n    getsockname($_[0]);\n}\n\nsub peername {\n    @_ == 1 or croak \'usage: $sock->peername()\';\n    my($sock) = @_;\n    getpeername($sock)\n      || ${*$sock}{\'io_socket_peername\'}\n      || undef;\n}\n\nsub connected {\n    @_ == 1 or croak \'usage: $sock->connected()\';\n    my($sock) = @_;\n    getpeername($sock);\n}\n\nsub send {\n    @_ >= 2 && @_ <= 4 or croak \'usage: $sock->send(BUF, [FLAGS, [TO]])\';\n    my $sock  = $_[0];\n    my $flags = $_[2] || 0;\n    my $peer  = $_[3] || $sock->peername;\n\n    croak \'send: Cannot determine peer address\'\n\t unless($peer);\n\n    my $r = defined(getpeername($sock))\n\t? send($sock, $_[1], $flags)\n\t: send($sock, $_[1], $flags, $peer);\n\n    # remember who we send to, if it was successful\n    ${*$sock}{\'io_socket_peername\'} = $peer\n\tif(@_ == 4 && defined $r);\n\n    $r;\n}\n\nsub recv {\n    @_ == 3 || @_ == 4 or croak \'usage: $sock->recv(BUF, LEN [, FLAGS])\';\n    my $sock  = $_[0];\n    my $len   = $_[2];\n    my $flags = $_[3] || 0;\n\n    # remember who we recv\'d from\n    ${*$sock}{\'io_socket_peername\'} = recv($sock, $_[1]=\'\', $len, $flags);\n}\n\nsub shutdown {\n    @_ == 2 or croak \'usage: $sock->shutdown(HOW)\';\n    my($sock, $how) = @_;\n    shutdown($sock, $how);\n}\n\nsub setsockopt {\n    @_ == 4 or croak \'$sock->setsockopt(LEVEL, OPTNAME)\';\n    setsockopt($_[0],$_[1],$_[2],$_[3]);\n}\n\nmy $intsize = length(pack(\"i\",0));\n\nsub getsockopt {\n    @_ == 3 or croak \'$sock->getsockopt(LEVEL, OPTNAME)\';\n    my $r = getsockopt($_[0],$_[1],$_[2]);\n    # Just a guess\n    $r = unpack(\"i\", $r)\n\tif(defined $r && length($r) == $intsize);\n    $r;\n}\n\nsub sockopt {\n    my $sock = shift;\n    @_ == 1 ? $sock->getsockopt(SOL_SOCKET,@_)\n\t    : $sock->setsockopt(SOL_SOCKET,@_);\n}\n\nsub atmark {\n    @_ == 1 or croak \'usage: $sock->atmark()\';\n    my($sock) = @_;\n    sockatmark($sock);\n}\n\nsub timeout {\n    @_ == 1 || @_ == 2 or croak \'usage: $sock->timeout([VALUE])\';\n    my($sock,$val) = @_;\n    my $r = ${*$sock}{\'io_socket_timeout\'};\n\n    ${*$sock}{\'io_socket_timeout\'} = defined $val ? 0 + $val : $val\n\tif(@_ == 2);\n\n    $r;\n}\n\nsub sockdomain {\n    @_ == 1 or croak \'usage: $sock->sockdomain()\';\n    my $sock = shift;\n    ${*$sock}{\'io_socket_domain\'};\n}\n\nsub socktype {\n    @_ == 1 or croak \'usage: $sock->socktype()\';\n    my $sock = shift;\n    ${*$sock}{\'io_socket_type\'}\n}\n\nsub protocol {\n    @_ == 1 or croak \'usage: $sock->protocol()\';\n    my($sock) = @_;\n    ${*$sock}{\'io_socket_proto\'};\n}\n\n1;\n\n__END__\n\n", 4096) = 2603
12287 20:25:19.550712 _llseek(6, 6698, [6698], SEEK_SET) = 0
12287 20:25:19.550730 _llseek(6, 0, [6698], SEEK_CUR) = 0
12287 20:25:19.550740 close(6)          = 0
12287 20:25:19.550762 stat64("/etc/perl/IO/Socket/INET.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.550777 stat64("/etc/perl/IO/Socket/INET.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.550792 stat64("/usr/local/lib/perl/5.8.8/IO/Socket/INET.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.550807 stat64("/usr/local/lib/perl/5.8.8/IO/Socket/INET.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.550821 stat64("/usr/local/share/perl/5.8.8/IO/Socket/INET.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.550835 stat64("/usr/local/share/perl/5.8.8/IO/Socket/INET.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.550855 stat64("/usr/lib/perl5/IO/Socket/INET.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.550869 stat64("/usr/lib/perl5/IO/Socket/INET.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.550883 stat64("/usr/share/perl5/IO/Socket/INET.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.550896 stat64("/usr/share/perl5/IO/Socket/INET.pm", 0xbf930d9c) = -1 ENOENT (No such file or directory)
12287 20:25:19.550910 stat64("/usr/lib/perl/5.8/IO/Socket/INET.pmc", 0xbf930e8c) = -1 ENOENT (No such file or directory)
12287 20:25:19.550924 stat64("/usr/lib/perl/5.8/IO/Socket/INET.pm", {st_mode=S_IFREG|0644, st_size=6497, ...}) = 0
12287 20:25:19.550947 open("/usr/lib/perl/5.8/IO/Socket/INET.pm", O_RDONLY|O_LARGEFILE) = 6
12287 20:25:19.550963 ioctl(6, SNDCTL_TMR_TIMEBASE or TCGETS, 0xbf930ba8) = -1 ENOTTY (Inappropriate ioctl for device)
12287 20:25:19.550976 _llseek(6, 0, [0], SEEK_CUR) = 0
12287 20:25:19.551002 read(6, "# IO::Socket::INET.pm\n#\n# Copyright (c) 1997-8 Graham Barr <gbarr@pobox.com>. All rights reserved.\n# This program is free software; you can redistribute it and/or\n# modify it under the same terms as Perl itself.\n\npackage IO::Socket::INET;\n\nuse strict;\nour(@ISA, $VERSION);\nuse IO::Socket;\nuse Socket;\nuse Carp;\nuse Exporter;\nuse Errno;\n\n@ISA = qw(IO::Socket);\n$VERSION = \"1.29\";\n\nmy $EINVAL = exists(&Errno::EINVAL) ? Errno::EINVAL() : 1;\n\nIO::Socket::INET->register_domain( AF_INET );\n\nmy %socket_type = ( tcp  => SOCK_STREAM,\n\t\t    udp  => SOCK_DGRAM,\n\t\t    icmp => SOCK_RAW\n\t\t  );\n\nsub new {\n    my $class = shift;\n    unshift(@_, \"PeerAddr\") if @_ == 1;\n    return $class->SUPER::new(@_);\n}\n\nsub _sock_info {\n  my($addr,$port,$proto) = @_;\n  my $origport = $port;\n  my @proto = ();\n  my @serv = ();\n\n  $port = $1\n\tif(defined $addr && $addr =~ s,:([\\w\\(\\)/]+)$,,);\n\n  if(defined $proto  && $proto =~ /\\D/) {\n    if(@proto = getprotobyname($proto)) {\n      $proto = $proto[2] || undef;\n    }\n    else {\n      $@ = \"Bad protocol \'$proto\'\";\n      return;\n    }\n  }\n\n  if(defined $port) {\n    my $defport = ($port =~ s,\\((\\d+)\\)$,,) ? $1 : undef;\n    my $pnum = ($port =~ m,^(\\d+)$,)[0];\n\n    @serv = getservbyname($port, $proto[0] || \"\")\n\tif ($port =~ m,\\D,);\n\n    $port = $serv[2] || $defport || $pnum;\n    unless (defined $port) {\n\t$@ = \"Bad service \'$origport\'\";\n\treturn;\n    }\n\n    $proto = (getprotobyname($serv[3]))[2] || undef\n\tif @serv && !$proto;\n  }\n\n return ($addr || undef,\n\t $port || undef,\n\t $proto || undef\n\t);\n}\n\nsub _error {\n    my $sock = shift;\n    my $err = shift;\n    {\n      local($!);\n      my $title = ref($sock).\": \";\n      $@ = join(\"\", $_[0] =~ /^$title/ ? \"\" : $title, @_);\n      close($sock)\n\tif(defined fileno($sock));\n    }\n    $! = $err;\n    return undef;\n}\n\nsub _get_addr {\n    my($sock,$addr_str, $multi) = @_;\n    my @addr;\n    if ($multi && $addr_str !~ /^\\d+(?:\\.\\d+){3}$/) {\n\t(undef, undef, undef, undef, @addr) = gethostbyname($addr_str);\n    } else {\n\tmy $h = inet_aton($addr_str);\n\tpush(@addr, $h) if defined $h;\n    }\n    @addr;\n}\n\nsub configure {\n    my($sock,$arg) = @_;\n    my($lport,$rport,$laddr,$raddr,$proto,$type);\n\n    $arg->{LocalAddr} = $arg->{LocalHost}\n\tif exists $arg->{LocalHost} && !exists $arg->{LocalAddr};\n\n    ($laddr,$lport,$proto) = _sock_info($arg->{LocalAddr},\n\t\t\t\t\t$arg->{LocalPort},\n\t\t\t\t\t$arg->{Proto})\n\t\t\tor return _error($sock, $!, $@);\n\n    $laddr = defined $laddr ? inet_aton($laddr)\n\t\t\t    : INADDR_ANY;\n\n    return _error($sock, $EINVAL, \"Bad hostname \'\",$arg->{LocalAddr},\"\'\")\n\tunless(defined $laddr);\n\n    $arg->{PeerAddr} = $arg->{PeerHost}\n\tif exists $arg->{PeerHost} && !exists $arg->{PeerAddr};\n\n    unless(exists $arg->{Listen}) {\n\t($raddr,$rport,$proto) = _sock_info($arg->{PeerAddr},\n\t\t\t\t\t    $arg->{PeerPort},\n\t\t\t\t\t    $proto)\n\t\t\tor return _error($sock, $!, $@);\n    }\n\n    $proto ||= (getprotobyname(\'tcp\'))[2];\n\n    my $pname = (getprotobynumber($proto))[0];\n    $type = $arg->{Type} || $socket_type{lc $pname};\n\n    my @raddr = ();\n\n    if(defined $raddr) {\n\t@raddr = $sock->_get_addr($raddr, $arg->{MultiHomed});\n\treturn _error($sock, $EINVAL, \"Bad hostname \'\",$arg->{PeerAddr},\"\'\")\n\t    unless @raddr;\n    }\n\n    while(1) {\n\n\t$sock->socket(AF_INET, $type, $proto) or\n\t    return _error($sock, $!, \"$!\");\n\n        if (defined $arg->{Blocking}) {\n\t    defined $sock->blocking($arg->{Blocking})\n\t\tor return _error($sock, $!, \"$!\");\n\t}\n\n\tif ($arg->{Reuse} || $arg->{ReuseAddr}) {\n\t    $sock->sockopt(SO_REUSEADDR,1) or\n\t\t    return _error($sock, $!, \"$!\");\n\t}\n\n\tif ($arg->{ReusePort}) {\n\t    $sock->sockopt(SO_REUSEPORT,1) or\n\t\t    return _error($sock, $!, \"$!\");\n\t}\n\n\tif ($arg->{Broadcast}) {\n\t\t$sock->sockopt(SO_BROADCAST,1) or\n\t\t    return _error($sock, $!, \"$!\");\n\t}\n\n\tif($lport || ($laddr ne INADDR_ANY) || exists $arg->{Listen}) {\n\t    $sock->bind($lport || 0, $laddr) or\n\t\t    return _error($sock, $!, \"$!\");\n\t}\n\n\tif(exists $arg->{Listen}) {\n\t    $sock->listen($arg->{Listen} || 5) or\n\t\treturn _error($sock, $!, \"$!\");\n\t    last;\n\t}\n\n \t# don\'t try to connect unless we\'re given a PeerAddr\n \tlast unless e", 4096) = 4096
12287 20:25:19.551333 stat64("/etc/perl/Exporter/Heavy.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.551350 stat64("/etc/perl/Exporter/Heavy.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.551364 stat64("/usr/local/lib/perl/5.8.8/Exporter/Heavy.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.551377 stat64("/usr/local/lib/perl/5.8.8/Exporter/Heavy.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.551392 stat64("/usr/local/share/perl/5.8.8/Exporter/Heavy.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.551405 stat64("/usr/local/share/perl/5.8.8/Exporter/Heavy.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.551420 stat64("/usr/lib/perl5/Exporter/Heavy.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.551433 stat64("/usr/lib/perl5/Exporter/Heavy.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.551447 stat64("/usr/share/perl5/Exporter/Heavy.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.551459 stat64("/usr/share/perl5/Exporter/Heavy.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.551473 stat64("/usr/lib/perl/5.8/Exporter/Heavy.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
12287 20:25:19.551487 stat64("/usr/lib/perl/5.8/Exporter/Heavy.pm", 0xbf9308ec) = -1 ENOENT (No such file or directory)
12287 20:25:19.551512 stat64("/usr/share/perl/5.8/Exporter/Heavy.pmc", 0xbf9309dc) = -1 ENOENT (No such file or directory)
